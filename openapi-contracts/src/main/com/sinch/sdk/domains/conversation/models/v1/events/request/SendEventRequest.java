/*
 * Conversation API | Sinch
 * Send and receive messages globally over SMS, RCS, WhatsApp, Viber Business, Facebook messenger and other popular channels using the Sinch Conversation API.  The Conversation API endpoint uses built-in transcoding to give you the power of conversation across all supported channels and, if required, full control over channel specific features.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@sinch.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.sinch.sdk.domains.conversation.models.v1.events.request;

import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.sinch.sdk.domains.conversation.models.v1.ConversationChannel;
import com.sinch.sdk.domains.conversation.models.v1.Recipient;
import com.sinch.sdk.domains.conversation.models.v1.events.internal.AppEventFieldInternal;
import com.sinch.sdk.domains.conversation.models.v1.messages.request.MessageQueue;
import java.util.List;

/** SendEventRequest */
@JsonDeserialize(builder = SendEventRequestImpl.Builder.class)
public interface SendEventRequest {

  /**
   * The ID of the app sending the event.
   *
   * @return appId
   */
  String getAppId();

  /**
   * Overwrites the default callback url for delivery receipts for this message The REST URL should
   * be of the form: <code>http://host[:port]/path</code>
   *
   * @return callbackUrl
   */
  String getCallbackUrl();

  /**
   * Optional. A single element array that dictates on what channel should the Conversation API try
   * to send the event. It overrides any default set on the contact. Providing more than one option
   * has no effect.
   *
   * @return channelPriorityOrder
   */
  List<ConversationChannel> getChannelPriorityOrder();

  /**
   * Get event
   *
   * @return event
   */
  AppEventFieldInternal getEvent();

  /**
   * Optional. Eventual metadata that should be associated to the event.
   *
   * @return eventMetadata
   */
  String getEventMetadata();

  /**
   * Get queue
   *
   * @return queue
   */
  MessageQueue getQueue();

  /**
   * Get recipient
   *
   * @return recipient
   */
  Recipient getRecipient();

  /**
   * Getting builder
   *
   * @return New Builder instance
   */
  static Builder builder() {
    return new SendEventRequestImpl.Builder();
  }

  /** Dedicated Builder */
  interface Builder {

    /**
     * see getter
     *
     * @param appId see getter
     * @return Current builder
     * @see #getAppId
     */
    Builder setAppId(String appId);

    /**
     * see getter
     *
     * @param callbackUrl see getter
     * @return Current builder
     * @see #getCallbackUrl
     */
    Builder setCallbackUrl(String callbackUrl);

    /**
     * see getter
     *
     * @param channelPriorityOrder see getter
     * @return Current builder
     * @see #getChannelPriorityOrder
     */
    Builder setChannelPriorityOrder(List<ConversationChannel> channelPriorityOrder);

    /**
     * see getter
     *
     * @param event see getter
     * @return Current builder
     * @see #getEvent
     */
    Builder setEvent(AppEventFieldInternal event);

    /**
     * see getter
     *
     * @param eventMetadata see getter
     * @return Current builder
     * @see #getEventMetadata
     */
    Builder setEventMetadata(String eventMetadata);

    /**
     * see getter
     *
     * @param queue see getter
     * @return Current builder
     * @see #getQueue
     */
    Builder setQueue(MessageQueue queue);

    /**
     * see getter
     *
     * @param recipient see getter
     * @return Current builder
     * @see #getRecipient
     */
    Builder setRecipient(Recipient recipient);

    /**
     * Create instance
     *
     * @return The instance build with current builder values
     */
    SendEventRequest build();
  }
}
