/*
 * Conversation API | Sinch
 * Send and receive messages globally over SMS, RCS, WhatsApp, Viber Business, Facebook messenger and other popular channels using the Sinch Conversation API.  The Conversation API endpoint uses built-in transcoding to give you the power of conversation across all supported channels and, if required, full control over channel specific features.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@sinch.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.sinch.sdk.domains.conversation.models.dto.v1;

import com.fasterxml.jackson.annotation.JsonFilter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import java.util.Objects;

/** A message component for interactive messages, containing a choice. */
@JsonPropertyOrder({
  ChoiceItemDto.JSON_PROPERTY_TITLE,
  ChoiceItemDto.JSON_PROPERTY_DESCRIPTION,
  ChoiceItemDto.JSON_PROPERTY_MEDIA,
  ChoiceItemDto.JSON_PROPERTY_POSTBACK_DATA
})
@JsonFilter("uninitializedFilter")
@JsonInclude(value = JsonInclude.Include.CUSTOM)
public class ChoiceItemDto {
  private static final long serialVersionUID = 1L;
  public static final String JSON_PROPERTY_TITLE = "title";
  private String title;
  private boolean titleDefined = false;

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  private String description;
  private boolean descriptionDefined = false;

  public static final String JSON_PROPERTY_MEDIA = "media";
  private MediaMessageDto media;
  private boolean mediaDefined = false;

  public static final String JSON_PROPERTY_POSTBACK_DATA = "postback_data";
  private String postbackData;
  private boolean postbackDataDefined = false;

  public ChoiceItemDto() {}

  public ChoiceItemDto title(String title) {
    this.title = title;
    this.titleDefined = true;
    return this;
  }

  /**
   * Required parameter. Title for the choice item.
   *
   * @return title
   */
  @JsonProperty(JSON_PROPERTY_TITLE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getTitle() {
    return title;
  }

  @JsonIgnore
  public boolean getTitleDefined() {
    return titleDefined;
  }

  @JsonProperty(JSON_PROPERTY_TITLE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTitle(String title) {
    this.title = title;
    this.titleDefined = true;
  }

  public ChoiceItemDto description(String description) {
    this.description = description;
    this.descriptionDefined = true;
    return this;
  }

  /**
   * Optional parameter. The description (or subtitle) of this choice item.
   *
   * @return description
   */
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getDescription() {
    return description;
  }

  @JsonIgnore
  public boolean getDescriptionDefined() {
    return descriptionDefined;
  }

  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDescription(String description) {
    this.description = description;
    this.descriptionDefined = true;
  }

  public ChoiceItemDto media(MediaMessageDto media) {
    this.media = media;
    this.mediaDefined = true;
    return this;
  }

  /**
   * Get media
   *
   * @return media
   */
  @JsonProperty(JSON_PROPERTY_MEDIA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public MediaMessageDto getMedia() {
    return media;
  }

  @JsonIgnore
  public boolean getMediaDefined() {
    return mediaDefined;
  }

  @JsonProperty(JSON_PROPERTY_MEDIA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMedia(MediaMessageDto media) {
    this.media = media;
    this.mediaDefined = true;
  }

  public ChoiceItemDto postbackData(String postbackData) {
    this.postbackData = postbackData;
    this.postbackDataDefined = true;
    return this;
  }

  /**
   * Optional parameter. Postback data that will be returned in the MO if the user selects this
   * option.
   *
   * @return postbackData
   */
  @JsonProperty(JSON_PROPERTY_POSTBACK_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getPostbackData() {
    return postbackData;
  }

  @JsonIgnore
  public boolean getPostbackDataDefined() {
    return postbackDataDefined;
  }

  @JsonProperty(JSON_PROPERTY_POSTBACK_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPostbackData(String postbackData) {
    this.postbackData = postbackData;
    this.postbackDataDefined = true;
  }

  /** Return true if this ChoiceItem object is equal to o. */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChoiceItemDto choiceItem = (ChoiceItemDto) o;
    return Objects.equals(this.title, choiceItem.title)
        && Objects.equals(this.description, choiceItem.description)
        && Objects.equals(this.media, choiceItem.media)
        && Objects.equals(this.postbackData, choiceItem.postbackData);
  }

  @Override
  public int hashCode() {
    return Objects.hash(title, description, media, postbackData);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChoiceItemDto {\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    media: ").append(toIndentedString(media)).append("\n");
    sb.append("    postbackData: ").append(toIndentedString(postbackData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
