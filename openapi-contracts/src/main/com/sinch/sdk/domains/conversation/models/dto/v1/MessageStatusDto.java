/*
 * Conversation API | Sinch
 * Send and receive messages globally over SMS, RCS, WhatsApp, Viber Business, Facebook messenger and other popular channels using the Sinch Conversation API.  The Conversation API endpoint uses built-in transcoding to give you the power of conversation across all supported channels and, if required, full control over channel specific features.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@sinch.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.sinch.sdk.domains.conversation.models.dto.v1;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFilter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonValue;
import java.time.OffsetDateTime;
import java.util.Objects;

/** The status of the message, eventTime of the status and reason if status is failed */
@JsonPropertyOrder({
  MessageStatusDto.JSON_PROPERTY_STATUS,
  MessageStatusDto.JSON_PROPERTY_EVENT_TIME,
  MessageStatusDto.JSON_PROPERTY_REASON
})
@JsonFilter("uninitializedFilter")
@JsonInclude(value = JsonInclude.Include.CUSTOM)
public class MessageStatusDto {
  private static final long serialVersionUID = 1L;

  /** Status of the message */
  public enum StatusEnum {
    STATUS_UNSPECIFIED("STATUS_UNSPECIFIED"),

    QUEUED("QUEUED"),

    QUEUED_ON_CHANNEL("QUEUED_ON_CHANNEL"),

    DELIVERED("DELIVERED"),

    READ("READ"),

    FAILED("FAILED"),

    SWITCHING_CHANNEL("SWITCHING_CHANNEL"),

    RECEIVED("RECEIVED"),

    UNKNOWN_DEFAULT_OPEN_API("unknown_default_open_api");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return UNKNOWN_DEFAULT_OPEN_API;
    }
  }

  public static final String JSON_PROPERTY_STATUS = "status";
  private String status;
  private boolean statusDefined = false;

  public static final String JSON_PROPERTY_EVENT_TIME = "event_time";
  private OffsetDateTime eventTime;
  private boolean eventTimeDefined = false;

  public static final String JSON_PROPERTY_REASON = "reason";
  private String reason;
  private boolean reasonDefined = false;

  public MessageStatusDto() {}

  public MessageStatusDto status(String status) {
    this.status = status;
    this.statusDefined = true;
    return this;
  }

  /**
   * Status of the message
   *
   * @return status
   */
  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getStatus() {
    return status;
  }

  @JsonIgnore
  public boolean getStatusDefined() {
    return statusDefined;
  }

  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setStatus(String status) {
    this.status = status;
    this.statusDefined = true;
  }

  public MessageStatusDto eventTime(OffsetDateTime eventTime) {
    this.eventTime = eventTime;
    this.eventTimeDefined = true;
    return this;
  }

  /**
   * Timestamp at which the current status occurred
   *
   * @return eventTime
   */
  @JsonProperty(JSON_PROPERTY_EVENT_TIME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public OffsetDateTime getEventTime() {
    return eventTime;
  }

  @JsonIgnore
  public boolean getEventTimeDefined() {
    return eventTimeDefined;
  }

  @JsonProperty(JSON_PROPERTY_EVENT_TIME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEventTime(OffsetDateTime eventTime) {
    this.eventTime = eventTime;
    this.eventTimeDefined = true;
  }

  public MessageStatusDto reason(String reason) {
    this.reason = reason;
    this.reasonDefined = true;
    return this;
  }

  /**
   * If status is FAILED, reason of failure
   *
   * @return reason
   */
  @JsonProperty(JSON_PROPERTY_REASON)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getReason() {
    return reason;
  }

  @JsonIgnore
  public boolean getReasonDefined() {
    return reasonDefined;
  }

  @JsonProperty(JSON_PROPERTY_REASON)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setReason(String reason) {
    this.reason = reason;
    this.reasonDefined = true;
  }

  /** Return true if this MessageStatus object is equal to o. */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MessageStatusDto messageStatus = (MessageStatusDto) o;
    return Objects.equals(this.status, messageStatus.status)
        && Objects.equals(this.eventTime, messageStatus.eventTime)
        && Objects.equals(this.reason, messageStatus.reason);
  }

  @Override
  public int hashCode() {
    return Objects.hash(status, eventTime, reason);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MessageStatusDto {\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    eventTime: ").append(toIndentedString(eventTime)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
