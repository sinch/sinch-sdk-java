/*
 * Conversation API | Sinch
 * Send and receive messages globally over SMS, RCS, WhatsApp, Viber Business, Facebook messenger and other popular channels using the Sinch Conversation API.  The Conversation API endpoint uses built-in transcoding to give you the power of conversation across all supported channels and, if required, full control over channel specific features.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@sinch.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.sinch.sdk.domains.conversation.models.dto.v1;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFilter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import java.time.OffsetDateTime;
import java.util.Objects;

/** A message on a particular channel. */
@JsonPropertyOrder({
  ConversationMessageDto.JSON_PROPERTY_ACCEPT_TIME,
  ConversationMessageDto.JSON_PROPERTY_APP_MESSAGE,
  ConversationMessageDto.JSON_PROPERTY_CHANNEL_IDENTITY,
  ConversationMessageDto.JSON_PROPERTY_CONTACT_ID,
  ConversationMessageDto.JSON_PROPERTY_CONTACT_MESSAGE,
  ConversationMessageDto.JSON_PROPERTY_CONVERSATION_ID,
  ConversationMessageDto.JSON_PROPERTY_DIRECTION,
  ConversationMessageDto.JSON_PROPERTY_ID,
  ConversationMessageDto.JSON_PROPERTY_METADATA,
  ConversationMessageDto.JSON_PROPERTY_INJECTED,
  ConversationMessageDto.JSON_PROPERTY_SENDER_ID,
  ConversationMessageDto.JSON_PROPERTY_PROCESSING_MODE,
  ConversationMessageDto.JSON_PROPERTY_MESSAGE_STATUS
})
@JsonFilter("uninitializedFilter")
@JsonInclude(value = JsonInclude.Include.CUSTOM)
public class ConversationMessageDto {
  public static final String JSON_PROPERTY_ACCEPT_TIME = "accept_time";
  private OffsetDateTime acceptTime;
  private boolean acceptTimeDefined = false;

  public static final String JSON_PROPERTY_APP_MESSAGE = "app_message";
  private AppMessageDto appMessage;
  private boolean appMessageDefined = false;

  public static final String JSON_PROPERTY_CHANNEL_IDENTITY = "channel_identity";
  private ChannelIdentityDto channelIdentity;
  private boolean channelIdentityDefined = false;

  public static final String JSON_PROPERTY_CONTACT_ID = "contact_id";
  private String contactId;
  private boolean contactIdDefined = false;

  public static final String JSON_PROPERTY_CONTACT_MESSAGE = "contact_message";
  private ContactMessageDto contactMessage;
  private boolean contactMessageDefined = false;

  public static final String JSON_PROPERTY_CONVERSATION_ID = "conversation_id";
  private String conversationId;
  private boolean conversationIdDefined = false;

  public static final String JSON_PROPERTY_DIRECTION = "direction";
  private ConversationDirectionDto direction;
  private boolean directionDefined = false;

  public static final String JSON_PROPERTY_ID = "id";
  private String id;
  private boolean idDefined = false;

  public static final String JSON_PROPERTY_METADATA = "metadata";
  private String metadata;
  private boolean metadataDefined = false;

  public static final String JSON_PROPERTY_INJECTED = "injected";
  private Boolean injected;
  private boolean injectedDefined = false;

  public static final String JSON_PROPERTY_SENDER_ID = "sender_id";
  private String senderId;
  private boolean senderIdDefined = false;

  public static final String JSON_PROPERTY_PROCESSING_MODE = "processing_mode";
  private ProcessingModeDto processingMode;
  private boolean processingModeDefined = false;

  public static final String JSON_PROPERTY_MESSAGE_STATUS = "message_status";
  private AppMessageCommonPropsAgentDto messageStatus;
  private boolean messageStatusDefined = false;

  public ConversationMessageDto() {}

  @JsonCreator
  public ConversationMessageDto(
      @JsonProperty(JSON_PROPERTY_ACCEPT_TIME) OffsetDateTime acceptTime,
      @JsonProperty(JSON_PROPERTY_INJECTED) Boolean injected) {
    this();
    this.acceptTime = acceptTime;
    this.acceptTimeDefined = true;
    this.injected = injected;
    this.injectedDefined = true;
  }

  /**
   * The time Conversation API processed the message.
   *
   * @return acceptTime
   */
  @JsonProperty(JSON_PROPERTY_ACCEPT_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public OffsetDateTime getAcceptTime() {
    return acceptTime;
  }

  @JsonIgnore
  public boolean getAcceptTimeDefined() {
    return acceptTimeDefined;
  }

  public ConversationMessageDto appMessage(AppMessageDto appMessage) {
    this.appMessage = appMessage;
    this.appMessageDefined = true;
    return this;
  }

  /**
   * Get appMessage
   *
   * @return appMessage
   */
  @JsonProperty(JSON_PROPERTY_APP_MESSAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public AppMessageDto getAppMessage() {
    return appMessage;
  }

  @JsonIgnore
  public boolean getAppMessageDefined() {
    return appMessageDefined;
  }

  @JsonProperty(JSON_PROPERTY_APP_MESSAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAppMessage(AppMessageDto appMessage) {
    this.appMessage = appMessage;
    this.appMessageDefined = true;
  }

  public ConversationMessageDto channelIdentity(ChannelIdentityDto channelIdentity) {
    this.channelIdentity = channelIdentity;
    this.channelIdentityDefined = true;
    return this;
  }

  /**
   * Get channelIdentity
   *
   * @return channelIdentity
   */
  @JsonProperty(JSON_PROPERTY_CHANNEL_IDENTITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public ChannelIdentityDto getChannelIdentity() {
    return channelIdentity;
  }

  @JsonIgnore
  public boolean getChannelIdentityDefined() {
    return channelIdentityDefined;
  }

  @JsonProperty(JSON_PROPERTY_CHANNEL_IDENTITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setChannelIdentity(ChannelIdentityDto channelIdentity) {
    this.channelIdentity = channelIdentity;
    this.channelIdentityDefined = true;
  }

  public ConversationMessageDto contactId(String contactId) {
    this.contactId = contactId;
    this.contactIdDefined = true;
    return this;
  }

  /**
   * The ID of the contact.
   *
   * @return contactId
   */
  @JsonProperty(JSON_PROPERTY_CONTACT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getContactId() {
    return contactId;
  }

  @JsonIgnore
  public boolean getContactIdDefined() {
    return contactIdDefined;
  }

  @JsonProperty(JSON_PROPERTY_CONTACT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setContactId(String contactId) {
    this.contactId = contactId;
    this.contactIdDefined = true;
  }

  public ConversationMessageDto contactMessage(ContactMessageDto contactMessage) {
    this.contactMessage = contactMessage;
    this.contactMessageDefined = true;
    return this;
  }

  /**
   * Get contactMessage
   *
   * @return contactMessage
   */
  @JsonProperty(JSON_PROPERTY_CONTACT_MESSAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public ContactMessageDto getContactMessage() {
    return contactMessage;
  }

  @JsonIgnore
  public boolean getContactMessageDefined() {
    return contactMessageDefined;
  }

  @JsonProperty(JSON_PROPERTY_CONTACT_MESSAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setContactMessage(ContactMessageDto contactMessage) {
    this.contactMessage = contactMessage;
    this.contactMessageDefined = true;
  }

  public ConversationMessageDto conversationId(String conversationId) {
    this.conversationId = conversationId;
    this.conversationIdDefined = true;
    return this;
  }

  /**
   * The ID of the conversation.
   *
   * @return conversationId
   */
  @JsonProperty(JSON_PROPERTY_CONVERSATION_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getConversationId() {
    return conversationId;
  }

  @JsonIgnore
  public boolean getConversationIdDefined() {
    return conversationIdDefined;
  }

  @JsonProperty(JSON_PROPERTY_CONVERSATION_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setConversationId(String conversationId) {
    this.conversationId = conversationId;
    this.conversationIdDefined = true;
  }

  public ConversationMessageDto direction(ConversationDirectionDto direction) {
    this.direction = direction;
    this.directionDefined = true;
    return this;
  }

  /**
   * Get direction
   *
   * @return direction
   */
  @JsonProperty(JSON_PROPERTY_DIRECTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public ConversationDirectionDto getDirection() {
    return direction;
  }

  @JsonIgnore
  public boolean getDirectionDefined() {
    return directionDefined;
  }

  @JsonProperty(JSON_PROPERTY_DIRECTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDirection(ConversationDirectionDto direction) {
    this.direction = direction;
    this.directionDefined = true;
  }

  public ConversationMessageDto id(String id) {
    this.id = id;
    this.idDefined = true;
    return this;
  }

  /**
   * The ID of the message.
   *
   * @return id
   */
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getId() {
    return id;
  }

  @JsonIgnore
  public boolean getIdDefined() {
    return idDefined;
  }

  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(String id) {
    this.id = id;
    this.idDefined = true;
  }

  public ConversationMessageDto metadata(String metadata) {
    this.metadata = metadata;
    this.metadataDefined = true;
    return this;
  }

  /**
   * Optional. Metadata associated with the contact. Up to 1024 characters long.
   *
   * @return metadata
   */
  @JsonProperty(JSON_PROPERTY_METADATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getMetadata() {
    return metadata;
  }

  @JsonIgnore
  public boolean getMetadataDefined() {
    return metadataDefined;
  }

  @JsonProperty(JSON_PROPERTY_METADATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMetadata(String metadata) {
    this.metadata = metadata;
    this.metadataDefined = true;
  }

  /**
   * Flag for whether this message was injected.
   *
   * @return injected
   */
  @JsonProperty(JSON_PROPERTY_INJECTED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getInjected() {
    return injected;
  }

  @JsonIgnore
  public boolean getInjectedDefined() {
    return injectedDefined;
  }

  public ConversationMessageDto senderId(String senderId) {
    this.senderId = senderId;
    this.senderIdDefined = true;
    return this;
  }

  /**
   * TBC: Not documented
   *
   * @return senderId
   */
  @JsonProperty(JSON_PROPERTY_SENDER_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getSenderId() {
    return senderId;
  }

  @JsonIgnore
  public boolean getSenderIdDefined() {
    return senderIdDefined;
  }

  @JsonProperty(JSON_PROPERTY_SENDER_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSenderId(String senderId) {
    this.senderId = senderId;
    this.senderIdDefined = true;
  }

  public ConversationMessageDto processingMode(ProcessingModeDto processingMode) {
    this.processingMode = processingMode;
    this.processingModeDefined = true;
    return this;
  }

  /**
   * Get processingMode
   *
   * @return processingMode
   */
  @JsonProperty(JSON_PROPERTY_PROCESSING_MODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public ProcessingModeDto getProcessingMode() {
    return processingMode;
  }

  @JsonIgnore
  public boolean getProcessingModeDefined() {
    return processingModeDefined;
  }

  @JsonProperty(JSON_PROPERTY_PROCESSING_MODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProcessingMode(ProcessingModeDto processingMode) {
    this.processingMode = processingMode;
    this.processingModeDefined = true;
  }

  public ConversationMessageDto messageStatus(AppMessageCommonPropsAgentDto messageStatus) {
    this.messageStatus = messageStatus;
    this.messageStatusDefined = true;
    return this;
  }

  /**
   * Get messageStatus
   *
   * @return messageStatus
   */
  @JsonProperty(JSON_PROPERTY_MESSAGE_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public AppMessageCommonPropsAgentDto getMessageStatus() {
    return messageStatus;
  }

  @JsonIgnore
  public boolean getMessageStatusDefined() {
    return messageStatusDefined;
  }

  @JsonProperty(JSON_PROPERTY_MESSAGE_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMessageStatus(AppMessageCommonPropsAgentDto messageStatus) {
    this.messageStatus = messageStatus;
    this.messageStatusDefined = true;
  }

  /** Return true if this ConversationMessage object is equal to o. */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConversationMessageDto conversationMessage = (ConversationMessageDto) o;
    return Objects.equals(this.acceptTime, conversationMessage.acceptTime)
        && Objects.equals(this.appMessage, conversationMessage.appMessage)
        && Objects.equals(this.channelIdentity, conversationMessage.channelIdentity)
        && Objects.equals(this.contactId, conversationMessage.contactId)
        && Objects.equals(this.contactMessage, conversationMessage.contactMessage)
        && Objects.equals(this.conversationId, conversationMessage.conversationId)
        && Objects.equals(this.direction, conversationMessage.direction)
        && Objects.equals(this.id, conversationMessage.id)
        && Objects.equals(this.metadata, conversationMessage.metadata)
        && Objects.equals(this.injected, conversationMessage.injected)
        && Objects.equals(this.senderId, conversationMessage.senderId)
        && Objects.equals(this.processingMode, conversationMessage.processingMode)
        && Objects.equals(this.messageStatus, conversationMessage.messageStatus);
  }

  @Override
  public int hashCode() {
    return Objects.hash(
        acceptTime,
        appMessage,
        channelIdentity,
        contactId,
        contactMessage,
        conversationId,
        direction,
        id,
        metadata,
        injected,
        senderId,
        processingMode,
        messageStatus);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConversationMessageDto {\n");
    sb.append("    acceptTime: ").append(toIndentedString(acceptTime)).append("\n");
    sb.append("    appMessage: ").append(toIndentedString(appMessage)).append("\n");
    sb.append("    channelIdentity: ").append(toIndentedString(channelIdentity)).append("\n");
    sb.append("    contactId: ").append(toIndentedString(contactId)).append("\n");
    sb.append("    contactMessage: ").append(toIndentedString(contactMessage)).append("\n");
    sb.append("    conversationId: ").append(toIndentedString(conversationId)).append("\n");
    sb.append("    direction: ").append(toIndentedString(direction)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    injected: ").append(toIndentedString(injected)).append("\n");
    sb.append("    senderId: ").append(toIndentedString(senderId)).append("\n");
    sb.append("    processingMode: ").append(toIndentedString(processingMode)).append("\n");
    sb.append("    messageStatus: ").append(toIndentedString(messageStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
