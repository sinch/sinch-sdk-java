/*
 * Conversation API | Sinch
 * Send and receive messages globally over SMS, RCS, WhatsApp, Viber Business, Facebook messenger and other popular channels using the Sinch Conversation API.  The Conversation API endpoint uses built-in transcoding to give you the power of conversation across all supported channels and, if required, full control over channel specific features.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@sinch.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.sinch.sdk.domains.conversation.models.v1.app;

import com.fasterxml.jackson.databind.annotation.JsonDeserialize;

/**
 * The retention policy configured for messages in [Dispatch
 * Mode](../../../../../conversation/processing-modes/). Currently only
 * &#x60;MESSAGE_EXPIRE_POLICY&#x60; is available. For more information about retention policies,
 * see [Retention Policy](/docs/conversation/keyconcepts/#retention-policy).
 */
@JsonDeserialize(builder = DispatchRetentionPolicyImpl.Builder.class)
public interface DispatchRetentionPolicy {

  /**
   * Get retentionType
   *
   * @return retentionType
   */
  DispatchRetentionPolicyType getRetentionType();

  /**
   * Optional. The days before a message is eligible for deletion. The valid range is &#x60;[0 -
   * 7]&#x60;. In the case of a &#x60;0&#x60; day TTL, messages aren&#39;t stored at all. Note the
   * retention cleanup job runs once every twenty-four hours, so messages are not deleted on the
   * minute they become eligible for deletion.
   *
   * @return ttlDays
   */
  Long getTtlDays();

  /**
   * Getting builder
   *
   * @return New Builder instance
   */
  static Builder builder() {
    return new DispatchRetentionPolicyImpl.Builder();
  }

  /** Dedicated Builder */
  interface Builder {

    /**
     * see getter
     *
     * @param retentionType see getter
     * @return Current builder
     * @see #getRetentionType
     */
    Builder setRetentionType(DispatchRetentionPolicyType retentionType);

    /**
     * see getter
     *
     * @param ttlDays see getter
     * @return Current builder
     * @see #getTtlDays
     */
    Builder setTtlDays(Long ttlDays);

    /**
     * Create instance
     *
     * @return The instance build with current builder values
     */
    DispatchRetentionPolicy build();
  }
}
