/*
 * Conversation API | Sinch
 * Send and receive messages globally over SMS, RCS, WhatsApp, Viber Business, Facebook messenger and other popular channels using the Sinch Conversation API.  The Conversation API endpoint uses built-in transcoding to give you the power of conversation across all supported channels and, if required, full control over channel specific features.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@sinch.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.sinch.sdk.domains.conversation.models.dto.v1;

import com.fasterxml.jackson.annotation.JsonFilter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/** TranscodeMessageRequestDto */
@JsonPropertyOrder({
  TranscodeMessageRequestDto.JSON_PROPERTY_APP_ID,
  TranscodeMessageRequestDto.JSON_PROPERTY_APP_MESSAGE,
  TranscodeMessageRequestDto.JSON_PROPERTY_CHANNELS,
  TranscodeMessageRequestDto.JSON_PROPERTY_FROM,
  TranscodeMessageRequestDto.JSON_PROPERTY_TO
})
@JsonFilter("uninitializedFilter")
@JsonInclude(value = JsonInclude.Include.CUSTOM)
public class TranscodeMessageRequestDto {
  private static final long serialVersionUID = 1L;
  public static final String JSON_PROPERTY_APP_ID = "app_id";
  private String appId;
  private boolean appIdDefined = false;

  public static final String JSON_PROPERTY_APP_MESSAGE = "app_message";
  private AppMessageDto appMessage;
  private boolean appMessageDefined = false;

  public static final String JSON_PROPERTY_CHANNELS = "channels";
  private List<ConversationChannelDto> channels;
  private boolean channelsDefined = false;

  public static final String JSON_PROPERTY_FROM = "from";
  private String from;
  private boolean fromDefined = false;

  public static final String JSON_PROPERTY_TO = "to";
  private String to;
  private boolean toDefined = false;

  public TranscodeMessageRequestDto() {}

  public TranscodeMessageRequestDto appId(String appId) {
    this.appId = appId;
    this.appIdDefined = true;
    return this;
  }

  /**
   * The ID of the app used to transcode the message.
   *
   * @return appId
   */
  @JsonProperty(JSON_PROPERTY_APP_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getAppId() {
    return appId;
  }

  @JsonIgnore
  public boolean getAppIdDefined() {
    return appIdDefined;
  }

  @JsonProperty(JSON_PROPERTY_APP_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAppId(String appId) {
    this.appId = appId;
    this.appIdDefined = true;
  }

  public TranscodeMessageRequestDto appMessage(AppMessageDto appMessage) {
    this.appMessage = appMessage;
    this.appMessageDefined = true;
    return this;
  }

  /**
   * Get appMessage
   *
   * @return appMessage
   */
  @JsonProperty(JSON_PROPERTY_APP_MESSAGE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public AppMessageDto getAppMessage() {
    return appMessage;
  }

  @JsonIgnore
  public boolean getAppMessageDefined() {
    return appMessageDefined;
  }

  @JsonProperty(JSON_PROPERTY_APP_MESSAGE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAppMessage(AppMessageDto appMessage) {
    this.appMessage = appMessage;
    this.appMessageDefined = true;
  }

  public TranscodeMessageRequestDto channels(List<ConversationChannelDto> channels) {
    this.channels = channels;
    this.channelsDefined = true;
    return this;
  }

  public TranscodeMessageRequestDto addChannelsItem(ConversationChannelDto channelsItem) {
    if (this.channels == null) {
      this.channels = new ArrayList<>();
    }
    this.channelsDefined = true;
    this.channels.add(channelsItem);
    return this;
  }

  /**
   * The list of channels for which the message shall be transcoded to.
   *
   * @return channels
   */
  @JsonProperty(JSON_PROPERTY_CHANNELS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public List<ConversationChannelDto> getChannels() {
    return channels;
  }

  @JsonIgnore
  public boolean getChannelsDefined() {
    return channelsDefined;
  }

  @JsonProperty(JSON_PROPERTY_CHANNELS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setChannels(List<ConversationChannelDto> channels) {
    this.channels = channels;
    this.channelsDefined = true;
  }

  public TranscodeMessageRequestDto from(String from) {
    this.from = from;
    this.fromDefined = true;
    return this;
  }

  /**
   * Optional.
   *
   * @return from
   */
  @JsonProperty(JSON_PROPERTY_FROM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getFrom() {
    return from;
  }

  @JsonIgnore
  public boolean getFromDefined() {
    return fromDefined;
  }

  @JsonProperty(JSON_PROPERTY_FROM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFrom(String from) {
    this.from = from;
    this.fromDefined = true;
  }

  public TranscodeMessageRequestDto to(String to) {
    this.to = to;
    this.toDefined = true;
    return this;
  }

  /**
   * Optional.
   *
   * @return to
   */
  @JsonProperty(JSON_PROPERTY_TO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getTo() {
    return to;
  }

  @JsonIgnore
  public boolean getToDefined() {
    return toDefined;
  }

  @JsonProperty(JSON_PROPERTY_TO)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTo(String to) {
    this.to = to;
    this.toDefined = true;
  }

  /** Return true if this TranscodeMessageRequest object is equal to o. */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TranscodeMessageRequestDto transcodeMessageRequest = (TranscodeMessageRequestDto) o;
    return Objects.equals(this.appId, transcodeMessageRequest.appId)
        && Objects.equals(this.appMessage, transcodeMessageRequest.appMessage)
        && Objects.equals(this.channels, transcodeMessageRequest.channels)
        && Objects.equals(this.from, transcodeMessageRequest.from)
        && Objects.equals(this.to, transcodeMessageRequest.to);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appId, appMessage, channels, from, to);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TranscodeMessageRequestDto {\n");
    sb.append("    appId: ").append(toIndentedString(appId)).append("\n");
    sb.append("    appMessage: ").append(toIndentedString(appMessage)).append("\n");
    sb.append("    channels: ").append(toIndentedString(channels)).append("\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
