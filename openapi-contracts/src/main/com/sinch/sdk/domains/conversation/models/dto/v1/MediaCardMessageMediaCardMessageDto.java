/*
 * Conversation API | Sinch
 * Send and receive messages globally over SMS, RCS, WhatsApp, Viber Business, Facebook messenger and other popular channels using the Sinch Conversation API.  The Conversation API endpoint uses built-in transcoding to give you the power of conversation across all supported channels and, if required, full control over channel specific features.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@sinch.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.sinch.sdk.domains.conversation.models.dto.v1;

import com.fasterxml.jackson.annotation.JsonFilter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import java.util.Objects;

/** MediaCardMessageMediaCardMessageDto */
@JsonPropertyOrder({
  MediaCardMessageMediaCardMessageDto.JSON_PROPERTY_URL,
  MediaCardMessageMediaCardMessageDto.JSON_PROPERTY_CAPTION
})
@JsonFilter("uninitializedFilter")
@JsonInclude(value = JsonInclude.Include.CUSTOM)
public class MediaCardMessageMediaCardMessageDto {
  public static final String JSON_PROPERTY_URL = "url";
  private String url;
  private boolean urlDefined = false;

  public static final String JSON_PROPERTY_CAPTION = "caption";
  private String caption;
  private boolean captionDefined = false;

  public MediaCardMessageMediaCardMessageDto() {}

  public MediaCardMessageMediaCardMessageDto url(String url) {
    this.url = url;
    this.urlDefined = true;
    return this;
  }

  /**
   * Url to the media file.
   *
   * @return url
   */
  @JsonProperty(JSON_PROPERTY_URL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getUrl() {
    return url;
  }

  @JsonIgnore
  public boolean getUrlDefined() {
    return urlDefined;
  }

  @JsonProperty(JSON_PROPERTY_URL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUrl(String url) {
    this.url = url;
    this.urlDefined = true;
  }

  public MediaCardMessageMediaCardMessageDto caption(String caption) {
    this.caption = caption;
    this.captionDefined = true;
    return this;
  }

  /**
   * Caption for the media on supported channels.
   *
   * @return caption
   */
  @JsonProperty(JSON_PROPERTY_CAPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getCaption() {
    return caption;
  }

  @JsonIgnore
  public boolean getCaptionDefined() {
    return captionDefined;
  }

  @JsonProperty(JSON_PROPERTY_CAPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCaption(String caption) {
    this.caption = caption;
    this.captionDefined = true;
  }

  /** Return true if this MediaCardMessage_media_card_message object is equal to o. */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MediaCardMessageMediaCardMessageDto mediaCardMessageMediaCardMessage =
        (MediaCardMessageMediaCardMessageDto) o;
    return Objects.equals(this.url, mediaCardMessageMediaCardMessage.url)
        && Objects.equals(this.caption, mediaCardMessageMediaCardMessage.caption);
  }

  @Override
  public int hashCode() {
    return Objects.hash(url, caption);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MediaCardMessageMediaCardMessageDto {\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    caption: ").append(toIndentedString(caption)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
