/*
 * Conversation API | Sinch
 *
 * OpenAPI document version: 1.0
 * Contact: support@sinch.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

package com.sinch.sdk.domains.conversation.models.v1.messages.types.channelspecific.whatsapp.payment;

import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.sinch.sdk.core.utils.EnumDynamic;
import com.sinch.sdk.core.utils.EnumSupportDynamic;
import java.util.Arrays;
import java.util.stream.Stream;

/** The payment order details content. */
@JsonDeserialize(builder = OrderDetailsPaymentImpl.Builder.class)
public interface OrderDetailsPayment {

  /** The country/currency associated with the payment message. */
  public class TypeEnum extends EnumDynamic<String, TypeEnum> {
    public static final TypeEnum BR = new TypeEnum("br");
    public static final TypeEnum SG = new TypeEnum("sg");

    private static final EnumSupportDynamic<String, TypeEnum> ENUM_SUPPORT =
        new EnumSupportDynamic<>(TypeEnum.class, TypeEnum::new, Arrays.asList(BR, SG));

    private TypeEnum(String value) {
      super(value);
    }

    public static Stream<TypeEnum> values() {
      return ENUM_SUPPORT.values();
    }

    public static TypeEnum from(String value) {
      return ENUM_SUPPORT.from(value);
    }

    public static String valueOf(TypeEnum e) {
      return ENUM_SUPPORT.valueOf(e);
    }
  }

  /**
   * The country/currency associated with the payment message.
   *
   * @return type
   */
  TypeEnum getType();

  /**
   * Unique reference ID.
   *
   * @return referenceId
   */
  String getReferenceId();

  /** The type of good associated with this order. */
  public class TypeOfGoodsEnum extends EnumDynamic<String, TypeOfGoodsEnum> {
    public static final TypeOfGoodsEnum DIGITAL_GOODS = new TypeOfGoodsEnum("digital-goods");
    public static final TypeOfGoodsEnum PHYSICAL_GOODS = new TypeOfGoodsEnum("physical-goods");

    private static final EnumSupportDynamic<String, TypeOfGoodsEnum> ENUM_SUPPORT =
        new EnumSupportDynamic<>(
            TypeOfGoodsEnum.class,
            TypeOfGoodsEnum::new,
            Arrays.asList(DIGITAL_GOODS, PHYSICAL_GOODS));

    private TypeOfGoodsEnum(String value) {
      super(value);
    }

    public static Stream<TypeOfGoodsEnum> values() {
      return ENUM_SUPPORT.values();
    }

    public static TypeOfGoodsEnum from(String value) {
      return ENUM_SUPPORT.from(value);
    }

    public static String valueOf(TypeOfGoodsEnum e) {
      return ENUM_SUPPORT.valueOf(e);
    }
  }

  /**
   * The type of good associated with this order.
   *
   * @return typeOfGoods
   */
  TypeOfGoodsEnum getTypeOfGoods();

  /**
   * Get paymentSettings
   *
   * @return paymentSettings
   */
  OrderDetailsPaymentSettings getPaymentSettings();

  /**
   * Integer representing the total amount of the transaction.
   *
   * @return totalAmountValue
   */
  Integer getTotalAmountValue();

  /**
   * Get order
   *
   * @return order
   */
  OrderDetailsPaymentOrder getOrder();

  /**
   * Getting builder
   *
   * @return New Builder instance
   */
  static Builder builder() {
    return new OrderDetailsPaymentImpl.Builder();
  }

  /** Dedicated Builder */
  interface Builder {

    /**
     * see getter
     *
     * @param type see getter
     * @return Current builder
     * @see #getType
     */
    Builder setType(TypeEnum type);

    /**
     * see getter
     *
     * @param referenceId see getter
     * @return Current builder
     * @see #getReferenceId
     */
    Builder setReferenceId(String referenceId);

    /**
     * see getter
     *
     * @param typeOfGoods see getter
     * @return Current builder
     * @see #getTypeOfGoods
     */
    Builder setTypeOfGoods(TypeOfGoodsEnum typeOfGoods);

    /**
     * see getter
     *
     * @param paymentSettings see getter
     * @return Current builder
     * @see #getPaymentSettings
     */
    Builder setPaymentSettings(OrderDetailsPaymentSettings paymentSettings);

    /**
     * see getter
     *
     * @param totalAmountValue see getter
     * @return Current builder
     * @see #getTotalAmountValue
     */
    Builder setTotalAmountValue(Integer totalAmountValue);

    /**
     * see getter
     *
     * @param order see getter
     * @return Current builder
     * @see #getOrder
     */
    Builder setOrder(OrderDetailsPaymentOrder order);

    /**
     * Create instance
     *
     * @return The instance build with current builder values
     */
    OrderDetailsPayment build();
  }
}
