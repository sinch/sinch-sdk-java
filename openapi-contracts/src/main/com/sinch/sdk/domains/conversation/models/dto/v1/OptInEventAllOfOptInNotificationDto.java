/*
 * Conversation API | Sinch
 * Send and receive messages globally over SMS, RCS, WhatsApp, Viber Business, Facebook messenger and other popular channels using the Sinch Conversation API.  The Conversation API endpoint uses built-in transcoding to give you the power of conversation across all supported channels and, if required, full control over channel specific features.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@sinch.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.sinch.sdk.domains.conversation.models.dto.v1;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFilter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Objects;

/** OptInEventAllOfOptInNotificationDto */
@JsonPropertyOrder({
  OptInEventAllOfOptInNotificationDto.JSON_PROPERTY_REQUEST_ID,
  OptInEventAllOfOptInNotificationDto.JSON_PROPERTY_CONTACT_ID,
  OptInEventAllOfOptInNotificationDto.JSON_PROPERTY_CHANNEL,
  OptInEventAllOfOptInNotificationDto.JSON_PROPERTY_IDENTITY,
  OptInEventAllOfOptInNotificationDto.JSON_PROPERTY_STATUS,
  OptInEventAllOfOptInNotificationDto.JSON_PROPERTY_ERROR_DETAILS,
  OptInEventAllOfOptInNotificationDto.JSON_PROPERTY_PROCESSING_MODE
})
@JsonFilter("uninitializedFilter")
@JsonInclude(value = JsonInclude.Include.CUSTOM)
public class OptInEventAllOfOptInNotificationDto {
  public static final String JSON_PROPERTY_REQUEST_ID = "request_id";
  private String requestId;
  private boolean requestIdDefined = false;

  public static final String JSON_PROPERTY_CONTACT_ID = "contact_id";
  private String contactId;
  private boolean contactIdDefined = false;

  public static final String JSON_PROPERTY_CHANNEL = "channel";
  private ConversationChannelDto channel;
  private boolean channelDefined = false;

  public static final String JSON_PROPERTY_IDENTITY = "identity";
  private String identity;
  private boolean identityDefined = false;

  /** Status of the opt-in registration. */
  public enum StatusEnum {
    SUCCEEDED("OPT_IN_SUCCEEDED"),

    FAILED("OPT_IN_FAILED"),

    STATUS_UNSPECIFIED("OPT_IN_STATUS_UNSPECIFIED"),

    UNKNOWN_DEFAULT_OPEN_API("unknown_default_open_api");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return UNKNOWN_DEFAULT_OPEN_API;
    }
  }

  public static final String JSON_PROPERTY_STATUS = "status";
  private String status;
  private boolean statusDefined = false;

  public static final String JSON_PROPERTY_ERROR_DETAILS = "error_details";
  private OptInEventAllOfOptInNotificationErrorDetailsDto errorDetails;
  private boolean errorDetailsDefined = false;

  public static final String JSON_PROPERTY_PROCESSING_MODE = "processing_mode";
  private ProcessingModeDto processingMode;
  private boolean processingModeDefined = false;

  public OptInEventAllOfOptInNotificationDto() {}

  public OptInEventAllOfOptInNotificationDto requestId(String requestId) {
    this.requestId = requestId;
    this.requestIdDefined = true;
    return this;
  }

  /**
   * ID generated when making an opt-in registration request. Can be used to detect duplicates.
   *
   * @return requestId
   */
  @JsonProperty(JSON_PROPERTY_REQUEST_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getRequestId() {
    return requestId;
  }

  @JsonIgnore
  public boolean getRequestIdDefined() {
    return requestIdDefined;
  }

  @JsonProperty(JSON_PROPERTY_REQUEST_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRequestId(String requestId) {
    this.requestId = requestId;
    this.requestIdDefined = true;
  }

  public OptInEventAllOfOptInNotificationDto contactId(String contactId) {
    this.contactId = contactId;
    this.contactIdDefined = true;
    return this;
  }

  /**
   * The ID of the contact which is the subject of the opt-in. Will be empty if processing_mode is
   * DISPATCH.
   *
   * @return contactId
   */
  @JsonProperty(JSON_PROPERTY_CONTACT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getContactId() {
    return contactId;
  }

  @JsonIgnore
  public boolean getContactIdDefined() {
    return contactIdDefined;
  }

  @JsonProperty(JSON_PROPERTY_CONTACT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setContactId(String contactId) {
    this.contactId = contactId;
    this.contactIdDefined = true;
  }

  public OptInEventAllOfOptInNotificationDto channel(ConversationChannelDto channel) {
    this.channel = channel;
    this.channelDefined = true;
    return this;
  }

  /**
   * Get channel
   *
   * @return channel
   */
  @JsonProperty(JSON_PROPERTY_CHANNEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public ConversationChannelDto getChannel() {
    return channel;
  }

  @JsonIgnore
  public boolean getChannelDefined() {
    return channelDefined;
  }

  @JsonProperty(JSON_PROPERTY_CHANNEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setChannel(ConversationChannelDto channel) {
    this.channel = channel;
    this.channelDefined = true;
  }

  public OptInEventAllOfOptInNotificationDto identity(String identity) {
    this.identity = identity;
    this.identityDefined = true;
    return this;
  }

  /**
   * The channel identity. For example, a phone number for SMS, WhatsApp and Viber Business.
   *
   * @return identity
   */
  @JsonProperty(JSON_PROPERTY_IDENTITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getIdentity() {
    return identity;
  }

  @JsonIgnore
  public boolean getIdentityDefined() {
    return identityDefined;
  }

  @JsonProperty(JSON_PROPERTY_IDENTITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIdentity(String identity) {
    this.identity = identity;
    this.identityDefined = true;
  }

  public OptInEventAllOfOptInNotificationDto status(String status) {
    this.status = status;
    this.statusDefined = true;
    return this;
  }

  /**
   * Status of the opt-in registration.
   *
   * @return status
   */
  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getStatus() {
    return status;
  }

  @JsonIgnore
  public boolean getStatusDefined() {
    return statusDefined;
  }

  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStatus(String status) {
    this.status = status;
    this.statusDefined = true;
  }

  public OptInEventAllOfOptInNotificationDto errorDetails(
      OptInEventAllOfOptInNotificationErrorDetailsDto errorDetails) {
    this.errorDetails = errorDetails;
    this.errorDetailsDefined = true;
    return this;
  }

  /**
   * Get errorDetails
   *
   * @return errorDetails
   */
  @JsonProperty(JSON_PROPERTY_ERROR_DETAILS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public OptInEventAllOfOptInNotificationErrorDetailsDto getErrorDetails() {
    return errorDetails;
  }

  @JsonIgnore
  public boolean getErrorDetailsDefined() {
    return errorDetailsDefined;
  }

  @JsonProperty(JSON_PROPERTY_ERROR_DETAILS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setErrorDetails(OptInEventAllOfOptInNotificationErrorDetailsDto errorDetails) {
    this.errorDetails = errorDetails;
    this.errorDetailsDefined = true;
  }

  public OptInEventAllOfOptInNotificationDto processingMode(ProcessingModeDto processingMode) {
    this.processingMode = processingMode;
    this.processingModeDefined = true;
    return this;
  }

  /**
   * Get processingMode
   *
   * @return processingMode
   */
  @JsonProperty(JSON_PROPERTY_PROCESSING_MODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public ProcessingModeDto getProcessingMode() {
    return processingMode;
  }

  @JsonIgnore
  public boolean getProcessingModeDefined() {
    return processingModeDefined;
  }

  @JsonProperty(JSON_PROPERTY_PROCESSING_MODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProcessingMode(ProcessingModeDto processingMode) {
    this.processingMode = processingMode;
    this.processingModeDefined = true;
  }

  /** Return true if this OptInEvent_allOf_opt_in_notification object is equal to o. */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OptInEventAllOfOptInNotificationDto optInEventAllOfOptInNotification =
        (OptInEventAllOfOptInNotificationDto) o;
    return Objects.equals(this.requestId, optInEventAllOfOptInNotification.requestId)
        && Objects.equals(this.contactId, optInEventAllOfOptInNotification.contactId)
        && Objects.equals(this.channel, optInEventAllOfOptInNotification.channel)
        && Objects.equals(this.identity, optInEventAllOfOptInNotification.identity)
        && Objects.equals(this.status, optInEventAllOfOptInNotification.status)
        && Objects.equals(this.errorDetails, optInEventAllOfOptInNotification.errorDetails)
        && Objects.equals(this.processingMode, optInEventAllOfOptInNotification.processingMode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(
        requestId, contactId, channel, identity, status, errorDetails, processingMode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OptInEventAllOfOptInNotificationDto {\n");
    sb.append("    requestId: ").append(toIndentedString(requestId)).append("\n");
    sb.append("    contactId: ").append(toIndentedString(contactId)).append("\n");
    sb.append("    channel: ").append(toIndentedString(channel)).append("\n");
    sb.append("    identity: ").append(toIndentedString(identity)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    errorDetails: ").append(toIndentedString(errorDetails)).append("\n");
    sb.append("    processingMode: ").append(toIndentedString(processingMode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
