/*
 * Conversation API | Sinch
 * Send and receive messages globally over SMS, RCS, WhatsApp, Viber Business, Facebook messenger and other popular channels using the Sinch Conversation API.  The Conversation API endpoint uses built-in transcoding to give you the power of conversation across all supported channels and, if required, full control over channel specific features.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@sinch.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.sinch.sdk.domains.conversation.models.dto.v1;

import com.fasterxml.jackson.annotation.JsonFilter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import java.util.Objects;

/**
 * The retention policy configured for messages in [Dispatch
 * Mode](../../../../../conversation/processing-modes/). Currently only
 * &#x60;MESSAGE_EXPIRE_POLICY&#x60; is available. For more information about retention policies,
 * see [Retention Policy](/docs/conversation/keyconcepts/#retention-policy).
 */
@JsonPropertyOrder({
  DispatchRetentionPolicyDto.JSON_PROPERTY_RETENTION_TYPE,
  DispatchRetentionPolicyDto.JSON_PROPERTY_TTL_DAYS
})
@JsonFilter("uninitializedFilter")
@JsonInclude(value = JsonInclude.Include.CUSTOM)
public class DispatchRetentionPolicyDto {
  private static final long serialVersionUID = 1L;
  public static final String JSON_PROPERTY_RETENTION_TYPE = "retention_type";
  private DispatchRetentionPolicyTypeDto retentionType;
  private boolean retentionTypeDefined = false;

  public static final String JSON_PROPERTY_TTL_DAYS = "ttl_days";
  private Long ttlDays;
  private boolean ttlDaysDefined = false;

  public DispatchRetentionPolicyDto() {}

  public DispatchRetentionPolicyDto retentionType(DispatchRetentionPolicyTypeDto retentionType) {
    this.retentionType = retentionType;
    this.retentionTypeDefined = true;
    return this;
  }

  /**
   * Get retentionType
   *
   * @return retentionType
   */
  @JsonProperty(JSON_PROPERTY_RETENTION_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public DispatchRetentionPolicyTypeDto getRetentionType() {
    return retentionType;
  }

  @JsonIgnore
  public boolean getRetentionTypeDefined() {
    return retentionTypeDefined;
  }

  @JsonProperty(JSON_PROPERTY_RETENTION_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRetentionType(DispatchRetentionPolicyTypeDto retentionType) {
    this.retentionType = retentionType;
    this.retentionTypeDefined = true;
  }

  public DispatchRetentionPolicyDto ttlDays(Long ttlDays) {
    this.ttlDays = ttlDays;
    this.ttlDaysDefined = true;
    return this;
  }

  /**
   * Optional. The days before a message is eligible for deletion. The valid range is &#x60;[0 -
   * 7]&#x60;. In the case of a &#x60;0&#x60; day TTL, messages aren&#39;t stored at all. Note the
   * retention cleanup job runs once every twenty-four hours, so messages are not deleted on the
   * minute they become eligible for deletion.
   *
   * @return ttlDays
   */
  @JsonProperty(JSON_PROPERTY_TTL_DAYS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Long getTtlDays() {
    return ttlDays;
  }

  @JsonIgnore
  public boolean getTtlDaysDefined() {
    return ttlDaysDefined;
  }

  @JsonProperty(JSON_PROPERTY_TTL_DAYS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTtlDays(Long ttlDays) {
    this.ttlDays = ttlDays;
    this.ttlDaysDefined = true;
  }

  /** Return true if this DispatchRetentionPolicy object is equal to o. */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DispatchRetentionPolicyDto dispatchRetentionPolicy = (DispatchRetentionPolicyDto) o;
    return Objects.equals(this.retentionType, dispatchRetentionPolicy.retentionType)
        && Objects.equals(this.ttlDays, dispatchRetentionPolicy.ttlDays);
  }

  @Override
  public int hashCode() {
    return Objects.hash(retentionType, ttlDays);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DispatchRetentionPolicyDto {\n");
    sb.append("    retentionType: ").append(toIndentedString(retentionType)).append("\n");
    sb.append("    ttlDays: ").append(toIndentedString(ttlDays)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
