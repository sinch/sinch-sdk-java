/*
 * Conversation API | Sinch
 * Send and receive messages globally over SMS, RCS, WhatsApp, Viber Business, Facebook messenger and other popular channels using the Sinch Conversation API.  The Conversation API endpoint uses built-in transcoding to give you the power of conversation across all supported channels and, if required, full control over channel specific features.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@sinch.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.sinch.sdk.domains.conversation.models.dto.v1;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFilter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Objects;

/**
 * Object which contains information of a comment made by an user outside of the main conversation
 * context. Currently only supported on Instagram channel, see Instagram Private Replies for more
 * details
 */
@JsonPropertyOrder({
  CommentEventDto.JSON_PROPERTY_ID,
  CommentEventDto.JSON_PROPERTY_TEXT,
  CommentEventDto.JSON_PROPERTY_COMMENT_TYPE,
  CommentEventDto.JSON_PROPERTY_COMMENTED_ON,
  CommentEventDto.JSON_PROPERTY_USER
})
@JsonFilter("uninitializedFilter")
@JsonInclude(value = JsonInclude.Include.CUSTOM)
public class CommentEventDto {
  public static final String JSON_PROPERTY_ID = "id";
  private String id;
  private boolean idDefined = false;

  public static final String JSON_PROPERTY_TEXT = "text";
  private String text;
  private boolean textDefined = false;

  /** Either LIVE or FEED. Indicates the type of media on which the comment was made. */
  public enum CommentTypeEnum {
    FEED("FEED"),

    LIVE("LIVE"),

    UNKNOWN_DEFAULT_OPEN_API("unknown_default_open_api");

    private String value;

    CommentTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static CommentTypeEnum fromValue(String value) {
      for (CommentTypeEnum b : CommentTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return UNKNOWN_DEFAULT_OPEN_API;
    }
  }

  public static final String JSON_PROPERTY_COMMENT_TYPE = "comment_type";
  private String commentType;
  private boolean commentTypeDefined = false;

  public static final String JSON_PROPERTY_COMMENTED_ON = "commented_on";
  private String commentedOn;
  private boolean commentedOnDefined = false;

  public static final String JSON_PROPERTY_USER = "user";
  private String user;
  private boolean userDefined = false;

  public CommentEventDto() {}

  public CommentEventDto id(String id) {
    this.id = id;
    this.idDefined = true;
    return this;
  }

  /**
   * Event&#39;s ID
   *
   * @return id
   */
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getId() {
    return id;
  }

  @JsonIgnore
  public boolean getIdDefined() {
    return idDefined;
  }

  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(String id) {
    this.id = id;
    this.idDefined = true;
  }

  public CommentEventDto text(String text) {
    this.text = text;
    this.textDefined = true;
    return this;
  }

  /**
   * Comment&#39;s text
   *
   * @return text
   */
  @JsonProperty(JSON_PROPERTY_TEXT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getText() {
    return text;
  }

  @JsonIgnore
  public boolean getTextDefined() {
    return textDefined;
  }

  @JsonProperty(JSON_PROPERTY_TEXT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setText(String text) {
    this.text = text;
    this.textDefined = true;
  }

  public CommentEventDto commentType(String commentType) {
    this.commentType = commentType;
    this.commentTypeDefined = true;
    return this;
  }

  /**
   * Either LIVE or FEED. Indicates the type of media on which the comment was made.
   *
   * @return commentType
   */
  @JsonProperty(JSON_PROPERTY_COMMENT_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getCommentType() {
    return commentType;
  }

  @JsonIgnore
  public boolean getCommentTypeDefined() {
    return commentTypeDefined;
  }

  @JsonProperty(JSON_PROPERTY_COMMENT_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCommentType(String commentType) {
    this.commentType = commentType;
    this.commentTypeDefined = true;
  }

  public CommentEventDto commentedOn(String commentedOn) {
    this.commentedOn = commentedOn;
    this.commentedOnDefined = true;
    return this;
  }

  /**
   * Instagram&#39;s URL of the live broadcast or the post on which the comment was made
   * (permalink).
   *
   * @return commentedOn
   */
  @JsonProperty(JSON_PROPERTY_COMMENTED_ON)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getCommentedOn() {
    return commentedOn;
  }

  @JsonIgnore
  public boolean getCommentedOnDefined() {
    return commentedOnDefined;
  }

  @JsonProperty(JSON_PROPERTY_COMMENTED_ON)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCommentedOn(String commentedOn) {
    this.commentedOn = commentedOn;
    this.commentedOnDefined = true;
  }

  public CommentEventDto user(String user) {
    this.user = user;
    this.userDefined = true;
    return this;
  }

  /**
   * Username of the account that commented in the live broadcast or post.
   *
   * @return user
   */
  @JsonProperty(JSON_PROPERTY_USER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getUser() {
    return user;
  }

  @JsonIgnore
  public boolean getUserDefined() {
    return userDefined;
  }

  @JsonProperty(JSON_PROPERTY_USER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUser(String user) {
    this.user = user;
    this.userDefined = true;
  }

  /** Return true if this CommentEvent object is equal to o. */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CommentEventDto commentEvent = (CommentEventDto) o;
    return Objects.equals(this.id, commentEvent.id)
        && Objects.equals(this.text, commentEvent.text)
        && Objects.equals(this.commentType, commentEvent.commentType)
        && Objects.equals(this.commentedOn, commentEvent.commentedOn)
        && Objects.equals(this.user, commentEvent.user);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, text, commentType, commentedOn, user);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CommentEventDto {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    commentType: ").append(toIndentedString(commentType)).append("\n");
    sb.append("    commentedOn: ").append(toIndentedString(commentedOn)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
