/*
 * Conversation API | Sinch
 *
 * OpenAPI document version: 1.0
 * Contact: support@sinch.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

package com.sinch.sdk.domains.conversation.models.v1.webhooks.events.inbound;

import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.sinch.sdk.core.utils.EnumDynamic;
import com.sinch.sdk.core.utils.EnumSupportDynamic;
import com.sinch.sdk.domains.conversation.models.v1.ChannelIdentity;
import com.sinch.sdk.domains.conversation.models.v1.ProcessingMode;
import com.sinch.sdk.domains.conversation.models.v1.events.ContactEvent;
import com.sinch.sdk.domains.conversation.models.v1.events.ContactMessageEvent;
import java.time.Instant;
import java.util.Arrays;
import java.util.stream.Stream;

/** Event */
@JsonDeserialize(builder = EventImpl.Builder.class)
public interface Event {

  /**
   * The event ID.
   *
   * @return id
   */
  String getId();

  /** The direction of the event. It's always TO_APP for contact events. */
  public class DirectionEnum extends EnumDynamic<String, DirectionEnum> {
    public static final DirectionEnum TO_APP = new DirectionEnum("TO_APP");

    private static final EnumSupportDynamic<String, DirectionEnum> ENUM_SUPPORT =
        new EnumSupportDynamic<>(DirectionEnum.class, DirectionEnum::new, Arrays.asList(TO_APP));

    private DirectionEnum(String value) {
      super(value);
    }

    public static Stream<DirectionEnum> values() {
      return ENUM_SUPPORT.values();
    }

    public static DirectionEnum from(String value) {
      return ENUM_SUPPORT.from(value);
    }

    public static String valueOf(DirectionEnum e) {
      return ENUM_SUPPORT.valueOf(e);
    }
  }

  /**
   * The direction of the event. It's always TO_APP for contact events.
   *
   * @return direction
   */
  DirectionEnum getDirection();

  /**
   * Get contactEvent
   *
   * @return contactEvent
   */
  ContactEvent getContactEvent();

  /**
   * Get contactMessageEvent
   *
   * @return contactMessageEvent
   */
  ContactMessageEvent getContactMessageEvent();

  /**
   * Get channelIdentity
   *
   * @return channelIdentity
   */
  ChannelIdentity getChannelIdentity();

  /**
   * The ID of the contact. Will be empty if processing_mode is DISPATCH.
   *
   * @return contactId
   */
  String getContactId();

  /**
   * The ID of the conversation this event is part of. Will be empty if processing_mode is DISPATCH.
   *
   * @return conversationId
   */
  String getConversationId();

  /**
   * Timestamp marking when the channel callback was received by the Conversation API.
   *
   * @return acceptTime
   */
  Instant getAcceptTime();

  /**
   * Get processingMode
   *
   * @return processingMode
   */
  ProcessingMode getProcessingMode();

  /**
   * Getting builder
   *
   * @return New Builder instance
   */
  static Builder builder() {
    return new EventImpl.Builder();
  }

  /** Dedicated Builder */
  interface Builder {

    /**
     * see getter
     *
     * @param id see getter
     * @return Current builder
     * @see #getId
     */
    Builder setId(String id);

    /**
     * see getter
     *
     * @param direction see getter
     * @return Current builder
     * @see #getDirection
     */
    Builder setDirection(DirectionEnum direction);

    /**
     * see getter
     *
     * @param contactEvent see getter
     * @return Current builder
     * @see #getContactEvent
     */
    Builder setContactEvent(ContactEvent contactEvent);

    /**
     * see getter
     *
     * @param contactMessageEvent see getter
     * @return Current builder
     * @see #getContactMessageEvent
     */
    Builder setContactMessageEvent(ContactMessageEvent contactMessageEvent);

    /**
     * see getter
     *
     * @param channelIdentity see getter
     * @return Current builder
     * @see #getChannelIdentity
     */
    Builder setChannelIdentity(ChannelIdentity channelIdentity);

    /**
     * see getter
     *
     * @param contactId see getter
     * @return Current builder
     * @see #getContactId
     */
    Builder setContactId(String contactId);

    /**
     * see getter
     *
     * @param conversationId see getter
     * @return Current builder
     * @see #getConversationId
     */
    Builder setConversationId(String conversationId);

    /**
     * see getter
     *
     * @param acceptTime see getter
     * @return Current builder
     * @see #getAcceptTime
     */
    Builder setAcceptTime(Instant acceptTime);

    /**
     * see getter
     *
     * @param processingMode see getter
     * @return Current builder
     * @see #getProcessingMode
     */
    Builder setProcessingMode(ProcessingMode processingMode);

    /**
     * Create instance
     *
     * @return The instance build with current builder values
     */
    Event build();
  }
}
