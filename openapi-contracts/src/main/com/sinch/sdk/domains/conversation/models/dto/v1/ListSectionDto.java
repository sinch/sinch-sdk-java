/*
 * Conversation API | Sinch
 * Send and receive messages globally over SMS, RCS, WhatsApp, Viber Business, Facebook messenger and other popular channels using the Sinch Conversation API.  The Conversation API endpoint uses built-in transcoding to give you the power of conversation across all supported channels and, if required, full control over channel specific features.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@sinch.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.sinch.sdk.domains.conversation.models.dto.v1;

import com.fasterxml.jackson.annotation.JsonFilter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/** Section for interactive whatsapp messages containing ListItem */
@JsonPropertyOrder({ListSectionDto.JSON_PROPERTY_TITLE, ListSectionDto.JSON_PROPERTY_ITEMS})
@JsonFilter("uninitializedFilter")
@JsonInclude(value = JsonInclude.Include.CUSTOM)
public class ListSectionDto {
  private static final long serialVersionUID = 1L;
  public static final String JSON_PROPERTY_TITLE = "title";
  private String title;
  private boolean titleDefined = false;

  public static final String JSON_PROPERTY_ITEMS = "items";
  private List<ListItemDto> items;
  private boolean itemsDefined = false;

  public ListSectionDto() {}

  public ListSectionDto title(String title) {
    this.title = title;
    this.titleDefined = true;
    return this;
  }

  /**
   * Optional parameter. Title for list section.
   *
   * @return title
   */
  @JsonProperty(JSON_PROPERTY_TITLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getTitle() {
    return title;
  }

  @JsonIgnore
  public boolean getTitleDefined() {
    return titleDefined;
  }

  @JsonProperty(JSON_PROPERTY_TITLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTitle(String title) {
    this.title = title;
    this.titleDefined = true;
  }

  public ListSectionDto items(List<ListItemDto> items) {
    this.items = items;
    this.itemsDefined = true;
    return this;
  }

  public ListSectionDto addItemsItem(ListItemDto itemsItem) {
    if (this.items == null) {
      this.items = new ArrayList<>();
    }
    this.itemsDefined = true;
    this.items.add(itemsItem);
    return this;
  }

  /**
   * Get items
   *
   * @return items
   */
  @JsonProperty(JSON_PROPERTY_ITEMS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<ListItemDto> getItems() {
    return items;
  }

  @JsonIgnore
  public boolean getItemsDefined() {
    return itemsDefined;
  }

  @JsonProperty(JSON_PROPERTY_ITEMS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setItems(List<ListItemDto> items) {
    this.items = items;
    this.itemsDefined = true;
  }

  /** Return true if this ListSection object is equal to o. */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListSectionDto listSection = (ListSectionDto) o;
    return Objects.equals(this.title, listSection.title)
        && Objects.equals(this.items, listSection.items);
  }

  @Override
  public int hashCode() {
    return Objects.hash(title, items);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListSectionDto {\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
