/*
 * Conversation API | Sinch
 * Send and receive messages globally over SMS, RCS, WhatsApp, Viber Business, Facebook messenger and other popular channels using the Sinch Conversation API.  The Conversation API endpoint uses built-in transcoding to give you the power of conversation across all supported channels and, if required, full control over channel specific features.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@sinch.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.sinch.sdk.domains.conversation.adapters.api.v1;

import com.fasterxml.jackson.core.type.TypeReference;
import com.sinch.sdk.core.exceptions.ApiException;
import com.sinch.sdk.core.exceptions.ApiExceptionBuilder;
import com.sinch.sdk.core.http.AuthManager;
import com.sinch.sdk.core.http.HttpClient;
import com.sinch.sdk.core.http.HttpMapper;
import com.sinch.sdk.core.http.HttpMethod;
import com.sinch.sdk.core.http.HttpRequest;
import com.sinch.sdk.core.http.HttpResponse;
import com.sinch.sdk.core.http.HttpStatus;
import com.sinch.sdk.core.http.URLParameter;
import com.sinch.sdk.core.http.URLPathUtils;
import com.sinch.sdk.core.models.ServerConfiguration;
import com.sinch.sdk.domains.conversation.models.dto.v1.ConversationChannelDto;
import com.sinch.sdk.domains.conversation.models.dto.v1.ConversationDto;
import com.sinch.sdk.domains.conversation.models.dto.v1.ConversationMessageInjectedDto;
import com.sinch.sdk.domains.conversation.models.dto.v1.CreateConversationRequestDto;
import com.sinch.sdk.domains.conversation.models.dto.v1.ListConversationsResponseDto;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Logger;

public class ConversationApi {

  private static final Logger LOGGER = Logger.getLogger(ConversationApi.class.getName());
  private HttpClient httpClient;
  private ServerConfiguration serverConfiguration;
  private Map<String, AuthManager> authManagersByOasSecuritySchemes;
  private HttpMapper mapper;

  public ConversationApi(
      HttpClient httpClient,
      ServerConfiguration serverConfiguration,
      Map<String, AuthManager> authManagersByOasSecuritySchemes,
      HttpMapper mapper) {
    this.httpClient = httpClient;
    this.serverConfiguration = serverConfiguration;
    this.authManagersByOasSecuritySchemes = authManagersByOasSecuritySchemes;
    this.mapper = mapper;
  }

  /**
   * Create a conversation Creates a new empty conversation. It is generally not needed to create a
   * conversation explicitly since sending or receiving a message automatically creates a new
   * conversation if it does not already exist between the given app and contact. Creating empty
   * conversation is useful if the metadata of the conversation should be populated when the first
   * message in the conversation is a contact message or the first message in the conversation comes
   * out-of-band and needs to be injected with InjectMessage endpoint.
   *
   * @param projectId The unique ID of the project. You can find this on the [Sinch
   *     Dashboard](https://dashboard.sinch.com/convapi/apps). (required)
   * @param createConversationRequestDto The conversation to create. ID will be generated for the
   *     conversation and any ID in the given conversation will be ignored. (required)
   * @return ConversationDto
   * @throws ApiException if fails to make API call
   */
  public ConversationDto conversationCreateConversation(
      String projectId, CreateConversationRequestDto createConversationRequestDto)
      throws ApiException {

    LOGGER.finest(
        "[conversationCreateConversation]"
            + " "
            + "projectId: "
            + projectId
            + ", "
            + "createConversationRequestDto: "
            + createConversationRequestDto);

    HttpRequest httpRequest =
        conversationCreateConversationRequestBuilder(projectId, createConversationRequestDto);
    HttpResponse response =
        httpClient.invokeAPI(
            this.serverConfiguration, this.authManagersByOasSecuritySchemes, httpRequest);

    if (HttpStatus.isSuccessfulStatus(response.getCode())) {
      TypeReference<ConversationDto> localVarReturnType = new TypeReference<ConversationDto>() {};
      return mapper.deserialize(response, localVarReturnType);
    }
    // fallback to default errors handling:
    // all error cases definition are not required from specs: will try some "hardcoded" content
    // parsing
    throw ApiExceptionBuilder.build(
        response.getMessage(),
        response.getCode(),
        mapper.deserialize(response, new TypeReference<HashMap<String, ?>>() {}));
  }

  private HttpRequest conversationCreateConversationRequestBuilder(
      String projectId, CreateConversationRequestDto createConversationRequestDto)
      throws ApiException {
    // verify the required parameter 'projectId' is set
    if (projectId == null) {
      throw new ApiException(
          400,
          "Missing the required parameter 'projectId' when calling conversationCreateConversation");
    }
    // verify the required parameter 'createConversationRequestDto' is set
    if (createConversationRequestDto == null) {
      throw new ApiException(
          400,
          "Missing the required parameter 'createConversationRequestDto' when calling"
              + " conversationCreateConversation");
    }

    String localVarPath =
        "/v1/projects/{project_id}/conversations"
            .replaceAll(
                "\\{" + "project_id" + "\\}", URLPathUtils.encodePathSegment(projectId.toString()));

    List<URLParameter> localVarQueryParams = new ArrayList<>();

    Map<String, String> localVarHeaderParams = new HashMap<>();

    final Collection<String> localVarAccepts = Arrays.asList("application/json");

    final Collection<String> localVarContentTypes = Arrays.asList("application/json");

    final Collection<String> localVarAuthNames = Arrays.asList("Basic", "oAuth2");
    final String serializedBody =
        mapper.serialize(localVarContentTypes, createConversationRequestDto);

    return new HttpRequest(
        localVarPath,
        HttpMethod.POST,
        localVarQueryParams,
        serializedBody,
        localVarHeaderParams,
        localVarAccepts,
        localVarContentTypes,
        localVarAuthNames);
  }

  /**
   * Delete a conversation Deletes a conversation together with all the messages sent as part of the
   * conversation.
   *
   * @param projectId The unique ID of the project. You can find this on the [Sinch
   *     Dashboard](https://dashboard.sinch.com/convapi/apps). (required)
   * @param conversationId The unique ID of the conversation. This is generated by the system.
   *     (required)
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object conversationDeleteConversation(String projectId, String conversationId)
      throws ApiException {

    LOGGER.finest(
        "[conversationDeleteConversation]"
            + " "
            + "projectId: "
            + projectId
            + ", "
            + "conversationId: "
            + conversationId);

    HttpRequest httpRequest =
        conversationDeleteConversationRequestBuilder(projectId, conversationId);
    HttpResponse response =
        httpClient.invokeAPI(
            this.serverConfiguration, this.authManagersByOasSecuritySchemes, httpRequest);

    if (HttpStatus.isSuccessfulStatus(response.getCode())) {
      TypeReference<Object> localVarReturnType = new TypeReference<Object>() {};
      return mapper.deserialize(response, localVarReturnType);
    }
    // fallback to default errors handling:
    // all error cases definition are not required from specs: will try some "hardcoded" content
    // parsing
    throw ApiExceptionBuilder.build(
        response.getMessage(),
        response.getCode(),
        mapper.deserialize(response, new TypeReference<HashMap<String, ?>>() {}));
  }

  private HttpRequest conversationDeleteConversationRequestBuilder(
      String projectId, String conversationId) throws ApiException {
    // verify the required parameter 'projectId' is set
    if (projectId == null) {
      throw new ApiException(
          400,
          "Missing the required parameter 'projectId' when calling conversationDeleteConversation");
    }
    // verify the required parameter 'conversationId' is set
    if (conversationId == null) {
      throw new ApiException(
          400,
          "Missing the required parameter 'conversationId' when calling"
              + " conversationDeleteConversation");
    }

    String localVarPath =
        "/v1/projects/{project_id}/conversations/{conversation_id}"
            .replaceAll(
                "\\{" + "project_id" + "\\}", URLPathUtils.encodePathSegment(projectId.toString()))
            .replaceAll(
                "\\{" + "conversation_id" + "\\}",
                URLPathUtils.encodePathSegment(conversationId.toString()));

    List<URLParameter> localVarQueryParams = new ArrayList<>();

    Map<String, String> localVarHeaderParams = new HashMap<>();

    final Collection<String> localVarAccepts = Arrays.asList("application/json");

    final Collection<String> localVarContentTypes = Arrays.asList();

    final Collection<String> localVarAuthNames = Arrays.asList("Basic", "oAuth2");
    final String serializedBody = null;

    return new HttpRequest(
        localVarPath,
        HttpMethod.DELETE,
        localVarQueryParams,
        serializedBody,
        localVarHeaderParams,
        localVarAccepts,
        localVarContentTypes,
        localVarAuthNames);
  }

  /**
   * Get a conversation Retrieves a conversation by id. A conversation has two participating
   * entities, an app and a contact.
   *
   * @param projectId The unique ID of the project. You can find this on the [Sinch
   *     Dashboard](https://dashboard.sinch.com/convapi/apps). (required)
   * @param conversationId The unique ID of the conversation. This is generated by the system.
   *     (required)
   * @return ConversationDto
   * @throws ApiException if fails to make API call
   */
  public ConversationDto conversationGetConversation(String projectId, String conversationId)
      throws ApiException {

    LOGGER.finest(
        "[conversationGetConversation]"
            + " "
            + "projectId: "
            + projectId
            + ", "
            + "conversationId: "
            + conversationId);

    HttpRequest httpRequest = conversationGetConversationRequestBuilder(projectId, conversationId);
    HttpResponse response =
        httpClient.invokeAPI(
            this.serverConfiguration, this.authManagersByOasSecuritySchemes, httpRequest);

    if (HttpStatus.isSuccessfulStatus(response.getCode())) {
      TypeReference<ConversationDto> localVarReturnType = new TypeReference<ConversationDto>() {};
      return mapper.deserialize(response, localVarReturnType);
    }
    // fallback to default errors handling:
    // all error cases definition are not required from specs: will try some "hardcoded" content
    // parsing
    throw ApiExceptionBuilder.build(
        response.getMessage(),
        response.getCode(),
        mapper.deserialize(response, new TypeReference<HashMap<String, ?>>() {}));
  }

  private HttpRequest conversationGetConversationRequestBuilder(
      String projectId, String conversationId) throws ApiException {
    // verify the required parameter 'projectId' is set
    if (projectId == null) {
      throw new ApiException(
          400,
          "Missing the required parameter 'projectId' when calling conversationGetConversation");
    }
    // verify the required parameter 'conversationId' is set
    if (conversationId == null) {
      throw new ApiException(
          400,
          "Missing the required parameter 'conversationId' when calling"
              + " conversationGetConversation");
    }

    String localVarPath =
        "/v1/projects/{project_id}/conversations/{conversation_id}"
            .replaceAll(
                "\\{" + "project_id" + "\\}", URLPathUtils.encodePathSegment(projectId.toString()))
            .replaceAll(
                "\\{" + "conversation_id" + "\\}",
                URLPathUtils.encodePathSegment(conversationId.toString()));

    List<URLParameter> localVarQueryParams = new ArrayList<>();

    Map<String, String> localVarHeaderParams = new HashMap<>();

    final Collection<String> localVarAccepts = Arrays.asList("application/json");

    final Collection<String> localVarContentTypes = Arrays.asList();

    final Collection<String> localVarAuthNames = Arrays.asList("Basic", "oAuth2");
    final String serializedBody = null;

    return new HttpRequest(
        localVarPath,
        HttpMethod.GET,
        localVarQueryParams,
        serializedBody,
        localVarHeaderParams,
        localVarAccepts,
        localVarContentTypes,
        localVarAuthNames);
  }

  /**
   * Inject messages This operation injects a conversation message in to a specific conversation.
   *
   * @param projectId The unique ID of the project. You can find this on the [Sinch
   *     Dashboard](https://dashboard.sinch.com/convapi/apps). (required)
   * @param messageConversationId Required. The ID of the conversation. (required)
   * @param conversationMessageInjectedDto Message to be injected. (required)
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object conversationInjectMessage(
      String projectId,
      String messageConversationId,
      ConversationMessageInjectedDto conversationMessageInjectedDto)
      throws ApiException {

    LOGGER.finest(
        "[conversationInjectMessage]"
            + " "
            + "projectId: "
            + projectId
            + ", "
            + "messageConversationId: "
            + messageConversationId
            + ", "
            + "conversationMessageInjectedDto: "
            + conversationMessageInjectedDto);

    HttpRequest httpRequest =
        conversationInjectMessageRequestBuilder(
            projectId, messageConversationId, conversationMessageInjectedDto);
    HttpResponse response =
        httpClient.invokeAPI(
            this.serverConfiguration, this.authManagersByOasSecuritySchemes, httpRequest);

    if (HttpStatus.isSuccessfulStatus(response.getCode())) {
      TypeReference<Object> localVarReturnType = new TypeReference<Object>() {};
      return mapper.deserialize(response, localVarReturnType);
    }
    // fallback to default errors handling:
    // all error cases definition are not required from specs: will try some "hardcoded" content
    // parsing
    throw ApiExceptionBuilder.build(
        response.getMessage(),
        response.getCode(),
        mapper.deserialize(response, new TypeReference<HashMap<String, ?>>() {}));
  }

  private HttpRequest conversationInjectMessageRequestBuilder(
      String projectId,
      String messageConversationId,
      ConversationMessageInjectedDto conversationMessageInjectedDto)
      throws ApiException {
    // verify the required parameter 'projectId' is set
    if (projectId == null) {
      throw new ApiException(
          400, "Missing the required parameter 'projectId' when calling conversationInjectMessage");
    }
    // verify the required parameter 'messageConversationId' is set
    if (messageConversationId == null) {
      throw new ApiException(
          400,
          "Missing the required parameter 'messageConversationId' when calling"
              + " conversationInjectMessage");
    }
    // verify the required parameter 'conversationMessageInjectedDto' is set
    if (conversationMessageInjectedDto == null) {
      throw new ApiException(
          400,
          "Missing the required parameter 'conversationMessageInjectedDto' when calling"
              + " conversationInjectMessage");
    }

    String localVarPath =
        "/v1/projects/{project_id}/conversations/{message.conversation_id}:inject-message"
            .replaceAll(
                "\\{" + "project_id" + "\\}", URLPathUtils.encodePathSegment(projectId.toString()))
            .replaceAll(
                "\\{" + "message.conversation_id" + "\\}",
                URLPathUtils.encodePathSegment(messageConversationId.toString()));

    List<URLParameter> localVarQueryParams = new ArrayList<>();

    Map<String, String> localVarHeaderParams = new HashMap<>();

    final Collection<String> localVarAccepts = Arrays.asList("application/json");

    final Collection<String> localVarContentTypes = Arrays.asList("application/json");

    final Collection<String> localVarAuthNames = Arrays.asList("Basic", "oAuth2");
    final String serializedBody =
        mapper.serialize(localVarContentTypes, conversationMessageInjectedDto);

    return new HttpRequest(
        localVarPath,
        HttpMethod.POST,
        localVarQueryParams,
        serializedBody,
        localVarHeaderParams,
        localVarAccepts,
        localVarContentTypes,
        localVarAuthNames);
  }

  /**
   * List conversations This operation lists all conversations that are associated with an app
   * and/or a contact.
   *
   * @param projectId The unique ID of the project. You can find this on the [Sinch
   *     Dashboard](https://dashboard.sinch.com/convapi/apps). (required)
   * @param onlyActive Required. True if only active conversations should be listed. (required)
   * @param appId The ID of the app involved in the conversations. (optional)
   * @param contactId Resource name (ID) of the contact. (optional)
   * @param pageSize The maximum number of conversations to fetch. Defaults to 10 and the maximum is
   *     20. (optional)
   * @param pageToken Next page token previously returned if any. (optional)
   * @param activeChannel Only fetch conversations from the &#x60;active_channel&#x60; (optional)
   * @return ListConversationsResponseDto
   * @throws ApiException if fails to make API call
   */
  public ListConversationsResponseDto conversationListConversations(
      String projectId,
      Boolean onlyActive,
      String appId,
      String contactId,
      Integer pageSize,
      String pageToken,
      ConversationChannelDto activeChannel)
      throws ApiException {

    LOGGER.finest(
        "[conversationListConversations]"
            + " "
            + "projectId: "
            + projectId
            + ", "
            + "onlyActive: "
            + onlyActive
            + ", "
            + "appId: "
            + appId
            + ", "
            + "contactId: "
            + contactId
            + ", "
            + "pageSize: "
            + pageSize
            + ", "
            + "pageToken: "
            + pageToken
            + ", "
            + "activeChannel: "
            + activeChannel);

    HttpRequest httpRequest =
        conversationListConversationsRequestBuilder(
            projectId, onlyActive, appId, contactId, pageSize, pageToken, activeChannel);
    HttpResponse response =
        httpClient.invokeAPI(
            this.serverConfiguration, this.authManagersByOasSecuritySchemes, httpRequest);

    if (HttpStatus.isSuccessfulStatus(response.getCode())) {
      TypeReference<ListConversationsResponseDto> localVarReturnType =
          new TypeReference<ListConversationsResponseDto>() {};
      return mapper.deserialize(response, localVarReturnType);
    }
    // fallback to default errors handling:
    // all error cases definition are not required from specs: will try some "hardcoded" content
    // parsing
    throw ApiExceptionBuilder.build(
        response.getMessage(),
        response.getCode(),
        mapper.deserialize(response, new TypeReference<HashMap<String, ?>>() {}));
  }

  private HttpRequest conversationListConversationsRequestBuilder(
      String projectId,
      Boolean onlyActive,
      String appId,
      String contactId,
      Integer pageSize,
      String pageToken,
      ConversationChannelDto activeChannel)
      throws ApiException {
    // verify the required parameter 'projectId' is set
    if (projectId == null) {
      throw new ApiException(
          400,
          "Missing the required parameter 'projectId' when calling conversationListConversations");
    }
    // verify the required parameter 'onlyActive' is set
    if (onlyActive == null) {
      throw new ApiException(
          400,
          "Missing the required parameter 'onlyActive' when calling conversationListConversations");
    }

    String localVarPath =
        "/v1/projects/{project_id}/conversations"
            .replaceAll(
                "\\{" + "project_id" + "\\}", URLPathUtils.encodePathSegment(projectId.toString()));

    List<URLParameter> localVarQueryParams = new ArrayList<>();
    if (null != appId) {
      localVarQueryParams.add(
          new URLParameter(
              "app_id", appId, URLParameter.STYLE.valueOf("form".toUpperCase()), true));
    }
    if (null != contactId) {
      localVarQueryParams.add(
          new URLParameter(
              "contact_id", contactId, URLParameter.STYLE.valueOf("form".toUpperCase()), true));
    }
    if (null != onlyActive) {
      localVarQueryParams.add(
          new URLParameter(
              "only_active", onlyActive, URLParameter.STYLE.valueOf("form".toUpperCase()), true));
    }
    if (null != pageSize) {
      localVarQueryParams.add(
          new URLParameter(
              "page_size", pageSize, URLParameter.STYLE.valueOf("form".toUpperCase()), true));
    }
    if (null != pageToken) {
      localVarQueryParams.add(
          new URLParameter(
              "page_token", pageToken, URLParameter.STYLE.valueOf("form".toUpperCase()), true));
    }
    if (null != activeChannel) {
      localVarQueryParams.add(
          new URLParameter(
              "active_channel",
              activeChannel,
              URLParameter.STYLE.valueOf("form".toUpperCase()),
              true));
    }

    Map<String, String> localVarHeaderParams = new HashMap<>();

    final Collection<String> localVarAccepts = Arrays.asList("application/json");

    final Collection<String> localVarContentTypes = Arrays.asList();

    final Collection<String> localVarAuthNames = Arrays.asList("Basic", "oAuth2");
    final String serializedBody = null;

    return new HttpRequest(
        localVarPath,
        HttpMethod.GET,
        localVarQueryParams,
        serializedBody,
        localVarHeaderParams,
        localVarAccepts,
        localVarContentTypes,
        localVarAuthNames);
  }

  /**
   * Stop conversation This operation stops the referenced conversation, if the conversation is
   * still active. A new conversation will be created if a new message is exchanged between the app
   * or contact that was part of the stopped conversation.
   *
   * @param projectId The unique ID of the project. You can find this on the [Sinch
   *     Dashboard](https://dashboard.sinch.com/convapi/apps). (required)
   * @param conversationId The unique ID of the conversation. This is generated by the system.
   *     (required)
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object conversationStopActiveConversation(String projectId, String conversationId)
      throws ApiException {

    LOGGER.finest(
        "[conversationStopActiveConversation]"
            + " "
            + "projectId: "
            + projectId
            + ", "
            + "conversationId: "
            + conversationId);

    HttpRequest httpRequest =
        conversationStopActiveConversationRequestBuilder(projectId, conversationId);
    HttpResponse response =
        httpClient.invokeAPI(
            this.serverConfiguration, this.authManagersByOasSecuritySchemes, httpRequest);

    if (HttpStatus.isSuccessfulStatus(response.getCode())) {
      TypeReference<Object> localVarReturnType = new TypeReference<Object>() {};
      return mapper.deserialize(response, localVarReturnType);
    }
    // fallback to default errors handling:
    // all error cases definition are not required from specs: will try some "hardcoded" content
    // parsing
    throw ApiExceptionBuilder.build(
        response.getMessage(),
        response.getCode(),
        mapper.deserialize(response, new TypeReference<HashMap<String, ?>>() {}));
  }

  private HttpRequest conversationStopActiveConversationRequestBuilder(
      String projectId, String conversationId) throws ApiException {
    // verify the required parameter 'projectId' is set
    if (projectId == null) {
      throw new ApiException(
          400,
          "Missing the required parameter 'projectId' when calling"
              + " conversationStopActiveConversation");
    }
    // verify the required parameter 'conversationId' is set
    if (conversationId == null) {
      throw new ApiException(
          400,
          "Missing the required parameter 'conversationId' when calling"
              + " conversationStopActiveConversation");
    }

    String localVarPath =
        "/v1/projects/{project_id}/conversations/{conversation_id}:stop"
            .replaceAll(
                "\\{" + "project_id" + "\\}", URLPathUtils.encodePathSegment(projectId.toString()))
            .replaceAll(
                "\\{" + "conversation_id" + "\\}",
                URLPathUtils.encodePathSegment(conversationId.toString()));

    List<URLParameter> localVarQueryParams = new ArrayList<>();

    Map<String, String> localVarHeaderParams = new HashMap<>();

    final Collection<String> localVarAccepts = Arrays.asList("application/json");

    final Collection<String> localVarContentTypes = Arrays.asList();

    final Collection<String> localVarAuthNames = Arrays.asList("Basic", "oAuth2");
    final String serializedBody = null;

    return new HttpRequest(
        localVarPath,
        HttpMethod.POST,
        localVarQueryParams,
        serializedBody,
        localVarHeaderParams,
        localVarAccepts,
        localVarContentTypes,
        localVarAuthNames);
  }

  /**
   * Update a conversation This operation updates a conversation which can, for instance, be used to
   * update the metadata associated with a conversation.
   *
   * @param projectId The unique ID of the project. You can find this on the [Sinch
   *     Dashboard](https://dashboard.sinch.com/convapi/apps). (required)
   * @param conversationId The unique ID of the conversation. This is generated by the system.
   *     (required)
   * @param conversationDto The updated conversation. (required)
   * @param updateMask The set of field mask paths. (optional
   * @param metadataUpdateStrategy Update strategy for the &#x60;conversation_metadata&#x60; field.
   *     (optional, default to REPLACE)
   * @return ConversationDto
   * @throws ApiException if fails to make API call
   */
  public ConversationDto conversationUpdateConversation(
      String projectId,
      String conversationId,
      ConversationDto conversationDto,
      List<String> updateMask,
      String metadataUpdateStrategy)
      throws ApiException {

    LOGGER.finest(
        "[conversationUpdateConversation]"
            + " "
            + "projectId: "
            + projectId
            + ", "
            + "conversationId: "
            + conversationId
            + ", "
            + "conversationDto: "
            + conversationDto
            + ", "
            + "updateMask: "
            + updateMask
            + ", "
            + "metadataUpdateStrategy: "
            + metadataUpdateStrategy);

    HttpRequest httpRequest =
        conversationUpdateConversationRequestBuilder(
            projectId, conversationId, conversationDto, updateMask, metadataUpdateStrategy);
    HttpResponse response =
        httpClient.invokeAPI(
            this.serverConfiguration, this.authManagersByOasSecuritySchemes, httpRequest);

    if (HttpStatus.isSuccessfulStatus(response.getCode())) {
      TypeReference<ConversationDto> localVarReturnType = new TypeReference<ConversationDto>() {};
      return mapper.deserialize(response, localVarReturnType);
    }
    // fallback to default errors handling:
    // all error cases definition are not required from specs: will try some "hardcoded" content
    // parsing
    throw ApiExceptionBuilder.build(
        response.getMessage(),
        response.getCode(),
        mapper.deserialize(response, new TypeReference<HashMap<String, ?>>() {}));
  }

  private HttpRequest conversationUpdateConversationRequestBuilder(
      String projectId,
      String conversationId,
      ConversationDto conversationDto,
      List<String> updateMask,
      String metadataUpdateStrategy)
      throws ApiException {
    // verify the required parameter 'projectId' is set
    if (projectId == null) {
      throw new ApiException(
          400,
          "Missing the required parameter 'projectId' when calling conversationUpdateConversation");
    }
    // verify the required parameter 'conversationId' is set
    if (conversationId == null) {
      throw new ApiException(
          400,
          "Missing the required parameter 'conversationId' when calling"
              + " conversationUpdateConversation");
    }
    // verify the required parameter 'conversationDto' is set
    if (conversationDto == null) {
      throw new ApiException(
          400,
          "Missing the required parameter 'conversationDto' when calling"
              + " conversationUpdateConversation");
    }

    String localVarPath =
        "/v1/projects/{project_id}/conversations/{conversation_id}"
            .replaceAll(
                "\\{" + "project_id" + "\\}", URLPathUtils.encodePathSegment(projectId.toString()))
            .replaceAll(
                "\\{" + "conversation_id" + "\\}",
                URLPathUtils.encodePathSegment(conversationId.toString()));

    List<URLParameter> localVarQueryParams = new ArrayList<>();
    if (null != updateMask) {
      localVarQueryParams.add(
          new URLParameter(
              "update_mask", updateMask, URLParameter.STYLE.valueOf("form".toUpperCase()), true));
    }
    if (null != metadataUpdateStrategy) {
      localVarQueryParams.add(
          new URLParameter(
              "metadata_update_strategy",
              metadataUpdateStrategy,
              URLParameter.STYLE.valueOf("form".toUpperCase()),
              true));
    }

    Map<String, String> localVarHeaderParams = new HashMap<>();

    final Collection<String> localVarAccepts = Arrays.asList("application/json");

    final Collection<String> localVarContentTypes = Arrays.asList("application/json");

    final Collection<String> localVarAuthNames = Arrays.asList("Basic", "oAuth2");
    final String serializedBody = mapper.serialize(localVarContentTypes, conversationDto);

    return new HttpRequest(
        localVarPath,
        HttpMethod.PATCH,
        localVarQueryParams,
        serializedBody,
        localVarHeaderParams,
        localVarAccepts,
        localVarContentTypes,
        localVarAuthNames);
  }
}
