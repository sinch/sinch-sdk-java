/*
 * Conversation API | Sinch
 * Send and receive messages globally over SMS, RCS, WhatsApp, Viber Business, Facebook messenger and other popular channels using the Sinch Conversation API.  The Conversation API endpoint uses built-in transcoding to give you the power of conversation across all supported channels and, if required, full control over channel specific features.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@sinch.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.sinch.sdk.domains.conversation.models.dto.v1;

import com.fasterxml.jackson.annotation.JsonFilter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import java.util.Objects;

/** ChannelEventAllOfChannelEventNotificationDto */
@JsonPropertyOrder({
  ChannelEventAllOfChannelEventNotificationDto.JSON_PROPERTY_CHANNEL,
  ChannelEventAllOfChannelEventNotificationDto.JSON_PROPERTY_EVENT_TYPE,
  ChannelEventAllOfChannelEventNotificationDto.JSON_PROPERTY_ADDITIONAL_DATA
})
@JsonFilter("uninitializedFilter")
@JsonInclude(value = JsonInclude.Include.CUSTOM)
public class ChannelEventAllOfChannelEventNotificationDto {
  public static final String JSON_PROPERTY_CHANNEL = "channel";
  private ConversationChannelDto channel;
  private boolean channelDefined = false;

  public static final String JSON_PROPERTY_EVENT_TYPE = "event_type";
  private String eventType;
  private boolean eventTypeDefined = false;

  public static final String JSON_PROPERTY_ADDITIONAL_DATA = "additional_data";
  private Object additionalData;
  private boolean additionalDataDefined = false;

  public ChannelEventAllOfChannelEventNotificationDto() {}

  public ChannelEventAllOfChannelEventNotificationDto channel(ConversationChannelDto channel) {
    this.channel = channel;
    this.channelDefined = true;
    return this;
  }

  /**
   * Get channel
   *
   * @return channel
   */
  @JsonProperty(JSON_PROPERTY_CHANNEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public ConversationChannelDto getChannel() {
    return channel;
  }

  @JsonIgnore
  public boolean getChannelDefined() {
    return channelDefined;
  }

  @JsonProperty(JSON_PROPERTY_CHANNEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setChannel(ConversationChannelDto channel) {
    this.channel = channel;
    this.channelDefined = true;
  }

  public ChannelEventAllOfChannelEventNotificationDto eventType(String eventType) {
    this.eventType = eventType;
    this.eventTypeDefined = true;
    return this;
  }

  /**
   * The type of event being reported.
   *
   * @return eventType
   */
  @JsonProperty(JSON_PROPERTY_EVENT_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getEventType() {
    return eventType;
  }

  @JsonIgnore
  public boolean getEventTypeDefined() {
    return eventTypeDefined;
  }

  @JsonProperty(JSON_PROPERTY_EVENT_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEventType(String eventType) {
    this.eventType = eventType;
    this.eventTypeDefined = true;
  }

  public ChannelEventAllOfChannelEventNotificationDto additionalData(Object additionalData) {
    this.additionalData = additionalData;
    this.additionalDataDefined = true;
    return this;
  }

  /**
   * An object containing additional information regarding the event. The contents of the object
   * depend on the channel and the event_type.
   *
   * @return additionalData
   */
  @JsonProperty(JSON_PROPERTY_ADDITIONAL_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Object getAdditionalData() {
    return additionalData;
  }

  @JsonIgnore
  public boolean getAdditionalDataDefined() {
    return additionalDataDefined;
  }

  @JsonProperty(JSON_PROPERTY_ADDITIONAL_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAdditionalData(Object additionalData) {
    this.additionalData = additionalData;
    this.additionalDataDefined = true;
  }

  /** Return true if this ChannelEvent_allOf_channel_event_notification object is equal to o. */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChannelEventAllOfChannelEventNotificationDto channelEventAllOfChannelEventNotification =
        (ChannelEventAllOfChannelEventNotificationDto) o;
    return Objects.equals(this.channel, channelEventAllOfChannelEventNotification.channel)
        && Objects.equals(this.eventType, channelEventAllOfChannelEventNotification.eventType)
        && Objects.equals(
            this.additionalData, channelEventAllOfChannelEventNotification.additionalData);
  }

  @Override
  public int hashCode() {
    return Objects.hash(channel, eventType, additionalData);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChannelEventAllOfChannelEventNotificationDto {\n");
    sb.append("    channel: ").append(toIndentedString(channel)).append("\n");
    sb.append("    eventType: ").append(toIndentedString(eventType)).append("\n");
    sb.append("    additionalData: ").append(toIndentedString(additionalData)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
