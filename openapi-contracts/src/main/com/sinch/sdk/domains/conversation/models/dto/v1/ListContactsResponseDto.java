/*
 * Conversation API | Sinch
 * Send and receive messages globally over SMS, RCS, WhatsApp, Viber Business, Facebook messenger and other popular channels using the Sinch Conversation API.  The Conversation API endpoint uses built-in transcoding to give you the power of conversation across all supported channels and, if required, full control over channel specific features.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@sinch.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.sinch.sdk.domains.conversation.models.dto.v1;

import com.fasterxml.jackson.annotation.JsonFilter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/** ListContactsResponseDto */
@JsonPropertyOrder({
  ListContactsResponseDto.JSON_PROPERTY_CONTACTS,
  ListContactsResponseDto.JSON_PROPERTY_NEXT_PAGE_TOKEN
})
@JsonFilter("uninitializedFilter")
@JsonInclude(value = JsonInclude.Include.CUSTOM)
public class ListContactsResponseDto {
  public static final String JSON_PROPERTY_CONTACTS = "contacts";
  private List<ContactDto> contacts;
  private boolean contactsDefined = false;

  public static final String JSON_PROPERTY_NEXT_PAGE_TOKEN = "next_page_token";
  private String nextPageToken;
  private boolean nextPageTokenDefined = false;

  public ListContactsResponseDto() {}

  public ListContactsResponseDto contacts(List<ContactDto> contacts) {
    this.contacts = contacts;
    this.contactsDefined = true;
    return this;
  }

  public ListContactsResponseDto addContactsItem(ContactDto contactsItem) {
    if (this.contacts == null) {
      this.contacts = new ArrayList<>();
    }
    this.contactsDefined = true;
    this.contacts.add(contactsItem);
    return this;
  }

  /**
   * List of contacts belonging to the specified project.
   *
   * @return contacts
   */
  @JsonProperty(JSON_PROPERTY_CONTACTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<ContactDto> getContacts() {
    return contacts;
  }

  @JsonIgnore
  public boolean getContactsDefined() {
    return contactsDefined;
  }

  @JsonProperty(JSON_PROPERTY_CONTACTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setContacts(List<ContactDto> contacts) {
    this.contacts = contacts;
    this.contactsDefined = true;
  }

  public ListContactsResponseDto nextPageToken(String nextPageToken) {
    this.nextPageToken = nextPageToken;
    this.nextPageTokenDefined = true;
    return this;
  }

  /**
   * Token that should be included in the next list contacts request to fetch the next page.
   *
   * @return nextPageToken
   */
  @JsonProperty(JSON_PROPERTY_NEXT_PAGE_TOKEN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getNextPageToken() {
    return nextPageToken;
  }

  @JsonIgnore
  public boolean getNextPageTokenDefined() {
    return nextPageTokenDefined;
  }

  @JsonProperty(JSON_PROPERTY_NEXT_PAGE_TOKEN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNextPageToken(String nextPageToken) {
    this.nextPageToken = nextPageToken;
    this.nextPageTokenDefined = true;
  }

  /** Return true if this ListContactsResponse object is equal to o. */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListContactsResponseDto listContactsResponse = (ListContactsResponseDto) o;
    return Objects.equals(this.contacts, listContactsResponse.contacts)
        && Objects.equals(this.nextPageToken, listContactsResponse.nextPageToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(contacts, nextPageToken);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListContactsResponseDto {\n");
    sb.append("    contacts: ").append(toIndentedString(contacts)).append("\n");
    sb.append("    nextPageToken: ").append(toIndentedString(nextPageToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
