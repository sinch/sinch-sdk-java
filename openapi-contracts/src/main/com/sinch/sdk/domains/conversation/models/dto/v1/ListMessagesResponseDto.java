/*
 * Conversation API | Sinch
 * Send and receive messages globally over SMS, RCS, WhatsApp, Viber Business, Facebook messenger and other popular channels using the Sinch Conversation API.  The Conversation API endpoint uses built-in transcoding to give you the power of conversation across all supported channels and, if required, full control over channel specific features.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@sinch.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.sinch.sdk.domains.conversation.models.dto.v1;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFilter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import java.util.List;
import java.util.Objects;

/** ListMessagesResponseDto */
@JsonPropertyOrder({
  ListMessagesResponseDto.JSON_PROPERTY_MESSAGES,
  ListMessagesResponseDto.JSON_PROPERTY_NEXT_PAGE_TOKEN
})
@JsonFilter("uninitializedFilter")
@JsonInclude(value = JsonInclude.Include.CUSTOM)
public class ListMessagesResponseDto {
  private static final long serialVersionUID = 1L;
  public static final String JSON_PROPERTY_MESSAGES = "messages";
  private List<ConversationMessageDto> messages;
  private boolean messagesDefined = false;

  public static final String JSON_PROPERTY_NEXT_PAGE_TOKEN = "next_page_token";
  private String nextPageToken;
  private boolean nextPageTokenDefined = false;

  public ListMessagesResponseDto() {}

  @JsonCreator
  public ListMessagesResponseDto(
      @JsonProperty(JSON_PROPERTY_MESSAGES) List<ConversationMessageDto> messages) {
    this();
    this.messages = messages;
    this.messagesDefined = true;
  }

  /**
   * List of messages associated to the referenced conversation.
   *
   * @return messages
   */
  @JsonProperty(JSON_PROPERTY_MESSAGES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<ConversationMessageDto> getMessages() {
    return messages;
  }

  @JsonIgnore
  public boolean getMessagesDefined() {
    return messagesDefined;
  }

  public ListMessagesResponseDto nextPageToken(String nextPageToken) {
    this.nextPageToken = nextPageToken;
    this.nextPageTokenDefined = true;
    return this;
  }

  /**
   * Token that should be included in the next request to fetch the next page.
   *
   * @return nextPageToken
   */
  @JsonProperty(JSON_PROPERTY_NEXT_PAGE_TOKEN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getNextPageToken() {
    return nextPageToken;
  }

  @JsonIgnore
  public boolean getNextPageTokenDefined() {
    return nextPageTokenDefined;
  }

  @JsonProperty(JSON_PROPERTY_NEXT_PAGE_TOKEN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNextPageToken(String nextPageToken) {
    this.nextPageToken = nextPageToken;
    this.nextPageTokenDefined = true;
  }

  /** Return true if this ListMessagesResponse object is equal to o. */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListMessagesResponseDto listMessagesResponse = (ListMessagesResponseDto) o;
    return Objects.equals(this.messages, listMessagesResponse.messages)
        && Objects.equals(this.nextPageToken, listMessagesResponse.nextPageToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(messages, nextPageToken);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListMessagesResponseDto {\n");
    sb.append("    messages: ").append(toIndentedString(messages)).append("\n");
    sb.append("    nextPageToken: ").append(toIndentedString(nextPageToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
