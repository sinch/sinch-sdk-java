/*
 * Conversation API | Sinch
 * Send and receive messages globally over SMS, RCS, WhatsApp, Viber Business, Facebook messenger and other popular channels using the Sinch Conversation API.  The Conversation API endpoint uses built-in transcoding to give you the power of conversation across all supported channels and, if required, full control over channel specific features.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@sinch.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.sinch.sdk.domains.conversation.models.dto.v1;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFilter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import java.util.Objects;

/** RateLimitsDto */
@JsonPropertyOrder({
  RateLimitsDto.JSON_PROPERTY_INBOUND,
  RateLimitsDto.JSON_PROPERTY_OUTBOUND,
  RateLimitsDto.JSON_PROPERTY_WEBHOOKS
})
@JsonFilter("uninitializedFilter")
@JsonInclude(value = JsonInclude.Include.CUSTOM)
public class RateLimitsDto {
  public static final String JSON_PROPERTY_INBOUND = "inbound";
  private Long inbound;
  private boolean inboundDefined = false;

  public static final String JSON_PROPERTY_OUTBOUND = "outbound";
  private Long outbound;
  private boolean outboundDefined = false;

  public static final String JSON_PROPERTY_WEBHOOKS = "webhooks";
  private Long webhooks;
  private boolean webhooksDefined = false;

  public RateLimitsDto() {}

  @JsonCreator
  public RateLimitsDto(
      @JsonProperty(JSON_PROPERTY_INBOUND) Long inbound,
      @JsonProperty(JSON_PROPERTY_OUTBOUND) Long outbound,
      @JsonProperty(JSON_PROPERTY_WEBHOOKS) Long webhooks) {
    this();
    this.inbound = inbound;
    this.inboundDefined = true;
    this.outbound = outbound;
    this.outboundDefined = true;
    this.webhooks = webhooks;
    this.webhooksDefined = true;
  }

  /**
   * The number of inbound messages/events we process per second, from underlying channels to the
   * app. The default rate limit is 25.
   *
   * @return inbound
   */
  @JsonProperty(JSON_PROPERTY_INBOUND)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Long getInbound() {
    return inbound;
  }

  @JsonIgnore
  public boolean getInboundDefined() {
    return inboundDefined;
  }

  /**
   * The number of messages/events we process per second, from the app to the underlying channels.
   * Note that underlying channels may have other rate limits. The default rate limit is 25.
   *
   * @return outbound
   */
  @JsonProperty(JSON_PROPERTY_OUTBOUND)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Long getOutbound() {
    return outbound;
  }

  @JsonIgnore
  public boolean getOutboundDefined() {
    return outboundDefined;
  }

  /**
   * The rate limit of callbacks sent to the webhooks registered for the app. Note that if you have
   * multiple webhooks with shared triggers, multiple callbacks will be sent out for each triggering
   * event. The default rate limit is 25.
   *
   * @return webhooks
   */
  @JsonProperty(JSON_PROPERTY_WEBHOOKS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Long getWebhooks() {
    return webhooks;
  }

  @JsonIgnore
  public boolean getWebhooksDefined() {
    return webhooksDefined;
  }

  /** Return true if this RateLimits object is equal to o. */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RateLimitsDto rateLimits = (RateLimitsDto) o;
    return Objects.equals(this.inbound, rateLimits.inbound)
        && Objects.equals(this.outbound, rateLimits.outbound)
        && Objects.equals(this.webhooks, rateLimits.webhooks);
  }

  @Override
  public int hashCode() {
    return Objects.hash(inbound, outbound, webhooks);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RateLimitsDto {\n");
    sb.append("    inbound: ").append(toIndentedString(inbound)).append("\n");
    sb.append("    outbound: ").append(toIndentedString(outbound)).append("\n");
    sb.append("    webhooks: ").append(toIndentedString(webhooks)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
