/*
 * Conversation API | Sinch
 * Send and receive messages globally over SMS, RCS, WhatsApp, Viber Business, Facebook messenger and other popular channels using the Sinch Conversation API.  The Conversation API endpoint uses built-in transcoding to give you the power of conversation across all supported channels and, if required, full control over channel specific features.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@sinch.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.sinch.sdk.domains.conversation.models.dto.v1;

import com.fasterxml.jackson.annotation.JsonFilter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/** CarouselMessageCarouselMessageDto */
@JsonPropertyOrder({
  CarouselMessageCarouselMessageDto.JSON_PROPERTY_CARDS,
  CarouselMessageCarouselMessageDto.JSON_PROPERTY_CHOICES
})
@JsonFilter("uninitializedFilter")
@JsonInclude(value = JsonInclude.Include.CUSTOM)
public class CarouselMessageCarouselMessageDto {
  public static final String JSON_PROPERTY_CARDS = "cards";
  private List<CardMessageDto> cards;
  private boolean cardsDefined = false;

  public static final String JSON_PROPERTY_CHOICES = "choices";
  private List<ChoiceDto> choices;
  private boolean choicesDefined = false;

  public CarouselMessageCarouselMessageDto() {}

  public CarouselMessageCarouselMessageDto cards(List<CardMessageDto> cards) {
    this.cards = cards;
    this.cardsDefined = true;
    return this;
  }

  public CarouselMessageCarouselMessageDto addCardsItem(CardMessageDto cardsItem) {
    if (this.cards == null) {
      this.cards = new ArrayList<>();
    }
    this.cardsDefined = true;
    this.cards.add(cardsItem);
    return this;
  }

  /**
   * A list of up to 10 cards.
   *
   * @return cards
   */
  @JsonProperty(JSON_PROPERTY_CARDS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public List<CardMessageDto> getCards() {
    return cards;
  }

  @JsonIgnore
  public boolean getCardsDefined() {
    return cardsDefined;
  }

  @JsonProperty(JSON_PROPERTY_CARDS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCards(List<CardMessageDto> cards) {
    this.cards = cards;
    this.cardsDefined = true;
  }

  public CarouselMessageCarouselMessageDto choices(List<ChoiceDto> choices) {
    this.choices = choices;
    this.choicesDefined = true;
    return this;
  }

  public CarouselMessageCarouselMessageDto addChoicesItem(ChoiceDto choicesItem) {
    if (this.choices == null) {
      this.choices = new ArrayList<>();
    }
    this.choicesDefined = true;
    this.choices.add(choicesItem);
    return this;
  }

  /**
   * Optional. Outer choices on the carousel level. The number of outer choices is limited to 3.
   *
   * @return choices
   */
  @JsonProperty(JSON_PROPERTY_CHOICES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<ChoiceDto> getChoices() {
    return choices;
  }

  @JsonIgnore
  public boolean getChoicesDefined() {
    return choicesDefined;
  }

  @JsonProperty(JSON_PROPERTY_CHOICES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setChoices(List<ChoiceDto> choices) {
    this.choices = choices;
    this.choicesDefined = true;
  }

  /** Return true if this CarouselMessage_carousel_message object is equal to o. */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CarouselMessageCarouselMessageDto carouselMessageCarouselMessage =
        (CarouselMessageCarouselMessageDto) o;
    return Objects.equals(this.cards, carouselMessageCarouselMessage.cards)
        && Objects.equals(this.choices, carouselMessageCarouselMessage.choices);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cards, choices);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CarouselMessageCarouselMessageDto {\n");
    sb.append("    cards: ").append(toIndentedString(cards)).append("\n");
    sb.append("    choices: ").append(toIndentedString(choices)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
