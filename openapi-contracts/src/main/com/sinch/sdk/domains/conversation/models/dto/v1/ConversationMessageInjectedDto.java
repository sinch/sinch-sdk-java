/*
 * Conversation API | Sinch
 * Send and receive messages globally over SMS, RCS, WhatsApp, Viber Business, Facebook messenger and other popular channels using the Sinch Conversation API.  The Conversation API endpoint uses built-in transcoding to give you the power of conversation across all supported channels and, if required, full control over channel specific features.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@sinch.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.sinch.sdk.domains.conversation.models.dto.v1;

import com.fasterxml.jackson.annotation.JsonFilter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import java.time.OffsetDateTime;
import java.util.Objects;

/** A message on a particular channel. */
@JsonPropertyOrder({
  ConversationMessageInjectedDto.JSON_PROPERTY_ACCEPT_TIME,
  ConversationMessageInjectedDto.JSON_PROPERTY_APP_MESSAGE,
  ConversationMessageInjectedDto.JSON_PROPERTY_CHANNEL_IDENTITY,
  ConversationMessageInjectedDto.JSON_PROPERTY_CONTACT_ID,
  ConversationMessageInjectedDto.JSON_PROPERTY_CONTACT_MESSAGE,
  ConversationMessageInjectedDto.JSON_PROPERTY_DIRECTION,
  ConversationMessageInjectedDto.JSON_PROPERTY_METADATA
})
@JsonFilter("uninitializedFilter")
@JsonInclude(value = JsonInclude.Include.CUSTOM)
public class ConversationMessageInjectedDto {
  private static final long serialVersionUID = 1L;
  public static final String JSON_PROPERTY_ACCEPT_TIME = "accept_time";
  private OffsetDateTime acceptTime;
  private boolean acceptTimeDefined = false;

  public static final String JSON_PROPERTY_APP_MESSAGE = "app_message";
  private AppMessageDto appMessage;
  private boolean appMessageDefined = false;

  public static final String JSON_PROPERTY_CHANNEL_IDENTITY = "channel_identity";
  private ChannelIdentityDto channelIdentity;
  private boolean channelIdentityDefined = false;

  public static final String JSON_PROPERTY_CONTACT_ID = "contact_id";
  private String contactId;
  private boolean contactIdDefined = false;

  public static final String JSON_PROPERTY_CONTACT_MESSAGE = "contact_message";
  private ContactMessageDto contactMessage;
  private boolean contactMessageDefined = false;

  public static final String JSON_PROPERTY_DIRECTION = "direction";
  private ConversationDirectionDto direction;
  private boolean directionDefined = false;

  public static final String JSON_PROPERTY_METADATA = "metadata";
  private String metadata;
  private boolean metadataDefined = false;

  public ConversationMessageInjectedDto() {}

  public ConversationMessageInjectedDto acceptTime(OffsetDateTime acceptTime) {
    this.acceptTime = acceptTime;
    this.acceptTimeDefined = true;
    return this;
  }

  /**
   * The processed time of the message in UTC timezone. Must be less than current_time and greater
   * than (current_time - 30 days)
   *
   * @return acceptTime
   */
  @JsonProperty(JSON_PROPERTY_ACCEPT_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public OffsetDateTime getAcceptTime() {
    return acceptTime;
  }

  @JsonIgnore
  public boolean getAcceptTimeDefined() {
    return acceptTimeDefined;
  }

  @JsonProperty(JSON_PROPERTY_ACCEPT_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAcceptTime(OffsetDateTime acceptTime) {
    this.acceptTime = acceptTime;
    this.acceptTimeDefined = true;
  }

  public ConversationMessageInjectedDto appMessage(AppMessageDto appMessage) {
    this.appMessage = appMessage;
    this.appMessageDefined = true;
    return this;
  }

  /**
   * Get appMessage
   *
   * @return appMessage
   */
  @JsonProperty(JSON_PROPERTY_APP_MESSAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public AppMessageDto getAppMessage() {
    return appMessage;
  }

  @JsonIgnore
  public boolean getAppMessageDefined() {
    return appMessageDefined;
  }

  @JsonProperty(JSON_PROPERTY_APP_MESSAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAppMessage(AppMessageDto appMessage) {
    this.appMessage = appMessage;
    this.appMessageDefined = true;
  }

  public ConversationMessageInjectedDto channelIdentity(ChannelIdentityDto channelIdentity) {
    this.channelIdentity = channelIdentity;
    this.channelIdentityDefined = true;
    return this;
  }

  /**
   * Get channelIdentity
   *
   * @return channelIdentity
   */
  @JsonProperty(JSON_PROPERTY_CHANNEL_IDENTITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public ChannelIdentityDto getChannelIdentity() {
    return channelIdentity;
  }

  @JsonIgnore
  public boolean getChannelIdentityDefined() {
    return channelIdentityDefined;
  }

  @JsonProperty(JSON_PROPERTY_CHANNEL_IDENTITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setChannelIdentity(ChannelIdentityDto channelIdentity) {
    this.channelIdentity = channelIdentity;
    this.channelIdentityDefined = true;
  }

  public ConversationMessageInjectedDto contactId(String contactId) {
    this.contactId = contactId;
    this.contactIdDefined = true;
    return this;
  }

  /**
   * The ID of the contact registered in the conversation provided.
   *
   * @return contactId
   */
  @JsonProperty(JSON_PROPERTY_CONTACT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getContactId() {
    return contactId;
  }

  @JsonIgnore
  public boolean getContactIdDefined() {
    return contactIdDefined;
  }

  @JsonProperty(JSON_PROPERTY_CONTACT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setContactId(String contactId) {
    this.contactId = contactId;
    this.contactIdDefined = true;
  }

  public ConversationMessageInjectedDto contactMessage(ContactMessageDto contactMessage) {
    this.contactMessage = contactMessage;
    this.contactMessageDefined = true;
    return this;
  }

  /**
   * Get contactMessage
   *
   * @return contactMessage
   */
  @JsonProperty(JSON_PROPERTY_CONTACT_MESSAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public ContactMessageDto getContactMessage() {
    return contactMessage;
  }

  @JsonIgnore
  public boolean getContactMessageDefined() {
    return contactMessageDefined;
  }

  @JsonProperty(JSON_PROPERTY_CONTACT_MESSAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setContactMessage(ContactMessageDto contactMessage) {
    this.contactMessage = contactMessage;
    this.contactMessageDefined = true;
  }

  public ConversationMessageInjectedDto direction(ConversationDirectionDto direction) {
    this.direction = direction;
    this.directionDefined = true;
    return this;
  }

  /**
   * Get direction
   *
   * @return direction
   */
  @JsonProperty(JSON_PROPERTY_DIRECTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public ConversationDirectionDto getDirection() {
    return direction;
  }

  @JsonIgnore
  public boolean getDirectionDefined() {
    return directionDefined;
  }

  @JsonProperty(JSON_PROPERTY_DIRECTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDirection(ConversationDirectionDto direction) {
    this.direction = direction;
    this.directionDefined = true;
  }

  public ConversationMessageInjectedDto metadata(String metadata) {
    this.metadata = metadata;
    this.metadataDefined = true;
    return this;
  }

  /**
   * Optional. Metadata associated with the contact. Up to 1024 characters long.
   *
   * @return metadata
   */
  @JsonProperty(JSON_PROPERTY_METADATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getMetadata() {
    return metadata;
  }

  @JsonIgnore
  public boolean getMetadataDefined() {
    return metadataDefined;
  }

  @JsonProperty(JSON_PROPERTY_METADATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMetadata(String metadata) {
    this.metadata = metadata;
    this.metadataDefined = true;
  }

  /** Return true if this ConversationMessageInjected object is equal to o. */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConversationMessageInjectedDto conversationMessageInjected = (ConversationMessageInjectedDto) o;
    return Objects.equals(this.acceptTime, conversationMessageInjected.acceptTime)
        && Objects.equals(this.appMessage, conversationMessageInjected.appMessage)
        && Objects.equals(this.channelIdentity, conversationMessageInjected.channelIdentity)
        && Objects.equals(this.contactId, conversationMessageInjected.contactId)
        && Objects.equals(this.contactMessage, conversationMessageInjected.contactMessage)
        && Objects.equals(this.direction, conversationMessageInjected.direction)
        && Objects.equals(this.metadata, conversationMessageInjected.metadata);
  }

  @Override
  public int hashCode() {
    return Objects.hash(
        acceptTime, appMessage, channelIdentity, contactId, contactMessage, direction, metadata);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConversationMessageInjectedDto {\n");
    sb.append("    acceptTime: ").append(toIndentedString(acceptTime)).append("\n");
    sb.append("    appMessage: ").append(toIndentedString(appMessage)).append("\n");
    sb.append("    channelIdentity: ").append(toIndentedString(channelIdentity)).append("\n");
    sb.append("    contactId: ").append(toIndentedString(contactId)).append("\n");
    sb.append("    contactMessage: ").append(toIndentedString(contactMessage)).append("\n");
    sb.append("    direction: ").append(toIndentedString(direction)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
