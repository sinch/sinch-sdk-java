/*
 * Conversation API | Sinch
 * Send and receive messages globally over SMS, RCS, WhatsApp, Viber Business, Facebook messenger and other popular channels using the Sinch Conversation API.  The Conversation API endpoint uses built-in transcoding to give you the power of conversation across all supported channels and, if required, full control over channel specific features.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@sinch.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.sinch.sdk.domains.conversation.models.dto.v1;

import com.fasterxml.jackson.annotation.JsonFilter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import java.util.Objects;

/**
 * An object that identifies a document type within the image, along with a confidence level for
 * that document type.
 */
@JsonPropertyOrder({
  DocumentImageClassificationDto.JSON_PROPERTY_DOC_TYPE,
  DocumentImageClassificationDto.JSON_PROPERTY_CONFIDENCE
})
@JsonFilter("uninitializedFilter")
@JsonInclude(value = JsonInclude.Include.CUSTOM)
public class DocumentImageClassificationDto {
  private static final long serialVersionUID = 1L;
  public static final String JSON_PROPERTY_DOC_TYPE = "doc_type";
  private String docType;
  private boolean docTypeDefined = false;

  public static final String JSON_PROPERTY_CONFIDENCE = "confidence";
  private Float confidence;
  private boolean confidenceDefined = false;

  public DocumentImageClassificationDto() {}

  public DocumentImageClassificationDto docType(String docType) {
    this.docType = docType;
    this.docTypeDefined = true;
    return this;
  }

  /**
   * The document type that the analyzed image most likely contains.
   *
   * @return docType
   */
  @JsonProperty(JSON_PROPERTY_DOC_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getDocType() {
    return docType;
  }

  @JsonIgnore
  public boolean getDocTypeDefined() {
    return docTypeDefined;
  }

  @JsonProperty(JSON_PROPERTY_DOC_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDocType(String docType) {
    this.docType = docType;
    this.docTypeDefined = true;
  }

  public DocumentImageClassificationDto confidence(Float confidence) {
    this.confidence = confidence;
    this.confidenceDefined = true;
    return this;
  }

  /**
   * The likelihood that the analyzed image contains the assigned document type. 1 is the maximum
   * value, representing the highest likelihood that the analyzed image contains the assigned
   * document type, and 0 is the minimum value, representing the lowest likelihood that the analyzed
   * image contains the assigned document type.
   *
   * @return confidence
   */
  @JsonProperty(JSON_PROPERTY_CONFIDENCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Float getConfidence() {
    return confidence;
  }

  @JsonIgnore
  public boolean getConfidenceDefined() {
    return confidenceDefined;
  }

  @JsonProperty(JSON_PROPERTY_CONFIDENCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setConfidence(Float confidence) {
    this.confidence = confidence;
    this.confidenceDefined = true;
  }

  /** Return true if this DocumentImageClassification object is equal to o. */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DocumentImageClassificationDto documentImageClassification = (DocumentImageClassificationDto) o;
    return Objects.equals(this.docType, documentImageClassification.docType)
        && Objects.equals(this.confidence, documentImageClassification.confidence);
  }

  @Override
  public int hashCode() {
    return Objects.hash(docType, confidence);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DocumentImageClassificationDto {\n");
    sb.append("    docType: ").append(toIndentedString(docType)).append("\n");
    sb.append("    confidence: ").append(toIndentedString(confidence)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
