/*
 * Conversation API | Sinch
 * Send and receive messages globally over SMS, RCS, WhatsApp, Viber Business, Facebook messenger and other popular channels using the Sinch Conversation API.  The Conversation API endpoint uses built-in transcoding to give you the power of conversation across all supported channels and, if required, full control over channel specific features.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@sinch.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.sinch.sdk.domains.conversation.adapters.api.v1;

import com.fasterxml.jackson.core.type.TypeReference;
import com.sinch.sdk.core.exceptions.ApiException;
import com.sinch.sdk.core.exceptions.ApiExceptionBuilder;
import com.sinch.sdk.core.http.AuthManager;
import com.sinch.sdk.core.http.HttpClient;
import com.sinch.sdk.core.http.HttpMapper;
import com.sinch.sdk.core.http.HttpMethod;
import com.sinch.sdk.core.http.HttpRequest;
import com.sinch.sdk.core.http.HttpResponse;
import com.sinch.sdk.core.http.HttpStatus;
import com.sinch.sdk.core.http.URLParameter;
import com.sinch.sdk.core.http.URLPathUtils;
import com.sinch.sdk.core.models.ServerConfiguration;
import com.sinch.sdk.domains.conversation.models.dto.v1.ContactCreateRequestDto;
import com.sinch.sdk.domains.conversation.models.dto.v1.ContactDto;
import com.sinch.sdk.domains.conversation.models.dto.v1.ConversationChannelDto;
import com.sinch.sdk.domains.conversation.models.dto.v1.GetChannelProfileRequestDto;
import com.sinch.sdk.domains.conversation.models.dto.v1.GetChannelProfileResponseDto;
import com.sinch.sdk.domains.conversation.models.dto.v1.ListContactsResponseDto;
import com.sinch.sdk.domains.conversation.models.dto.v1.MergeContactRequestDto;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Logger;

public class ContactApi {

  private static final Logger LOGGER = Logger.getLogger(ContactApi.class.getName());
  private HttpClient httpClient;
  private ServerConfiguration serverConfiguration;
  private Map<String, AuthManager> authManagersByOasSecuritySchemes;
  private HttpMapper mapper;

  public ContactApi(
      HttpClient httpClient,
      ServerConfiguration serverConfiguration,
      Map<String, AuthManager> authManagersByOasSecuritySchemes,
      HttpMapper mapper) {
    this.httpClient = httpClient;
    this.serverConfiguration = serverConfiguration;
    this.authManagersByOasSecuritySchemes = authManagersByOasSecuritySchemes;
    this.mapper = mapper;
  }

  /**
   * Create a Contact Most Conversation API contacts are [created
   * automatically](/docs/conversation/contact-management/) when a message is sent to a new
   * recipient. You can also create a new contact manually using this API call.
   *
   * @param projectId The unique ID of the project. You can find this on the [Sinch
   *     Dashboard](https://dashboard.sinch.com/convapi/apps). (required)
   * @param contactCreateRequestDto The contact to create. (required)
   * @return ContactDto
   * @throws ApiException if fails to make API call
   */
  public ContactDto contactCreateContact(
      String projectId, ContactCreateRequestDto contactCreateRequestDto) throws ApiException {

    LOGGER.finest(
        "[contactCreateContact]"
            + " "
            + "projectId: "
            + projectId
            + ", "
            + "contactCreateRequestDto: "
            + contactCreateRequestDto);

    HttpRequest httpRequest =
        contactCreateContactRequestBuilder(projectId, contactCreateRequestDto);
    HttpResponse response =
        httpClient.invokeAPI(
            this.serverConfiguration, this.authManagersByOasSecuritySchemes, httpRequest);

    if (HttpStatus.isSuccessfulStatus(response.getCode())) {
      TypeReference<ContactDto> localVarReturnType = new TypeReference<ContactDto>() {};
      return mapper.deserialize(response, localVarReturnType);
    }
    // fallback to default errors handling:
    // all error cases definition are not required from specs: will try some "hardcoded" content
    // parsing
    throw ApiExceptionBuilder.build(
        response.getMessage(),
        response.getCode(),
        mapper.deserialize(response, new TypeReference<HashMap<String, ?>>() {}));
  }

  private HttpRequest contactCreateContactRequestBuilder(
      String projectId, ContactCreateRequestDto contactCreateRequestDto) throws ApiException {
    // verify the required parameter 'projectId' is set
    if (projectId == null) {
      throw new ApiException(
          400, "Missing the required parameter 'projectId' when calling contactCreateContact");
    }
    // verify the required parameter 'contactCreateRequestDto' is set
    if (contactCreateRequestDto == null) {
      throw new ApiException(
          400,
          "Missing the required parameter 'contactCreateRequestDto' when calling"
              + " contactCreateContact");
    }

    String localVarPath =
        "/v1/projects/{project_id}/contacts"
            .replaceAll(
                "\\{" + "project_id" + "\\}", URLPathUtils.encodePathSegment(projectId.toString()));

    List<URLParameter> localVarQueryParams = new ArrayList<>();

    Map<String, String> localVarHeaderParams = new HashMap<>();

    final Collection<String> localVarAccepts = Arrays.asList("application/json");

    final Collection<String> localVarContentTypes = Arrays.asList("application/json");

    final Collection<String> localVarAuthNames = Arrays.asList("Basic", "oAuth2");
    final String serializedBody = mapper.serialize(localVarContentTypes, contactCreateRequestDto);

    return new HttpRequest(
        localVarPath,
        HttpMethod.POST,
        localVarQueryParams,
        serializedBody,
        localVarHeaderParams,
        localVarAccepts,
        localVarContentTypes,
        localVarAuthNames);
  }

  /**
   * Delete a Contact Delete a contact as specified by the contact ID.
   *
   * @param projectId The unique ID of the project. You can find this on the [Sinch
   *     Dashboard](https://dashboard.sinch.com/convapi/apps). (required)
   * @param contactId The unique ID of the contact. (required)
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object contactDeleteContact(String projectId, String contactId) throws ApiException {

    LOGGER.finest(
        "[contactDeleteContact]"
            + " "
            + "projectId: "
            + projectId
            + ", "
            + "contactId: "
            + contactId);

    HttpRequest httpRequest = contactDeleteContactRequestBuilder(projectId, contactId);
    HttpResponse response =
        httpClient.invokeAPI(
            this.serverConfiguration, this.authManagersByOasSecuritySchemes, httpRequest);

    if (HttpStatus.isSuccessfulStatus(response.getCode())) {
      TypeReference<Object> localVarReturnType = new TypeReference<Object>() {};
      return mapper.deserialize(response, localVarReturnType);
    }
    // fallback to default errors handling:
    // all error cases definition are not required from specs: will try some "hardcoded" content
    // parsing
    throw ApiExceptionBuilder.build(
        response.getMessage(),
        response.getCode(),
        mapper.deserialize(response, new TypeReference<HashMap<String, ?>>() {}));
  }

  private HttpRequest contactDeleteContactRequestBuilder(String projectId, String contactId)
      throws ApiException {
    // verify the required parameter 'projectId' is set
    if (projectId == null) {
      throw new ApiException(
          400, "Missing the required parameter 'projectId' when calling contactDeleteContact");
    }
    // verify the required parameter 'contactId' is set
    if (contactId == null) {
      throw new ApiException(
          400, "Missing the required parameter 'contactId' when calling contactDeleteContact");
    }

    String localVarPath =
        "/v1/projects/{project_id}/contacts/{contact_id}"
            .replaceAll(
                "\\{" + "project_id" + "\\}", URLPathUtils.encodePathSegment(projectId.toString()))
            .replaceAll(
                "\\{" + "contact_id" + "\\}", URLPathUtils.encodePathSegment(contactId.toString()));

    List<URLParameter> localVarQueryParams = new ArrayList<>();

    Map<String, String> localVarHeaderParams = new HashMap<>();

    final Collection<String> localVarAccepts = Arrays.asList("application/json");

    final Collection<String> localVarContentTypes = Arrays.asList();

    final Collection<String> localVarAuthNames = Arrays.asList("Basic", "oAuth2");
    final String serializedBody = null;

    return new HttpRequest(
        localVarPath,
        HttpMethod.DELETE,
        localVarQueryParams,
        serializedBody,
        localVarHeaderParams,
        localVarAccepts,
        localVarContentTypes,
        localVarAuthNames);
  }

  /**
   * Get Channel Profile Get user profile from a specific channel. Only supported on
   * &#x60;MESSENGER&#x60;, &#x60;INSTAGRAM&#x60;, &#x60;VIBER&#x60; and &#x60;LINE&#x60; channels.
   * Note that, in order to retrieve a WhatsApp display name, you can use the Get a Contact or List
   * Contacts operations, which will populate the &#x60;display_name&#x60; field of each returned
   * contact with the WhatsApp display name (if the name is already stored on the server and the
   * &#x60;display_name&#x60; field has not been overwritten by the user).
   *
   * @param projectId The unique ID of the project. You can find this on the [Sinch
   *     Dashboard](https://dashboard.sinch.com/convapi/apps). (required)
   * @param getChannelProfileRequestDto (required)
   * @return GetChannelProfileResponseDto
   * @throws ApiException if fails to make API call
   */
  public GetChannelProfileResponseDto contactGetChannelProfile(
      String projectId, GetChannelProfileRequestDto getChannelProfileRequestDto)
      throws ApiException {

    LOGGER.finest(
        "[contactGetChannelProfile]"
            + " "
            + "projectId: "
            + projectId
            + ", "
            + "getChannelProfileRequestDto: "
            + getChannelProfileRequestDto);

    HttpRequest httpRequest =
        contactGetChannelProfileRequestBuilder(projectId, getChannelProfileRequestDto);
    HttpResponse response =
        httpClient.invokeAPI(
            this.serverConfiguration, this.authManagersByOasSecuritySchemes, httpRequest);

    if (HttpStatus.isSuccessfulStatus(response.getCode())) {
      TypeReference<GetChannelProfileResponseDto> localVarReturnType =
          new TypeReference<GetChannelProfileResponseDto>() {};
      return mapper.deserialize(response, localVarReturnType);
    }
    // fallback to default errors handling:
    // all error cases definition are not required from specs: will try some "hardcoded" content
    // parsing
    throw ApiExceptionBuilder.build(
        response.getMessage(),
        response.getCode(),
        mapper.deserialize(response, new TypeReference<HashMap<String, ?>>() {}));
  }

  private HttpRequest contactGetChannelProfileRequestBuilder(
      String projectId, GetChannelProfileRequestDto getChannelProfileRequestDto)
      throws ApiException {
    // verify the required parameter 'projectId' is set
    if (projectId == null) {
      throw new ApiException(
          400, "Missing the required parameter 'projectId' when calling contactGetChannelProfile");
    }
    // verify the required parameter 'getChannelProfileRequestDto' is set
    if (getChannelProfileRequestDto == null) {
      throw new ApiException(
          400,
          "Missing the required parameter 'getChannelProfileRequestDto' when calling"
              + " contactGetChannelProfile");
    }

    String localVarPath =
        "/v1/projects/{project_id}/contacts:getChannelProfile"
            .replaceAll(
                "\\{" + "project_id" + "\\}", URLPathUtils.encodePathSegment(projectId.toString()));

    List<URLParameter> localVarQueryParams = new ArrayList<>();

    Map<String, String> localVarHeaderParams = new HashMap<>();

    final Collection<String> localVarAccepts = Arrays.asList("application/json");

    final Collection<String> localVarContentTypes = Arrays.asList("application/json");

    final Collection<String> localVarAuthNames = Arrays.asList("Basic", "oAuth2");
    final String serializedBody =
        mapper.serialize(localVarContentTypes, getChannelProfileRequestDto);

    return new HttpRequest(
        localVarPath,
        HttpMethod.POST,
        localVarQueryParams,
        serializedBody,
        localVarHeaderParams,
        localVarAccepts,
        localVarContentTypes,
        localVarAuthNames);
  }

  /**
   * Get a Contact Returns a specific contact as specified by the contact ID. Note that, if a
   * WhatsApp contact is returned, the &#x60;display_name&#x60; field of that contact may be
   * populated with the WhatsApp display name (if the name is already stored on the server and the
   * &#x60;display_name&#x60; field has not been overwritten by the user).
   *
   * @param projectId The unique ID of the project. You can find this on the [Sinch
   *     Dashboard](https://dashboard.sinch.com/convapi/apps). (required)
   * @param contactId The unique ID of the contact. (required)
   * @return ContactDto
   * @throws ApiException if fails to make API call
   */
  public ContactDto contactGetContact(String projectId, String contactId) throws ApiException {

    LOGGER.finest(
        "[contactGetContact]" + " " + "projectId: " + projectId + ", " + "contactId: " + contactId);

    HttpRequest httpRequest = contactGetContactRequestBuilder(projectId, contactId);
    HttpResponse response =
        httpClient.invokeAPI(
            this.serverConfiguration, this.authManagersByOasSecuritySchemes, httpRequest);

    if (HttpStatus.isSuccessfulStatus(response.getCode())) {
      TypeReference<ContactDto> localVarReturnType = new TypeReference<ContactDto>() {};
      return mapper.deserialize(response, localVarReturnType);
    }
    // fallback to default errors handling:
    // all error cases definition are not required from specs: will try some "hardcoded" content
    // parsing
    throw ApiExceptionBuilder.build(
        response.getMessage(),
        response.getCode(),
        mapper.deserialize(response, new TypeReference<HashMap<String, ?>>() {}));
  }

  private HttpRequest contactGetContactRequestBuilder(String projectId, String contactId)
      throws ApiException {
    // verify the required parameter 'projectId' is set
    if (projectId == null) {
      throw new ApiException(
          400, "Missing the required parameter 'projectId' when calling contactGetContact");
    }
    // verify the required parameter 'contactId' is set
    if (contactId == null) {
      throw new ApiException(
          400, "Missing the required parameter 'contactId' when calling contactGetContact");
    }

    String localVarPath =
        "/v1/projects/{project_id}/contacts/{contact_id}"
            .replaceAll(
                "\\{" + "project_id" + "\\}", URLPathUtils.encodePathSegment(projectId.toString()))
            .replaceAll(
                "\\{" + "contact_id" + "\\}", URLPathUtils.encodePathSegment(contactId.toString()));

    List<URLParameter> localVarQueryParams = new ArrayList<>();

    Map<String, String> localVarHeaderParams = new HashMap<>();

    final Collection<String> localVarAccepts = Arrays.asList("application/json");

    final Collection<String> localVarContentTypes = Arrays.asList();

    final Collection<String> localVarAuthNames = Arrays.asList("Basic", "oAuth2");
    final String serializedBody = null;

    return new HttpRequest(
        localVarPath,
        HttpMethod.GET,
        localVarQueryParams,
        serializedBody,
        localVarHeaderParams,
        localVarAccepts,
        localVarContentTypes,
        localVarAuthNames);
  }

  /**
   * List Contacts List all contacts in the project. Note that, if a WhatsApp contact is returned,
   * the &#x60;display_name&#x60; field of that contact may be populated with the WhatsApp display
   * name (if the name is already stored on the server and the &#x60;display_name&#x60; field has
   * not been overwritten by the user).
   *
   * @param projectId The unique ID of the project. You can find this on the [Sinch
   *     Dashboard](https://dashboard.sinch.com/convapi/apps). (required)
   * @param pageSize Optional. The maximum number of contacts to fetch. The default is 10 and the
   *     maximum is 20. (optional)
   * @param pageToken Optional. Next page token previously returned if any. (optional)
   * @param externalId Optional. Contact identifier in an external system. If used,
   *     &#x60;channel&#x60; and &#x60;identity&#x60; query parameters can&#39;t be used. (optional)
   * @param channel Optional. Specifies a channel, and must be set to one of the enum values. If
   *     set, the &#x60;identity&#x60; parameter must be set and &#x60;external_id&#x60; can&#39;t
   *     be used. Used in conjunction with &#x60;identity&#x60; to uniquely identify the specified
   *     channel identity. (optional)
   * @param identity Optional. If set, the &#x60;channel&#x60; parameter must be set and
   *     &#x60;external_id&#x60; can&#39;t be used. Used in conjunction with &#x60;channel&#x60; to
   *     uniquely identify the specified channel identity. This will differ from channel to channel.
   *     For example, a phone number for SMS, WhatsApp, and Viber Business. (optional)
   * @return ListContactsResponseDto
   * @throws ApiException if fails to make API call
   */
  public ListContactsResponseDto contactListContacts(
      String projectId,
      Integer pageSize,
      String pageToken,
      String externalId,
      ConversationChannelDto channel,
      String identity)
      throws ApiException {

    LOGGER.finest(
        "[contactListContacts]"
            + " "
            + "projectId: "
            + projectId
            + ", "
            + "pageSize: "
            + pageSize
            + ", "
            + "pageToken: "
            + pageToken
            + ", "
            + "externalId: "
            + externalId
            + ", "
            + "channel: "
            + channel
            + ", "
            + "identity: "
            + identity);

    HttpRequest httpRequest =
        contactListContactsRequestBuilder(
            projectId, pageSize, pageToken, externalId, channel, identity);
    HttpResponse response =
        httpClient.invokeAPI(
            this.serverConfiguration, this.authManagersByOasSecuritySchemes, httpRequest);

    if (HttpStatus.isSuccessfulStatus(response.getCode())) {
      TypeReference<ListContactsResponseDto> localVarReturnType =
          new TypeReference<ListContactsResponseDto>() {};
      return mapper.deserialize(response, localVarReturnType);
    }
    // fallback to default errors handling:
    // all error cases definition are not required from specs: will try some "hardcoded" content
    // parsing
    throw ApiExceptionBuilder.build(
        response.getMessage(),
        response.getCode(),
        mapper.deserialize(response, new TypeReference<HashMap<String, ?>>() {}));
  }

  private HttpRequest contactListContactsRequestBuilder(
      String projectId,
      Integer pageSize,
      String pageToken,
      String externalId,
      ConversationChannelDto channel,
      String identity)
      throws ApiException {
    // verify the required parameter 'projectId' is set
    if (projectId == null) {
      throw new ApiException(
          400, "Missing the required parameter 'projectId' when calling contactListContacts");
    }

    String localVarPath =
        "/v1/projects/{project_id}/contacts"
            .replaceAll(
                "\\{" + "project_id" + "\\}", URLPathUtils.encodePathSegment(projectId.toString()));

    List<URLParameter> localVarQueryParams = new ArrayList<>();
    if (null != pageSize) {
      localVarQueryParams.add(
          new URLParameter(
              "page_size", pageSize, URLParameter.STYLE.valueOf("form".toUpperCase()), true));
    }
    if (null != pageToken) {
      localVarQueryParams.add(
          new URLParameter(
              "page_token", pageToken, URLParameter.STYLE.valueOf("form".toUpperCase()), true));
    }
    if (null != externalId) {
      localVarQueryParams.add(
          new URLParameter(
              "external_id", externalId, URLParameter.STYLE.valueOf("form".toUpperCase()), true));
    }
    if (null != channel) {
      localVarQueryParams.add(
          new URLParameter(
              "channel", channel, URLParameter.STYLE.valueOf("form".toUpperCase()), true));
    }
    if (null != identity) {
      localVarQueryParams.add(
          new URLParameter(
              "identity", identity, URLParameter.STYLE.valueOf("form".toUpperCase()), true));
    }

    Map<String, String> localVarHeaderParams = new HashMap<>();

    final Collection<String> localVarAccepts = Arrays.asList("application/json");

    final Collection<String> localVarContentTypes = Arrays.asList();

    final Collection<String> localVarAuthNames = Arrays.asList("Basic", "oAuth2");
    final String serializedBody = null;

    return new HttpRequest(
        localVarPath,
        HttpMethod.GET,
        localVarQueryParams,
        serializedBody,
        localVarHeaderParams,
        localVarAccepts,
        localVarContentTypes,
        localVarAuthNames);
  }

  /**
   * Merge two Contacts The remaining contact will contain all conversations that the removed
   * contact did. If both contacts had conversations within the same App, messages from the removed
   * contact will be merged into corresponding active conversations in the destination contact.
   * Channel identities will be moved from the source contact to the destination contact only for
   * channels that weren&#39;t present there before. Moved channel identities will be placed at the
   * bottom of the channel priority list. Optional fields from the source contact will be copied
   * only if corresponding fields in the destination contact are empty The contact being removed
   * cannot be referenced after this call.
   *
   * @param projectId The unique ID of the project. You can find this on the [Sinch
   *     Dashboard](https://dashboard.sinch.com/convapi/apps). (required)
   * @param destinationId The unique ID of the contact that should be kept when merging two
   *     contacts. (required)
   * @param mergeContactRequestDto The contact to be removed. (required)
   * @return ContactDto
   * @throws ApiException if fails to make API call
   */
  public ContactDto contactMergeContact(
      String projectId, String destinationId, MergeContactRequestDto mergeContactRequestDto)
      throws ApiException {

    LOGGER.finest(
        "[contactMergeContact]"
            + " "
            + "projectId: "
            + projectId
            + ", "
            + "destinationId: "
            + destinationId
            + ", "
            + "mergeContactRequestDto: "
            + mergeContactRequestDto);

    HttpRequest httpRequest =
        contactMergeContactRequestBuilder(projectId, destinationId, mergeContactRequestDto);
    HttpResponse response =
        httpClient.invokeAPI(
            this.serverConfiguration, this.authManagersByOasSecuritySchemes, httpRequest);

    if (HttpStatus.isSuccessfulStatus(response.getCode())) {
      TypeReference<ContactDto> localVarReturnType = new TypeReference<ContactDto>() {};
      return mapper.deserialize(response, localVarReturnType);
    }
    // fallback to default errors handling:
    // all error cases definition are not required from specs: will try some "hardcoded" content
    // parsing
    throw ApiExceptionBuilder.build(
        response.getMessage(),
        response.getCode(),
        mapper.deserialize(response, new TypeReference<HashMap<String, ?>>() {}));
  }

  private HttpRequest contactMergeContactRequestBuilder(
      String projectId, String destinationId, MergeContactRequestDto mergeContactRequestDto)
      throws ApiException {
    // verify the required parameter 'projectId' is set
    if (projectId == null) {
      throw new ApiException(
          400, "Missing the required parameter 'projectId' when calling contactMergeContact");
    }
    // verify the required parameter 'destinationId' is set
    if (destinationId == null) {
      throw new ApiException(
          400, "Missing the required parameter 'destinationId' when calling contactMergeContact");
    }
    // verify the required parameter 'mergeContactRequestDto' is set
    if (mergeContactRequestDto == null) {
      throw new ApiException(
          400,
          "Missing the required parameter 'mergeContactRequestDto' when calling"
              + " contactMergeContact");
    }

    String localVarPath =
        "/v1/projects/{project_id}/contacts/{destination_id}:merge"
            .replaceAll(
                "\\{" + "project_id" + "\\}", URLPathUtils.encodePathSegment(projectId.toString()))
            .replaceAll(
                "\\{" + "destination_id" + "\\}",
                URLPathUtils.encodePathSegment(destinationId.toString()));

    List<URLParameter> localVarQueryParams = new ArrayList<>();

    Map<String, String> localVarHeaderParams = new HashMap<>();

    final Collection<String> localVarAccepts = Arrays.asList("application/json");

    final Collection<String> localVarContentTypes = Arrays.asList("application/json");

    final Collection<String> localVarAuthNames = Arrays.asList("Basic", "oAuth2");
    final String serializedBody = mapper.serialize(localVarContentTypes, mergeContactRequestDto);

    return new HttpRequest(
        localVarPath,
        HttpMethod.POST,
        localVarQueryParams,
        serializedBody,
        localVarHeaderParams,
        localVarAccepts,
        localVarContentTypes,
        localVarAuthNames);
  }

  /**
   * Update a Contact Updates a contact as specified by the contact ID.
   *
   * @param projectId The unique ID of the project. You can find this on the [Sinch
   *     Dashboard](https://dashboard.sinch.com/convapi/apps). (required)
   * @param contactId The unique ID of the contact. (required)
   * @param contactDto The updated contact. (required)
   * @param updateMask The set of field mask paths. (optional
   * @return ContactDto
   * @throws ApiException if fails to make API call
   */
  public ContactDto contactUpdateContact(
      String projectId, String contactId, ContactDto contactDto, List<String> updateMask)
      throws ApiException {

    LOGGER.finest(
        "[contactUpdateContact]"
            + " "
            + "projectId: "
            + projectId
            + ", "
            + "contactId: "
            + contactId
            + ", "
            + "contactDto: "
            + contactDto
            + ", "
            + "updateMask: "
            + updateMask);

    HttpRequest httpRequest =
        contactUpdateContactRequestBuilder(projectId, contactId, contactDto, updateMask);
    HttpResponse response =
        httpClient.invokeAPI(
            this.serverConfiguration, this.authManagersByOasSecuritySchemes, httpRequest);

    if (HttpStatus.isSuccessfulStatus(response.getCode())) {
      TypeReference<ContactDto> localVarReturnType = new TypeReference<ContactDto>() {};
      return mapper.deserialize(response, localVarReturnType);
    }
    // fallback to default errors handling:
    // all error cases definition are not required from specs: will try some "hardcoded" content
    // parsing
    throw ApiExceptionBuilder.build(
        response.getMessage(),
        response.getCode(),
        mapper.deserialize(response, new TypeReference<HashMap<String, ?>>() {}));
  }

  private HttpRequest contactUpdateContactRequestBuilder(
      String projectId, String contactId, ContactDto contactDto, List<String> updateMask)
      throws ApiException {
    // verify the required parameter 'projectId' is set
    if (projectId == null) {
      throw new ApiException(
          400, "Missing the required parameter 'projectId' when calling contactUpdateContact");
    }
    // verify the required parameter 'contactId' is set
    if (contactId == null) {
      throw new ApiException(
          400, "Missing the required parameter 'contactId' when calling contactUpdateContact");
    }
    // verify the required parameter 'contactDto' is set
    if (contactDto == null) {
      throw new ApiException(
          400, "Missing the required parameter 'contactDto' when calling contactUpdateContact");
    }

    String localVarPath =
        "/v1/projects/{project_id}/contacts/{contact_id}"
            .replaceAll(
                "\\{" + "project_id" + "\\}", URLPathUtils.encodePathSegment(projectId.toString()))
            .replaceAll(
                "\\{" + "contact_id" + "\\}", URLPathUtils.encodePathSegment(contactId.toString()));

    List<URLParameter> localVarQueryParams = new ArrayList<>();
    if (null != updateMask) {
      localVarQueryParams.add(
          new URLParameter(
              "update_mask", updateMask, URLParameter.STYLE.valueOf("form".toUpperCase()), true));
    }

    Map<String, String> localVarHeaderParams = new HashMap<>();

    final Collection<String> localVarAccepts = Arrays.asList("application/json");

    final Collection<String> localVarContentTypes = Arrays.asList("application/json");

    final Collection<String> localVarAuthNames = Arrays.asList("Basic", "oAuth2");
    final String serializedBody = mapper.serialize(localVarContentTypes, contactDto);

    return new HttpRequest(
        localVarPath,
        HttpMethod.PATCH,
        localVarQueryParams,
        serializedBody,
        localVarHeaderParams,
        localVarAccepts,
        localVarContentTypes,
        localVarAuthNames);
  }
}
