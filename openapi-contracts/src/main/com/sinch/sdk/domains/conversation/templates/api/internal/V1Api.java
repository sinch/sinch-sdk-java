/*
 * Template Management API
 *
 * OpenAPI document version: 457aacb5
 * Contact: support@sinch.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

package com.sinch.sdk.domains.conversation.templates.api.internal;

import com.fasterxml.jackson.core.type.TypeReference;
import com.sinch.sdk.core.exceptions.ApiException;
import com.sinch.sdk.core.exceptions.ApiExceptionBuilder;
import com.sinch.sdk.core.http.AuthManager;
import com.sinch.sdk.core.http.HttpClient;
import com.sinch.sdk.core.http.HttpMapper;
import com.sinch.sdk.core.http.HttpMethod;
import com.sinch.sdk.core.http.HttpRequest;
import com.sinch.sdk.core.http.HttpResponse;
import com.sinch.sdk.core.http.HttpStatus;
import com.sinch.sdk.core.http.URLParameter;
import com.sinch.sdk.core.http.URLPathUtils;
import com.sinch.sdk.core.models.ServerConfiguration;
import com.sinch.sdk.domains.conversation.templates.models.v1.TemplateV1;
import com.sinch.sdk.domains.conversation.templates.models.v1.internal.V1ListTemplatesResponseInternal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Logger;

public class V1Api {

  private static final Logger LOGGER = Logger.getLogger(V1Api.class.getName());
  private HttpClient httpClient;
  private ServerConfiguration serverConfiguration;
  private Map<String, AuthManager> authManagersByOasSecuritySchemes;
  private HttpMapper mapper;

  public V1Api(
      HttpClient httpClient,
      ServerConfiguration serverConfiguration,
      Map<String, AuthManager> authManagersByOasSecuritySchemes,
      HttpMapper mapper) {
    this.httpClient = httpClient;
    this.serverConfiguration = serverConfiguration;
    this.authManagersByOasSecuritySchemes = authManagersByOasSecuritySchemes;
    this.mapper = mapper;
  }

  /**
   * Creates a template
   *
   * @param projectId Required. The project ID. (required)
   * @param templateV1 Required. The template to create. (required)
   * @return TemplateV1
   * @throws ApiException if fails to make API call
   */
  public TemplateV1 templatesCreateTemplate(String projectId, TemplateV1 templateV1)
      throws ApiException {

    LOGGER.finest(
        "[templatesCreateTemplate]"
            + " "
            + "projectId: "
            + projectId
            + ", "
            + "templateV1: "
            + templateV1);

    HttpRequest httpRequest = templatesCreateTemplateRequestBuilder(projectId, templateV1);
    HttpResponse response =
        httpClient.invokeAPI(
            this.serverConfiguration, this.authManagersByOasSecuritySchemes, httpRequest);

    if (HttpStatus.isSuccessfulStatus(response.getCode())) {
      TypeReference<TemplateV1> localVarReturnType = new TypeReference<TemplateV1>() {};
      return mapper.deserialize(response, localVarReturnType);
    }
    // fallback to default errors handling:
    // all error cases definition are not required from specs: will try some "hardcoded" content
    // parsing
    throw ApiExceptionBuilder.build(
        response.getMessage(),
        response.getCode(),
        mapper.deserialize(response, new TypeReference<HashMap<String, ?>>() {}));
  }

  private HttpRequest templatesCreateTemplateRequestBuilder(String projectId, TemplateV1 templateV1)
      throws ApiException {
    // verify the required parameter 'projectId' is set
    if (projectId == null) {
      throw new ApiException(
          400, "Missing the required parameter 'projectId' when calling templatesCreateTemplate");
    }
    // verify the required parameter 'templateV1' is set
    if (templateV1 == null) {
      throw new ApiException(
          400, "Missing the required parameter 'templateV1' when calling templatesCreateTemplate");
    }

    String localVarPath =
        "/v1/projects/{project_id}/templates"
            .replaceAll(
                "\\{" + "project_id" + "\\}", URLPathUtils.encodePathSegment(projectId.toString()));

    List<URLParameter> localVarQueryParams = new ArrayList<>();

    Map<String, String> localVarHeaderParams = new HashMap<>();

    final Collection<String> localVarAccepts = Arrays.asList("application/json");

    final Collection<String> localVarContentTypes = Arrays.asList("application/json");

    final Collection<String> localVarAuthNames = Arrays.asList("Basic", "oAuth2");
    final String serializedBody = mapper.serialize(localVarContentTypes, templateV1);

    return new HttpRequest(
        localVarPath,
        HttpMethod.POST,
        localVarQueryParams,
        serializedBody,
        localVarHeaderParams,
        localVarAccepts,
        localVarContentTypes,
        localVarAuthNames);
  }

  /**
   * Delete a template.
   *
   * @param projectId Required. The project ID. (required)
   * @param templateId Required. The ID of the template to fetch. (required)
   * @return Object
   * @throws ApiException if fails to make API call
   */
  public Object templatesDeleteTemplate(String projectId, String templateId) throws ApiException {

    LOGGER.finest(
        "[templatesDeleteTemplate]"
            + " "
            + "projectId: "
            + projectId
            + ", "
            + "templateId: "
            + templateId);

    HttpRequest httpRequest = templatesDeleteTemplateRequestBuilder(projectId, templateId);
    HttpResponse response =
        httpClient.invokeAPI(
            this.serverConfiguration, this.authManagersByOasSecuritySchemes, httpRequest);

    if (HttpStatus.isSuccessfulStatus(response.getCode())) {
      TypeReference<Object> localVarReturnType = new TypeReference<Object>() {};
      return mapper.deserialize(response, localVarReturnType);
    }
    // fallback to default errors handling:
    // all error cases definition are not required from specs: will try some "hardcoded" content
    // parsing
    throw ApiExceptionBuilder.build(
        response.getMessage(),
        response.getCode(),
        mapper.deserialize(response, new TypeReference<HashMap<String, ?>>() {}));
  }

  private HttpRequest templatesDeleteTemplateRequestBuilder(String projectId, String templateId)
      throws ApiException {
    // verify the required parameter 'projectId' is set
    if (projectId == null) {
      throw new ApiException(
          400, "Missing the required parameter 'projectId' when calling templatesDeleteTemplate");
    }
    // verify the required parameter 'templateId' is set
    if (templateId == null) {
      throw new ApiException(
          400, "Missing the required parameter 'templateId' when calling templatesDeleteTemplate");
    }

    String localVarPath =
        "/v1/projects/{project_id}/templates/{template_id}"
            .replaceAll(
                "\\{" + "project_id" + "\\}", URLPathUtils.encodePathSegment(projectId.toString()))
            .replaceAll(
                "\\{" + "template_id" + "\\}",
                URLPathUtils.encodePathSegment(templateId.toString()));

    List<URLParameter> localVarQueryParams = new ArrayList<>();

    Map<String, String> localVarHeaderParams = new HashMap<>();

    final Collection<String> localVarAccepts = Arrays.asList("application/json");

    final Collection<String> localVarContentTypes = Arrays.asList();

    final Collection<String> localVarAuthNames = Arrays.asList("Basic", "oAuth2");
    final String serializedBody = null;

    return new HttpRequest(
        localVarPath,
        HttpMethod.DELETE,
        localVarQueryParams,
        serializedBody,
        localVarHeaderParams,
        localVarAccepts,
        localVarContentTypes,
        localVarAuthNames);
  }

  /**
   * Get a template
   *
   * @param projectId Required. The project ID. (required)
   * @param templateId Required. The ID of the template to fetch. (required)
   * @return TemplateV1
   * @throws ApiException if fails to make API call
   */
  public TemplateV1 templatesGetTemplate(String projectId, String templateId) throws ApiException {

    LOGGER.finest(
        "[templatesGetTemplate]"
            + " "
            + "projectId: "
            + projectId
            + ", "
            + "templateId: "
            + templateId);

    HttpRequest httpRequest = templatesGetTemplateRequestBuilder(projectId, templateId);
    HttpResponse response =
        httpClient.invokeAPI(
            this.serverConfiguration, this.authManagersByOasSecuritySchemes, httpRequest);

    if (HttpStatus.isSuccessfulStatus(response.getCode())) {
      TypeReference<TemplateV1> localVarReturnType = new TypeReference<TemplateV1>() {};
      return mapper.deserialize(response, localVarReturnType);
    }
    // fallback to default errors handling:
    // all error cases definition are not required from specs: will try some "hardcoded" content
    // parsing
    throw ApiExceptionBuilder.build(
        response.getMessage(),
        response.getCode(),
        mapper.deserialize(response, new TypeReference<HashMap<String, ?>>() {}));
  }

  private HttpRequest templatesGetTemplateRequestBuilder(String projectId, String templateId)
      throws ApiException {
    // verify the required parameter 'projectId' is set
    if (projectId == null) {
      throw new ApiException(
          400, "Missing the required parameter 'projectId' when calling templatesGetTemplate");
    }
    // verify the required parameter 'templateId' is set
    if (templateId == null) {
      throw new ApiException(
          400, "Missing the required parameter 'templateId' when calling templatesGetTemplate");
    }

    String localVarPath =
        "/v1/projects/{project_id}/templates/{template_id}"
            .replaceAll(
                "\\{" + "project_id" + "\\}", URLPathUtils.encodePathSegment(projectId.toString()))
            .replaceAll(
                "\\{" + "template_id" + "\\}",
                URLPathUtils.encodePathSegment(templateId.toString()));

    List<URLParameter> localVarQueryParams = new ArrayList<>();

    Map<String, String> localVarHeaderParams = new HashMap<>();

    final Collection<String> localVarAccepts = Arrays.asList("application/json");

    final Collection<String> localVarContentTypes = Arrays.asList();

    final Collection<String> localVarAuthNames = Arrays.asList("Basic", "oAuth2");
    final String serializedBody = null;

    return new HttpRequest(
        localVarPath,
        HttpMethod.GET,
        localVarQueryParams,
        serializedBody,
        localVarHeaderParams,
        localVarAccepts,
        localVarContentTypes,
        localVarAuthNames);
  }

  /**
   * List all templates belonging to a project ID.
   *
   * @param projectId Required. The project ID. (required)
   * @return V1ListTemplatesResponseInternal
   * @throws ApiException if fails to make API call
   */
  public V1ListTemplatesResponseInternal templatesListTemplates(String projectId)
      throws ApiException {

    LOGGER.finest("[templatesListTemplates]" + " " + "projectId: " + projectId);

    HttpRequest httpRequest = templatesListTemplatesRequestBuilder(projectId);
    HttpResponse response =
        httpClient.invokeAPI(
            this.serverConfiguration, this.authManagersByOasSecuritySchemes, httpRequest);

    if (HttpStatus.isSuccessfulStatus(response.getCode())) {
      TypeReference<V1ListTemplatesResponseInternal> localVarReturnType =
          new TypeReference<V1ListTemplatesResponseInternal>() {};
      return mapper.deserialize(response, localVarReturnType);
    }
    // fallback to default errors handling:
    // all error cases definition are not required from specs: will try some "hardcoded" content
    // parsing
    throw ApiExceptionBuilder.build(
        response.getMessage(),
        response.getCode(),
        mapper.deserialize(response, new TypeReference<HashMap<String, ?>>() {}));
  }

  private HttpRequest templatesListTemplatesRequestBuilder(String projectId) throws ApiException {
    // verify the required parameter 'projectId' is set
    if (projectId == null) {
      throw new ApiException(
          400, "Missing the required parameter 'projectId' when calling templatesListTemplates");
    }

    String localVarPath =
        "/v1/projects/{project_id}/templates"
            .replaceAll(
                "\\{" + "project_id" + "\\}", URLPathUtils.encodePathSegment(projectId.toString()));

    List<URLParameter> localVarQueryParams = new ArrayList<>();

    Map<String, String> localVarHeaderParams = new HashMap<>();

    final Collection<String> localVarAccepts = Arrays.asList("application/json");

    final Collection<String> localVarContentTypes = Arrays.asList();

    final Collection<String> localVarAuthNames = Arrays.asList("Basic", "oAuth2");
    final String serializedBody = null;

    return new HttpRequest(
        localVarPath,
        HttpMethod.GET,
        localVarQueryParams,
        serializedBody,
        localVarHeaderParams,
        localVarAccepts,
        localVarContentTypes,
        localVarAuthNames);
  }

  /**
   * Updates a template.
   *
   * @param projectId Required. The project ID. (required)
   * @param templateId The id of the template to be updated. Specified or automatically generated
   *     during template creation. Unique per project. (required)
   * @param templateV1 Required. The updated template. (required)
   * @param updateMask The set of field mask paths. (optional
   * @return TemplateV1
   * @throws ApiException if fails to make API call
   */
  public TemplateV1 templatesUpdateTemplate(
      String projectId, String templateId, TemplateV1 templateV1, List<String> updateMask)
      throws ApiException {

    LOGGER.finest(
        "[templatesUpdateTemplate]"
            + " "
            + "projectId: "
            + projectId
            + ", "
            + "templateId: "
            + templateId
            + ", "
            + "templateV1: "
            + templateV1
            + ", "
            + "updateMask: "
            + updateMask);

    HttpRequest httpRequest =
        templatesUpdateTemplateRequestBuilder(projectId, templateId, templateV1, updateMask);
    HttpResponse response =
        httpClient.invokeAPI(
            this.serverConfiguration, this.authManagersByOasSecuritySchemes, httpRequest);

    if (HttpStatus.isSuccessfulStatus(response.getCode())) {
      TypeReference<TemplateV1> localVarReturnType = new TypeReference<TemplateV1>() {};
      return mapper.deserialize(response, localVarReturnType);
    }
    // fallback to default errors handling:
    // all error cases definition are not required from specs: will try some "hardcoded" content
    // parsing
    throw ApiExceptionBuilder.build(
        response.getMessage(),
        response.getCode(),
        mapper.deserialize(response, new TypeReference<HashMap<String, ?>>() {}));
  }

  private HttpRequest templatesUpdateTemplateRequestBuilder(
      String projectId, String templateId, TemplateV1 templateV1, List<String> updateMask)
      throws ApiException {
    // verify the required parameter 'projectId' is set
    if (projectId == null) {
      throw new ApiException(
          400, "Missing the required parameter 'projectId' when calling templatesUpdateTemplate");
    }
    // verify the required parameter 'templateId' is set
    if (templateId == null) {
      throw new ApiException(
          400, "Missing the required parameter 'templateId' when calling templatesUpdateTemplate");
    }
    // verify the required parameter 'templateV1' is set
    if (templateV1 == null) {
      throw new ApiException(
          400, "Missing the required parameter 'templateV1' when calling templatesUpdateTemplate");
    }

    String localVarPath =
        "/v1/projects/{project_id}/templates/{template_id}"
            .replaceAll(
                "\\{" + "project_id" + "\\}", URLPathUtils.encodePathSegment(projectId.toString()))
            .replaceAll(
                "\\{" + "template_id" + "\\}",
                URLPathUtils.encodePathSegment(templateId.toString()));

    List<URLParameter> localVarQueryParams = new ArrayList<>();

    if (null != updateMask) {
      localVarQueryParams.add(
          new URLParameter(
              "update_mask", updateMask, URLParameter.STYLE.valueOf("form".toUpperCase()), true));
    }

    Map<String, String> localVarHeaderParams = new HashMap<>();

    final Collection<String> localVarAccepts = Arrays.asList("application/json");

    final Collection<String> localVarContentTypes = Arrays.asList("application/json");

    final Collection<String> localVarAuthNames = Arrays.asList("Basic", "oAuth2");
    final String serializedBody = mapper.serialize(localVarContentTypes, templateV1);

    return new HttpRequest(
        localVarPath,
        HttpMethod.PATCH,
        localVarQueryParams,
        serializedBody,
        localVarHeaderParams,
        localVarAccepts,
        localVarContentTypes,
        localVarAuthNames);
  }
}
