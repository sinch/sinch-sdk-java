/*
 * Conversation API | Sinch
 * Send and receive messages globally over SMS, RCS, WhatsApp, Viber Business, Facebook messenger and other popular channels using the Sinch Conversation API.  The Conversation API endpoint uses built-in transcoding to give you the power of conversation across all supported channels and, if required, full control over channel specific features.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@sinch.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.sinch.sdk.domains.conversation.models.dto.v1;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFilter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/** Represents a destination for receiving callbacks from the Conversation API. */
@JsonPropertyOrder({
  WebhookDto.JSON_PROPERTY_APP_ID,
  WebhookDto.JSON_PROPERTY_TARGET,
  WebhookDto.JSON_PROPERTY_TRIGGERS,
  WebhookDto.JSON_PROPERTY_CLIENT_CREDENTIALS,
  WebhookDto.JSON_PROPERTY_ID,
  WebhookDto.JSON_PROPERTY_SECRET,
  WebhookDto.JSON_PROPERTY_TARGET_TYPE
})
@JsonFilter("uninitializedFilter")
@JsonInclude(value = JsonInclude.Include.CUSTOM)
public class WebhookDto {
  private static final long serialVersionUID = 1L;
  public static final String JSON_PROPERTY_APP_ID = "app_id";
  private String appId;
  private boolean appIdDefined = false;

  public static final String JSON_PROPERTY_TARGET = "target";
  private String target;
  private boolean targetDefined = false;

  public static final String JSON_PROPERTY_TRIGGERS = "triggers";
  private List<WebhookTriggerDto> triggers;
  private boolean triggersDefined = false;

  public static final String JSON_PROPERTY_CLIENT_CREDENTIALS = "client_credentials";
  private ClientCredentialsDto clientCredentials;
  private boolean clientCredentialsDefined = false;

  public static final String JSON_PROPERTY_ID = "id";
  private String id;
  private boolean idDefined = false;

  public static final String JSON_PROPERTY_SECRET = "secret";
  private String secret;
  private boolean secretDefined = false;

  public static final String JSON_PROPERTY_TARGET_TYPE = "target_type";
  private WebhookTargetTypeDto targetType;
  private boolean targetTypeDefined = false;

  public WebhookDto() {}

  @JsonCreator
  public WebhookDto(@JsonProperty(JSON_PROPERTY_ID) String id) {
    this();
    this.id = id;
    this.idDefined = true;
  }

  public WebhookDto appId(String appId) {
    this.appId = appId;
    this.appIdDefined = true;
    return this;
  }

  /**
   * The app that this webhook belongs to.
   *
   * @return appId
   */
  @JsonProperty(JSON_PROPERTY_APP_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getAppId() {
    return appId;
  }

  @JsonIgnore
  public boolean getAppIdDefined() {
    return appIdDefined;
  }

  @JsonProperty(JSON_PROPERTY_APP_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAppId(String appId) {
    this.appId = appId;
    this.appIdDefined = true;
  }

  public WebhookDto target(String target) {
    this.target = target;
    this.targetDefined = true;
    return this;
  }

  /**
   * The target url where events should be sent to. Maximum URL length is 742. The
   * conversation-api.*.sinch.com subdomains are forbidden.
   *
   * @return target
   */
  @JsonProperty(JSON_PROPERTY_TARGET)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getTarget() {
    return target;
  }

  @JsonIgnore
  public boolean getTargetDefined() {
    return targetDefined;
  }

  @JsonProperty(JSON_PROPERTY_TARGET)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTarget(String target) {
    this.target = target;
    this.targetDefined = true;
  }

  public WebhookDto triggers(List<WebhookTriggerDto> triggers) {
    this.triggers = triggers;
    this.triggersDefined = true;
    return this;
  }

  public WebhookDto addTriggersItem(WebhookTriggerDto triggersItem) {
    if (this.triggers == null) {
      this.triggers = new ArrayList<>();
    }
    this.triggersDefined = true;
    this.triggers.add(triggersItem);
    return this;
  }

  /**
   * An array of triggers that should trigger the webhook and result in an event being sent to the
   * target url. Refer to the list of [Webhook
   * Triggers](/docs/conversation/callbacks#webhook-triggers) for a complete list.
   *
   * @return triggers
   */
  @JsonProperty(JSON_PROPERTY_TRIGGERS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public List<WebhookTriggerDto> getTriggers() {
    return triggers;
  }

  @JsonIgnore
  public boolean getTriggersDefined() {
    return triggersDefined;
  }

  @JsonProperty(JSON_PROPERTY_TRIGGERS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTriggers(List<WebhookTriggerDto> triggers) {
    this.triggers = triggers;
    this.triggersDefined = true;
  }

  public WebhookDto clientCredentials(ClientCredentialsDto clientCredentials) {
    this.clientCredentials = clientCredentials;
    this.clientCredentialsDefined = true;
    return this;
  }

  /**
   * Get clientCredentials
   *
   * @return clientCredentials
   */
  @JsonProperty(JSON_PROPERTY_CLIENT_CREDENTIALS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public ClientCredentialsDto getClientCredentials() {
    return clientCredentials;
  }

  @JsonIgnore
  public boolean getClientCredentialsDefined() {
    return clientCredentialsDefined;
  }

  @JsonProperty(JSON_PROPERTY_CLIENT_CREDENTIALS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setClientCredentials(ClientCredentialsDto clientCredentials) {
    this.clientCredentials = clientCredentials;
    this.clientCredentialsDefined = true;
  }

  /**
   * The ID of the webhook.
   *
   * @return id
   */
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getId() {
    return id;
  }

  @JsonIgnore
  public boolean getIdDefined() {
    return idDefined;
  }

  public WebhookDto secret(String secret) {
    this.secret = secret;
    this.secretDefined = true;
    return this;
  }

  /**
   * Optional secret be used to sign contents of webhooks sent by the Conversation API. You can then
   * use the secret to verify the signature.
   *
   * @return secret
   */
  @JsonProperty(JSON_PROPERTY_SECRET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getSecret() {
    return secret;
  }

  @JsonIgnore
  public boolean getSecretDefined() {
    return secretDefined;
  }

  @JsonProperty(JSON_PROPERTY_SECRET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSecret(String secret) {
    this.secret = secret;
    this.secretDefined = true;
  }

  public WebhookDto targetType(WebhookTargetTypeDto targetType) {
    this.targetType = targetType;
    this.targetTypeDefined = true;
    return this;
  }

  /**
   * Get targetType
   *
   * @return targetType
   */
  @JsonProperty(JSON_PROPERTY_TARGET_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public WebhookTargetTypeDto getTargetType() {
    return targetType;
  }

  @JsonIgnore
  public boolean getTargetTypeDefined() {
    return targetTypeDefined;
  }

  @JsonProperty(JSON_PROPERTY_TARGET_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTargetType(WebhookTargetTypeDto targetType) {
    this.targetType = targetType;
    this.targetTypeDefined = true;
  }

  /** Return true if this Webhook object is equal to o. */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WebhookDto webhook = (WebhookDto) o;
    return Objects.equals(this.appId, webhook.appId)
        && Objects.equals(this.target, webhook.target)
        && Objects.equals(this.triggers, webhook.triggers)
        && Objects.equals(this.clientCredentials, webhook.clientCredentials)
        && Objects.equals(this.id, webhook.id)
        && Objects.equals(this.secret, webhook.secret)
        && Objects.equals(this.targetType, webhook.targetType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appId, target, triggers, clientCredentials, id, secret, targetType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WebhookDto {\n");
    sb.append("    appId: ").append(toIndentedString(appId)).append("\n");
    sb.append("    target: ").append(toIndentedString(target)).append("\n");
    sb.append("    triggers: ").append(toIndentedString(triggers)).append("\n");
    sb.append("    clientCredentials: ").append(toIndentedString(clientCredentials)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    secret: ").append(toIndentedString(secret)).append("\n");
    sb.append("    targetType: ").append(toIndentedString(targetType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
