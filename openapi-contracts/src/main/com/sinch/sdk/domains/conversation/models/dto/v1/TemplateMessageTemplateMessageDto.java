/*
 * Conversation API | Sinch
 * Send and receive messages globally over SMS, RCS, WhatsApp, Viber Business, Facebook messenger and other popular channels using the Sinch Conversation API.  The Conversation API endpoint uses built-in transcoding to give you the power of conversation across all supported channels and, if required, full control over channel specific features.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@sinch.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.sinch.sdk.domains.conversation.models.dto.v1;

import com.fasterxml.jackson.annotation.JsonFilter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

/** TemplateMessageTemplateMessageDto */
@JsonPropertyOrder({
  TemplateMessageTemplateMessageDto.JSON_PROPERTY_CHANNEL_TEMPLATE,
  TemplateMessageTemplateMessageDto.JSON_PROPERTY_OMNI_TEMPLATE
})
@JsonFilter("uninitializedFilter")
@JsonInclude(value = JsonInclude.Include.CUSTOM)
public class TemplateMessageTemplateMessageDto {
  public static final String JSON_PROPERTY_CHANNEL_TEMPLATE = "channel_template";
  private Map<String, TemplateReferenceDto> channelTemplate;
  private boolean channelTemplateDefined = false;

  public static final String JSON_PROPERTY_OMNI_TEMPLATE = "omni_template";
  private TemplateReferenceDto omniTemplate;
  private boolean omniTemplateDefined = false;

  public TemplateMessageTemplateMessageDto() {}

  public TemplateMessageTemplateMessageDto channelTemplate(
      Map<String, TemplateReferenceDto> channelTemplate) {
    this.channelTemplate = channelTemplate;
    this.channelTemplateDefined = true;
    return this;
  }

  public TemplateMessageTemplateMessageDto putChannelTemplateItem(
      String key, TemplateReferenceDto channelTemplateItem) {
    if (this.channelTemplate == null) {
      this.channelTemplate = new HashMap<>();
    }
    this.channelTemplateDefined = true;
    this.channelTemplate.put(key, channelTemplateItem);
    return this;
  }

  /**
   * Optional. Channel specific template reference with parameters per channel. The channel template
   * if exists overrides the omnichannel template. At least one of &#x60;channel_template&#x60; or
   * &#x60;omni_template&#x60; needs to be present. The key in the map must point to a valid
   * conversation channel as defined by the enum ConversationChannel.
   *
   * @return channelTemplate
   */
  @JsonProperty(JSON_PROPERTY_CHANNEL_TEMPLATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Map<String, TemplateReferenceDto> getChannelTemplate() {
    return channelTemplate;
  }

  @JsonIgnore
  public boolean getChannelTemplateDefined() {
    return channelTemplateDefined;
  }

  @JsonProperty(JSON_PROPERTY_CHANNEL_TEMPLATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setChannelTemplate(Map<String, TemplateReferenceDto> channelTemplate) {
    this.channelTemplate = channelTemplate;
    this.channelTemplateDefined = true;
  }

  public TemplateMessageTemplateMessageDto omniTemplate(TemplateReferenceDto omniTemplate) {
    this.omniTemplate = omniTemplate;
    this.omniTemplateDefined = true;
    return this;
  }

  /**
   * Get omniTemplate
   *
   * @return omniTemplate
   */
  @JsonProperty(JSON_PROPERTY_OMNI_TEMPLATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public TemplateReferenceDto getOmniTemplate() {
    return omniTemplate;
  }

  @JsonIgnore
  public boolean getOmniTemplateDefined() {
    return omniTemplateDefined;
  }

  @JsonProperty(JSON_PROPERTY_OMNI_TEMPLATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOmniTemplate(TemplateReferenceDto omniTemplate) {
    this.omniTemplate = omniTemplate;
    this.omniTemplateDefined = true;
  }

  /** Return true if this TemplateMessage_template_message object is equal to o. */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TemplateMessageTemplateMessageDto templateMessageTemplateMessage =
        (TemplateMessageTemplateMessageDto) o;
    return Objects.equals(this.channelTemplate, templateMessageTemplateMessage.channelTemplate)
        && Objects.equals(this.omniTemplate, templateMessageTemplateMessage.omniTemplate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(channelTemplate, omniTemplate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TemplateMessageTemplateMessageDto {\n");
    sb.append("    channelTemplate: ").append(toIndentedString(channelTemplate)).append("\n");
    sb.append("    omniTemplate: ").append(toIndentedString(omniTemplate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
