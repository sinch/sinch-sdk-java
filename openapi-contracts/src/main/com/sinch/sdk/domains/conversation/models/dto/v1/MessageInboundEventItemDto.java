/*
 * Conversation API | Sinch
 * Send and receive messages globally over SMS, RCS, WhatsApp, Viber Business, Facebook messenger and other popular channels using the Sinch Conversation API.  The Conversation API endpoint uses built-in transcoding to give you the power of conversation across all supported channels and, if required, full control over channel specific features.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@sinch.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.sinch.sdk.domains.conversation.models.dto.v1;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFilter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonValue;
import java.time.LocalDate;
import java.util.Objects;

/** MessageInboundEventItemDto */
@JsonPropertyOrder({
  MessageInboundEventItemDto.JSON_PROPERTY_ID,
  MessageInboundEventItemDto.JSON_PROPERTY_DIRECTION,
  MessageInboundEventItemDto.JSON_PROPERTY_CONTACT_MESSAGE,
  MessageInboundEventItemDto.JSON_PROPERTY_CHANNEL_IDENTITY,
  MessageInboundEventItemDto.JSON_PROPERTY_CONVERSATION_ID,
  MessageInboundEventItemDto.JSON_PROPERTY_CONTACT_ID,
  MessageInboundEventItemDto.JSON_PROPERTY_METADATA,
  MessageInboundEventItemDto.JSON_PROPERTY_ACCEPT_TIME,
  MessageInboundEventItemDto.JSON_PROPERTY_SENDER_ID,
  MessageInboundEventItemDto.JSON_PROPERTY_PROCESSING_MODE,
  MessageInboundEventItemDto.JSON_PROPERTY_INJECTED
})
@JsonFilter("uninitializedFilter")
@JsonInclude(value = JsonInclude.Include.CUSTOM)
public class MessageInboundEventItemDto {
  private static final long serialVersionUID = 1L;
  public static final String JSON_PROPERTY_ID = "id";
  private String id;
  private boolean idDefined = false;

  /** The direction of the message, it&#39;s always TO_APP for contact messages. */
  public enum DirectionEnum {
    TO_APP("TO_APP"),

    UNKNOWN_DEFAULT_OPEN_API("unknown_default_open_api");

    private String value;

    DirectionEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static DirectionEnum fromValue(String value) {
      for (DirectionEnum b : DirectionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return UNKNOWN_DEFAULT_OPEN_API;
    }
  }

  public static final String JSON_PROPERTY_DIRECTION = "direction";
  private String direction;
  private boolean directionDefined = false;

  public static final String JSON_PROPERTY_CONTACT_MESSAGE = "contact_message";
  private ContactMessageDto contactMessage;
  private boolean contactMessageDefined = false;

  public static final String JSON_PROPERTY_CHANNEL_IDENTITY = "channel_identity";
  private ChannelIdentityDto channelIdentity;
  private boolean channelIdentityDefined = false;

  public static final String JSON_PROPERTY_CONVERSATION_ID = "conversation_id";
  private String conversationId;
  private boolean conversationIdDefined = false;

  public static final String JSON_PROPERTY_CONTACT_ID = "contact_id";
  private String contactId;
  private boolean contactIdDefined = false;

  public static final String JSON_PROPERTY_METADATA = "metadata";
  private String metadata;
  private boolean metadataDefined = false;

  public static final String JSON_PROPERTY_ACCEPT_TIME = "accept_time";
  private LocalDate acceptTime;
  private boolean acceptTimeDefined = false;

  public static final String JSON_PROPERTY_SENDER_ID = "sender_id";
  private String senderId;
  private boolean senderIdDefined = false;

  public static final String JSON_PROPERTY_PROCESSING_MODE = "processing_mode";
  private ProcessingModeDto processingMode;
  private boolean processingModeDefined = false;

  public static final String JSON_PROPERTY_INJECTED = "injected";
  private Boolean injected;
  private boolean injectedDefined = false;

  public MessageInboundEventItemDto() {}

  public MessageInboundEventItemDto id(String id) {
    this.id = id;
    this.idDefined = true;
    return this;
  }

  /**
   * The message ID.
   *
   * @return id
   */
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getId() {
    return id;
  }

  @JsonIgnore
  public boolean getIdDefined() {
    return idDefined;
  }

  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(String id) {
    this.id = id;
    this.idDefined = true;
  }

  public MessageInboundEventItemDto direction(String direction) {
    this.direction = direction;
    this.directionDefined = true;
    return this;
  }

  /**
   * The direction of the message, it&#39;s always TO_APP for contact messages.
   *
   * @return direction
   */
  @JsonProperty(JSON_PROPERTY_DIRECTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getDirection() {
    return direction;
  }

  @JsonIgnore
  public boolean getDirectionDefined() {
    return directionDefined;
  }

  @JsonProperty(JSON_PROPERTY_DIRECTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDirection(String direction) {
    this.direction = direction;
    this.directionDefined = true;
  }

  public MessageInboundEventItemDto contactMessage(ContactMessageDto contactMessage) {
    this.contactMessage = contactMessage;
    this.contactMessageDefined = true;
    return this;
  }

  /**
   * Get contactMessage
   *
   * @return contactMessage
   */
  @JsonProperty(JSON_PROPERTY_CONTACT_MESSAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public ContactMessageDto getContactMessage() {
    return contactMessage;
  }

  @JsonIgnore
  public boolean getContactMessageDefined() {
    return contactMessageDefined;
  }

  @JsonProperty(JSON_PROPERTY_CONTACT_MESSAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setContactMessage(ContactMessageDto contactMessage) {
    this.contactMessage = contactMessage;
    this.contactMessageDefined = true;
  }

  public MessageInboundEventItemDto channelIdentity(ChannelIdentityDto channelIdentity) {
    this.channelIdentity = channelIdentity;
    this.channelIdentityDefined = true;
    return this;
  }

  /**
   * Get channelIdentity
   *
   * @return channelIdentity
   */
  @JsonProperty(JSON_PROPERTY_CHANNEL_IDENTITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public ChannelIdentityDto getChannelIdentity() {
    return channelIdentity;
  }

  @JsonIgnore
  public boolean getChannelIdentityDefined() {
    return channelIdentityDefined;
  }

  @JsonProperty(JSON_PROPERTY_CHANNEL_IDENTITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setChannelIdentity(ChannelIdentityDto channelIdentity) {
    this.channelIdentity = channelIdentity;
    this.channelIdentityDefined = true;
  }

  public MessageInboundEventItemDto conversationId(String conversationId) {
    this.conversationId = conversationId;
    this.conversationIdDefined = true;
    return this;
  }

  /**
   * The ID of the conversation this message is part of. Will be empty if processing_mode is
   * DISPATCH.
   *
   * @return conversationId
   */
  @JsonProperty(JSON_PROPERTY_CONVERSATION_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getConversationId() {
    return conversationId;
  }

  @JsonIgnore
  public boolean getConversationIdDefined() {
    return conversationIdDefined;
  }

  @JsonProperty(JSON_PROPERTY_CONVERSATION_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setConversationId(String conversationId) {
    this.conversationId = conversationId;
    this.conversationIdDefined = true;
  }

  public MessageInboundEventItemDto contactId(String contactId) {
    this.contactId = contactId;
    this.contactIdDefined = true;
    return this;
  }

  /**
   * The ID of the contact. Will be empty if processing_mode is DISPATCH.
   *
   * @return contactId
   */
  @JsonProperty(JSON_PROPERTY_CONTACT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getContactId() {
    return contactId;
  }

  @JsonIgnore
  public boolean getContactIdDefined() {
    return contactIdDefined;
  }

  @JsonProperty(JSON_PROPERTY_CONTACT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setContactId(String contactId) {
    this.contactId = contactId;
    this.contactIdDefined = true;
  }

  public MessageInboundEventItemDto metadata(String metadata) {
    this.metadata = metadata;
    this.metadataDefined = true;
    return this;
  }

  /**
   * Usually, metadata specific to the underlying channel is provided in this field. Refer to the
   * individual channels&#39; documentation for more information (for example, SMS delivery
   * receipts). Note that, for Choice message responses, this field is populated with the value of
   * the message_metadata field of the corresponding Send message request.
   *
   * @return metadata
   */
  @JsonProperty(JSON_PROPERTY_METADATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getMetadata() {
    return metadata;
  }

  @JsonIgnore
  public boolean getMetadataDefined() {
    return metadataDefined;
  }

  @JsonProperty(JSON_PROPERTY_METADATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMetadata(String metadata) {
    this.metadata = metadata;
    this.metadataDefined = true;
  }

  public MessageInboundEventItemDto acceptTime(LocalDate acceptTime) {
    this.acceptTime = acceptTime;
    this.acceptTimeDefined = true;
    return this;
  }

  /**
   * Timestamp marking when the channel callback was received by the Conversation API.
   *
   * @return acceptTime
   */
  @JsonProperty(JSON_PROPERTY_ACCEPT_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public LocalDate getAcceptTime() {
    return acceptTime;
  }

  @JsonIgnore
  public boolean getAcceptTimeDefined() {
    return acceptTimeDefined;
  }

  @JsonProperty(JSON_PROPERTY_ACCEPT_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAcceptTime(LocalDate acceptTime) {
    this.acceptTime = acceptTime;
    this.acceptTimeDefined = true;
  }

  public MessageInboundEventItemDto senderId(String senderId) {
    this.senderId = senderId;
    this.senderIdDefined = true;
    return this;
  }

  /**
   * The sender ID to which the contact sent the message, if applicable. For example, originator
   * msisdn/short code for SMS and MMS.
   *
   * @return senderId
   */
  @JsonProperty(JSON_PROPERTY_SENDER_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getSenderId() {
    return senderId;
  }

  @JsonIgnore
  public boolean getSenderIdDefined() {
    return senderIdDefined;
  }

  @JsonProperty(JSON_PROPERTY_SENDER_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSenderId(String senderId) {
    this.senderId = senderId;
    this.senderIdDefined = true;
  }

  public MessageInboundEventItemDto processingMode(ProcessingModeDto processingMode) {
    this.processingMode = processingMode;
    this.processingModeDefined = true;
    return this;
  }

  /**
   * Get processingMode
   *
   * @return processingMode
   */
  @JsonProperty(JSON_PROPERTY_PROCESSING_MODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public ProcessingModeDto getProcessingMode() {
    return processingMode;
  }

  @JsonIgnore
  public boolean getProcessingModeDefined() {
    return processingModeDefined;
  }

  @JsonProperty(JSON_PROPERTY_PROCESSING_MODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProcessingMode(ProcessingModeDto processingMode) {
    this.processingMode = processingMode;
    this.processingModeDefined = true;
  }

  public MessageInboundEventItemDto injected(Boolean injected) {
    this.injected = injected;
    this.injectedDefined = true;
    return this;
  }

  /**
   * Flag for whether this message was injected.
   *
   * @return injected
   */
  @JsonProperty(JSON_PROPERTY_INJECTED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getInjected() {
    return injected;
  }

  @JsonIgnore
  public boolean getInjectedDefined() {
    return injectedDefined;
  }

  @JsonProperty(JSON_PROPERTY_INJECTED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInjected(Boolean injected) {
    this.injected = injected;
    this.injectedDefined = true;
  }

  /** Return true if this MessageInboundEventItem object is equal to o. */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MessageInboundEventItemDto messageInboundEventItem = (MessageInboundEventItemDto) o;
    return Objects.equals(this.id, messageInboundEventItem.id)
        && Objects.equals(this.direction, messageInboundEventItem.direction)
        && Objects.equals(this.contactMessage, messageInboundEventItem.contactMessage)
        && Objects.equals(this.channelIdentity, messageInboundEventItem.channelIdentity)
        && Objects.equals(this.conversationId, messageInboundEventItem.conversationId)
        && Objects.equals(this.contactId, messageInboundEventItem.contactId)
        && Objects.equals(this.metadata, messageInboundEventItem.metadata)
        && Objects.equals(this.acceptTime, messageInboundEventItem.acceptTime)
        && Objects.equals(this.senderId, messageInboundEventItem.senderId)
        && Objects.equals(this.processingMode, messageInboundEventItem.processingMode)
        && Objects.equals(this.injected, messageInboundEventItem.injected);
  }

  @Override
  public int hashCode() {
    return Objects.hash(
        id,
        direction,
        contactMessage,
        channelIdentity,
        conversationId,
        contactId,
        metadata,
        acceptTime,
        senderId,
        processingMode,
        injected);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MessageInboundEventItemDto {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    direction: ").append(toIndentedString(direction)).append("\n");
    sb.append("    contactMessage: ").append(toIndentedString(contactMessage)).append("\n");
    sb.append("    channelIdentity: ").append(toIndentedString(channelIdentity)).append("\n");
    sb.append("    conversationId: ").append(toIndentedString(conversationId)).append("\n");
    sb.append("    contactId: ").append(toIndentedString(contactId)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    acceptTime: ").append(toIndentedString(acceptTime)).append("\n");
    sb.append("    senderId: ").append(toIndentedString(senderId)).append("\n");
    sb.append("    processingMode: ").append(toIndentedString(processingMode)).append("\n");
    sb.append("    injected: ").append(toIndentedString(injected)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
