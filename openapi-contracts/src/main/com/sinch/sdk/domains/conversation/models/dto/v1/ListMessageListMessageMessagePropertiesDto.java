/*
 * Conversation API | Sinch
 * Send and receive messages globally over SMS, RCS, WhatsApp, Viber Business, Facebook messenger and other popular channels using the Sinch Conversation API.  The Conversation API endpoint uses built-in transcoding to give you the power of conversation across all supported channels and, if required, full control over channel specific features.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@sinch.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.sinch.sdk.domains.conversation.models.dto.v1;

import com.fasterxml.jackson.annotation.JsonFilter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import java.util.Objects;

/** Additional properties for the message. Required if sending a product list message. */
@JsonPropertyOrder({
  ListMessageListMessageMessagePropertiesDto.JSON_PROPERTY_CATALOG_ID,
  ListMessageListMessageMessagePropertiesDto.JSON_PROPERTY_MENU
})
@JsonFilter("uninitializedFilter")
@JsonInclude(value = JsonInclude.Include.CUSTOM)
public class ListMessageListMessageMessagePropertiesDto {
  private static final long serialVersionUID = 1L;
  public static final String JSON_PROPERTY_CATALOG_ID = "catalog_id";
  private String catalogId;
  private boolean catalogIdDefined = false;

  public static final String JSON_PROPERTY_MENU = "menu";
  private String menu;
  private boolean menuDefined = false;

  public ListMessageListMessageMessagePropertiesDto() {}

  public ListMessageListMessageMessagePropertiesDto catalogId(String catalogId) {
    this.catalogId = catalogId;
    this.catalogIdDefined = true;
    return this;
  }

  /**
   * Required if sending a product list message. The ID of the catalog to which the products belong.
   *
   * @return catalogId
   */
  @JsonProperty(JSON_PROPERTY_CATALOG_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getCatalogId() {
    return catalogId;
  }

  @JsonIgnore
  public boolean getCatalogIdDefined() {
    return catalogIdDefined;
  }

  @JsonProperty(JSON_PROPERTY_CATALOG_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCatalogId(String catalogId) {
    this.catalogId = catalogId;
    this.catalogIdDefined = true;
  }

  public ListMessageListMessageMessagePropertiesDto menu(String menu) {
    this.menu = menu;
    this.menuDefined = true;
    return this;
  }

  /**
   * Optional. Sets the text for the menu of a choice list message.
   *
   * @return menu
   */
  @JsonProperty(JSON_PROPERTY_MENU)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getMenu() {
    return menu;
  }

  @JsonIgnore
  public boolean getMenuDefined() {
    return menuDefined;
  }

  @JsonProperty(JSON_PROPERTY_MENU)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMenu(String menu) {
    this.menu = menu;
    this.menuDefined = true;
  }

  /** Return true if this ListMessage_list_message_message_properties object is equal to o. */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListMessageListMessageMessagePropertiesDto listMessageListMessageMessageProperties =
        (ListMessageListMessageMessagePropertiesDto) o;
    return Objects.equals(this.catalogId, listMessageListMessageMessageProperties.catalogId)
        && Objects.equals(this.menu, listMessageListMessageMessageProperties.menu);
  }

  @Override
  public int hashCode() {
    return Objects.hash(catalogId, menu);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListMessageListMessageMessagePropertiesDto {\n");
    sb.append("    catalogId: ").append(toIndentedString(catalogId)).append("\n");
    sb.append("    menu: ").append(toIndentedString(menu)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
