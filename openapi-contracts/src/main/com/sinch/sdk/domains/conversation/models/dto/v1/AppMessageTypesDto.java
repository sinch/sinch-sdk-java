/*
 * Conversation API | Sinch
 * Send and receive messages globally over SMS, RCS, WhatsApp, Viber Business, Facebook messenger and other popular channels using the Sinch Conversation API.  The Conversation API endpoint uses built-in transcoding to give you the power of conversation across all supported channels and, if required, full control over channel specific features.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@sinch.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.sinch.sdk.domains.conversation.models.dto.v1;

import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
import com.fasterxml.jackson.databind.ser.std.StdSerializer;
import com.sinch.sdk.core.models.AbstractOpenApiSchema;
import com.sinch.sdk.core.utils.databind.JSONNavigator;
import java.io.IOException;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;

@JsonDeserialize(using = AppMessageTypesDto.AppMessageTypesDtoDeserializer.class)
@JsonSerialize(using = AppMessageTypesDto.AppMessageTypesDtoSerializer.class)
public class AppMessageTypesDto extends AbstractOpenApiSchema {
  private static final Logger log = Logger.getLogger(AppMessageTypesDto.class.getName());

  public static class AppMessageTypesDtoSerializer extends StdSerializer<AppMessageTypesDto> {
    public AppMessageTypesDtoSerializer(Class<AppMessageTypesDto> t) {
      super(t);
    }

    public AppMessageTypesDtoSerializer() {
      this(null);
    }

    @Override
    public void serialize(AppMessageTypesDto value, JsonGenerator jgen, SerializerProvider provider)
        throws IOException, JsonProcessingException {
      jgen.writeObject(value.getActualInstance());
    }
  }

  public static class AppMessageTypesDtoDeserializer extends StdDeserializer<AppMessageTypesDto> {
    public AppMessageTypesDtoDeserializer() {
      this(AppMessageTypesDto.class);
    }

    public AppMessageTypesDtoDeserializer(Class<?> vc) {
      super(vc);
    }

    @Override
    public AppMessageTypesDto deserialize(JsonParser jp, DeserializationContext ctxt)
        throws IOException, JsonProcessingException {
      JsonNode tree = jp.readValueAsTree();
      Object deserialized = null;
      boolean typeCoercion = ctxt.isEnabled(MapperFeature.ALLOW_COERCION_OF_SCALARS);
      int match = 0;
      JsonToken token = tree.traverse(jp.getCodec()).nextToken();
      // deserialize CardMessageDto
      try {
        boolean attemptParsing = true;
        // ensure that we respect type coercion as set on the client ObjectMapper
        if (CardMessageDto.class.equals(Integer.class)
            || CardMessageDto.class.equals(Long.class)
            || CardMessageDto.class.equals(Float.class)
            || CardMessageDto.class.equals(Double.class)
            || CardMessageDto.class.equals(Boolean.class)
            || CardMessageDto.class.equals(String.class)) {
          attemptParsing = typeCoercion;
          if (!attemptParsing) {
            attemptParsing |=
                ((CardMessageDto.class.equals(Integer.class)
                        || CardMessageDto.class.equals(Long.class))
                    && token == JsonToken.VALUE_NUMBER_INT);
            attemptParsing |=
                ((CardMessageDto.class.equals(Float.class)
                        || CardMessageDto.class.equals(Double.class))
                    && token == JsonToken.VALUE_NUMBER_FLOAT);
            attemptParsing |=
                (CardMessageDto.class.equals(Boolean.class)
                    && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
            attemptParsing |=
                (CardMessageDto.class.equals(String.class) && token == JsonToken.VALUE_STRING);
          }
        }
        if (attemptParsing) {
          deserialized = tree.traverse(jp.getCodec()).readValueAs(CardMessageDto.class);
          // TODO: there is no validation against JSON schema constraints
          // (min, max, enum, pattern...), this does not perform a strict JSON
          // validation, which means the 'match' count may be higher than it should be.
          match++;
          log.log(Level.FINER, "Input data matches schema 'CardMessageDto'");
        }
      } catch (Exception e) {
        // deserialization failed, continue
        log.log(Level.FINER, "Input data does not match schema 'CardMessageDto'", e);
      }

      // deserialize CarouselMessageDto
      try {
        boolean attemptParsing = true;
        // ensure that we respect type coercion as set on the client ObjectMapper
        if (CarouselMessageDto.class.equals(Integer.class)
            || CarouselMessageDto.class.equals(Long.class)
            || CarouselMessageDto.class.equals(Float.class)
            || CarouselMessageDto.class.equals(Double.class)
            || CarouselMessageDto.class.equals(Boolean.class)
            || CarouselMessageDto.class.equals(String.class)) {
          attemptParsing = typeCoercion;
          if (!attemptParsing) {
            attemptParsing |=
                ((CarouselMessageDto.class.equals(Integer.class)
                        || CarouselMessageDto.class.equals(Long.class))
                    && token == JsonToken.VALUE_NUMBER_INT);
            attemptParsing |=
                ((CarouselMessageDto.class.equals(Float.class)
                        || CarouselMessageDto.class.equals(Double.class))
                    && token == JsonToken.VALUE_NUMBER_FLOAT);
            attemptParsing |=
                (CarouselMessageDto.class.equals(Boolean.class)
                    && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
            attemptParsing |=
                (CarouselMessageDto.class.equals(String.class) && token == JsonToken.VALUE_STRING);
          }
        }
        if (attemptParsing) {
          deserialized = tree.traverse(jp.getCodec()).readValueAs(CarouselMessageDto.class);
          // TODO: there is no validation against JSON schema constraints
          // (min, max, enum, pattern...), this does not perform a strict JSON
          // validation, which means the 'match' count may be higher than it should be.
          match++;
          log.log(Level.FINER, "Input data matches schema 'CarouselMessageDto'");
        }
      } catch (Exception e) {
        // deserialization failed, continue
        log.log(Level.FINER, "Input data does not match schema 'CarouselMessageDto'", e);
      }

      // deserialize ChoiceMessageDto
      try {
        boolean attemptParsing = true;
        // ensure that we respect type coercion as set on the client ObjectMapper
        if (ChoiceMessageDto.class.equals(Integer.class)
            || ChoiceMessageDto.class.equals(Long.class)
            || ChoiceMessageDto.class.equals(Float.class)
            || ChoiceMessageDto.class.equals(Double.class)
            || ChoiceMessageDto.class.equals(Boolean.class)
            || ChoiceMessageDto.class.equals(String.class)) {
          attemptParsing = typeCoercion;
          if (!attemptParsing) {
            attemptParsing |=
                ((ChoiceMessageDto.class.equals(Integer.class)
                        || ChoiceMessageDto.class.equals(Long.class))
                    && token == JsonToken.VALUE_NUMBER_INT);
            attemptParsing |=
                ((ChoiceMessageDto.class.equals(Float.class)
                        || ChoiceMessageDto.class.equals(Double.class))
                    && token == JsonToken.VALUE_NUMBER_FLOAT);
            attemptParsing |=
                (ChoiceMessageDto.class.equals(Boolean.class)
                    && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
            attemptParsing |=
                (ChoiceMessageDto.class.equals(String.class) && token == JsonToken.VALUE_STRING);
          }
        }
        if (attemptParsing) {
          deserialized = tree.traverse(jp.getCodec()).readValueAs(ChoiceMessageDto.class);
          // TODO: there is no validation against JSON schema constraints
          // (min, max, enum, pattern...), this does not perform a strict JSON
          // validation, which means the 'match' count may be higher than it should be.
          match++;
          log.log(Level.FINER, "Input data matches schema 'ChoiceMessageDto'");
        }
      } catch (Exception e) {
        // deserialization failed, continue
        log.log(Level.FINER, "Input data does not match schema 'ChoiceMessageDto'", e);
      }

      // deserialize ListMessageDto
      try {
        boolean attemptParsing = true;
        // ensure that we respect type coercion as set on the client ObjectMapper
        if (ListMessageDto.class.equals(Integer.class)
            || ListMessageDto.class.equals(Long.class)
            || ListMessageDto.class.equals(Float.class)
            || ListMessageDto.class.equals(Double.class)
            || ListMessageDto.class.equals(Boolean.class)
            || ListMessageDto.class.equals(String.class)) {
          attemptParsing = typeCoercion;
          if (!attemptParsing) {
            attemptParsing |=
                ((ListMessageDto.class.equals(Integer.class)
                        || ListMessageDto.class.equals(Long.class))
                    && token == JsonToken.VALUE_NUMBER_INT);
            attemptParsing |=
                ((ListMessageDto.class.equals(Float.class)
                        || ListMessageDto.class.equals(Double.class))
                    && token == JsonToken.VALUE_NUMBER_FLOAT);
            attemptParsing |=
                (ListMessageDto.class.equals(Boolean.class)
                    && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
            attemptParsing |=
                (ListMessageDto.class.equals(String.class) && token == JsonToken.VALUE_STRING);
          }
        }
        if (attemptParsing) {
          deserialized = tree.traverse(jp.getCodec()).readValueAs(ListMessageDto.class);
          // TODO: there is no validation against JSON schema constraints
          // (min, max, enum, pattern...), this does not perform a strict JSON
          // validation, which means the 'match' count may be higher than it should be.
          match++;
          log.log(Level.FINER, "Input data matches schema 'ListMessageDto'");
        }
      } catch (Exception e) {
        // deserialization failed, continue
        log.log(Level.FINER, "Input data does not match schema 'ListMessageDto'", e);
      }

      // deserialize LocationMessageDto
      try {
        boolean attemptParsing = true;
        // ensure that we respect type coercion as set on the client ObjectMapper
        if (LocationMessageDto.class.equals(Integer.class)
            || LocationMessageDto.class.equals(Long.class)
            || LocationMessageDto.class.equals(Float.class)
            || LocationMessageDto.class.equals(Double.class)
            || LocationMessageDto.class.equals(Boolean.class)
            || LocationMessageDto.class.equals(String.class)) {
          attemptParsing = typeCoercion;
          if (!attemptParsing) {
            attemptParsing |=
                ((LocationMessageDto.class.equals(Integer.class)
                        || LocationMessageDto.class.equals(Long.class))
                    && token == JsonToken.VALUE_NUMBER_INT);
            attemptParsing |=
                ((LocationMessageDto.class.equals(Float.class)
                        || LocationMessageDto.class.equals(Double.class))
                    && token == JsonToken.VALUE_NUMBER_FLOAT);
            attemptParsing |=
                (LocationMessageDto.class.equals(Boolean.class)
                    && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
            attemptParsing |=
                (LocationMessageDto.class.equals(String.class) && token == JsonToken.VALUE_STRING);
          }
        }
        if (attemptParsing) {
          deserialized = tree.traverse(jp.getCodec()).readValueAs(LocationMessageDto.class);
          // TODO: there is no validation against JSON schema constraints
          // (min, max, enum, pattern...), this does not perform a strict JSON
          // validation, which means the 'match' count may be higher than it should be.
          match++;
          log.log(Level.FINER, "Input data matches schema 'LocationMessageDto'");
        }
      } catch (Exception e) {
        // deserialization failed, continue
        log.log(Level.FINER, "Input data does not match schema 'LocationMessageDto'", e);
      }

      // deserialize MediaMessageDto
      try {
        boolean attemptParsing = true;
        // ensure that we respect type coercion as set on the client ObjectMapper
        if (MediaMessageDto.class.equals(Integer.class)
            || MediaMessageDto.class.equals(Long.class)
            || MediaMessageDto.class.equals(Float.class)
            || MediaMessageDto.class.equals(Double.class)
            || MediaMessageDto.class.equals(Boolean.class)
            || MediaMessageDto.class.equals(String.class)) {
          attemptParsing = typeCoercion;
          if (!attemptParsing) {
            attemptParsing |=
                ((MediaMessageDto.class.equals(Integer.class)
                        || MediaMessageDto.class.equals(Long.class))
                    && token == JsonToken.VALUE_NUMBER_INT);
            attemptParsing |=
                ((MediaMessageDto.class.equals(Float.class)
                        || MediaMessageDto.class.equals(Double.class))
                    && token == JsonToken.VALUE_NUMBER_FLOAT);
            attemptParsing |=
                (MediaMessageDto.class.equals(Boolean.class)
                    && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
            attemptParsing |=
                (MediaMessageDto.class.equals(String.class) && token == JsonToken.VALUE_STRING);
          }
        }
        if (attemptParsing) {
          deserialized = tree.traverse(jp.getCodec()).readValueAs(MediaMessageDto.class);
          // TODO: there is no validation against JSON schema constraints
          // (min, max, enum, pattern...), this does not perform a strict JSON
          // validation, which means the 'match' count may be higher than it should be.
          match++;
          log.log(Level.FINER, "Input data matches schema 'MediaMessageDto'");
        }
      } catch (Exception e) {
        // deserialization failed, continue
        log.log(Level.FINER, "Input data does not match schema 'MediaMessageDto'", e);
      }

      // deserialize TemplateMessageDto
      try {
        boolean attemptParsing = true;
        // ensure that we respect type coercion as set on the client ObjectMapper
        if (TemplateMessageDto.class.equals(Integer.class)
            || TemplateMessageDto.class.equals(Long.class)
            || TemplateMessageDto.class.equals(Float.class)
            || TemplateMessageDto.class.equals(Double.class)
            || TemplateMessageDto.class.equals(Boolean.class)
            || TemplateMessageDto.class.equals(String.class)) {
          attemptParsing = typeCoercion;
          if (!attemptParsing) {
            attemptParsing |=
                ((TemplateMessageDto.class.equals(Integer.class)
                        || TemplateMessageDto.class.equals(Long.class))
                    && token == JsonToken.VALUE_NUMBER_INT);
            attemptParsing |=
                ((TemplateMessageDto.class.equals(Float.class)
                        || TemplateMessageDto.class.equals(Double.class))
                    && token == JsonToken.VALUE_NUMBER_FLOAT);
            attemptParsing |=
                (TemplateMessageDto.class.equals(Boolean.class)
                    && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
            attemptParsing |=
                (TemplateMessageDto.class.equals(String.class) && token == JsonToken.VALUE_STRING);
          }
        }
        if (attemptParsing) {
          deserialized = tree.traverse(jp.getCodec()).readValueAs(TemplateMessageDto.class);
          // TODO: there is no validation against JSON schema constraints
          // (min, max, enum, pattern...), this does not perform a strict JSON
          // validation, which means the 'match' count may be higher than it should be.
          match++;
          log.log(Level.FINER, "Input data matches schema 'TemplateMessageDto'");
        }
      } catch (Exception e) {
        // deserialization failed, continue
        log.log(Level.FINER, "Input data does not match schema 'TemplateMessageDto'", e);
      }

      // deserialize TextMessageDto
      try {
        boolean attemptParsing = true;
        // ensure that we respect type coercion as set on the client ObjectMapper
        if (TextMessageDto.class.equals(Integer.class)
            || TextMessageDto.class.equals(Long.class)
            || TextMessageDto.class.equals(Float.class)
            || TextMessageDto.class.equals(Double.class)
            || TextMessageDto.class.equals(Boolean.class)
            || TextMessageDto.class.equals(String.class)) {
          attemptParsing = typeCoercion;
          if (!attemptParsing) {
            attemptParsing |=
                ((TextMessageDto.class.equals(Integer.class)
                        || TextMessageDto.class.equals(Long.class))
                    && token == JsonToken.VALUE_NUMBER_INT);
            attemptParsing |=
                ((TextMessageDto.class.equals(Float.class)
                        || TextMessageDto.class.equals(Double.class))
                    && token == JsonToken.VALUE_NUMBER_FLOAT);
            attemptParsing |=
                (TextMessageDto.class.equals(Boolean.class)
                    && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
            attemptParsing |=
                (TextMessageDto.class.equals(String.class) && token == JsonToken.VALUE_STRING);
          }
        }
        if (attemptParsing) {
          deserialized = tree.traverse(jp.getCodec()).readValueAs(TextMessageDto.class);
          // TODO: there is no validation against JSON schema constraints
          // (min, max, enum, pattern...), this does not perform a strict JSON
          // validation, which means the 'match' count may be higher than it should be.
          match++;
          log.log(Level.FINER, "Input data matches schema 'TextMessageDto'");
        }
      } catch (Exception e) {
        // deserialization failed, continue
        log.log(Level.FINER, "Input data does not match schema 'TextMessageDto'", e);
      }

      if (match == 1) {
        AppMessageTypesDto ret = new AppMessageTypesDto();
        ret.setActualInstance(deserialized);
        return ret;
      }
      throw new IOException(
          String.format(
              "Failed deserialization for AppMessageTypesDto: %d classes match result, expected 1",
              match));
    }

    /** Handle deserialization of the 'null' value. */
    @Override
    public AppMessageTypesDto getNullValue(DeserializationContext ctxt)
        throws JsonMappingException {
      throw new JsonMappingException(ctxt.getParser(), "AppMessageTypesDto cannot be null");
    }
  }

  // store a list of schema names defined in oneOf
  public static final Map<String, Class<?>> schemas = new HashMap<>();

  public AppMessageTypesDto() {
    super("oneOf", Boolean.FALSE);
  }

  public AppMessageTypesDto(CardMessageDto o) {
    super("oneOf", Boolean.FALSE);
    setActualInstance(o);
  }

  public AppMessageTypesDto(CarouselMessageDto o) {
    super("oneOf", Boolean.FALSE);
    setActualInstance(o);
  }

  public AppMessageTypesDto(ChoiceMessageDto o) {
    super("oneOf", Boolean.FALSE);
    setActualInstance(o);
  }

  public AppMessageTypesDto(ListMessageDto o) {
    super("oneOf", Boolean.FALSE);
    setActualInstance(o);
  }

  public AppMessageTypesDto(LocationMessageDto o) {
    super("oneOf", Boolean.FALSE);
    setActualInstance(o);
  }

  public AppMessageTypesDto(MediaMessageDto o) {
    super("oneOf", Boolean.FALSE);
    setActualInstance(o);
  }

  public AppMessageTypesDto(TemplateMessageDto o) {
    super("oneOf", Boolean.FALSE);
    setActualInstance(o);
  }

  public AppMessageTypesDto(TextMessageDto o) {
    super("oneOf", Boolean.FALSE);
    setActualInstance(o);
  }

  static {
    schemas.put("CardMessageDto", CardMessageDto.class);
    schemas.put("CarouselMessageDto", CarouselMessageDto.class);
    schemas.put("ChoiceMessageDto", ChoiceMessageDto.class);
    schemas.put("ListMessageDto", ListMessageDto.class);
    schemas.put("LocationMessageDto", LocationMessageDto.class);
    schemas.put("MediaMessageDto", MediaMessageDto.class);
    schemas.put("TemplateMessageDto", TemplateMessageDto.class);
    schemas.put("TextMessageDto", TextMessageDto.class);
    JSONNavigator.registerDescendants(
        AppMessageTypesDto.class, Collections.unmodifiableMap(schemas));
  }

  @Override
  public Map<String, Class<?>> getSchemas() {
    return AppMessageTypesDto.schemas;
  }

  /**
   * Set the instance that matches the oneOf child schema, check the instance parameter is valid
   * against the oneOf child schemas: CardMessageDto, CarouselMessageDto, ChoiceMessageDto,
   * ListMessageDto, LocationMessageDto, MediaMessageDto, TemplateMessageDto, TextMessageDto
   *
   * <p>It could be an instance of the 'oneOf' schemas. The oneOf child schemas may themselves be a
   * composed schema (allOf, anyOf, oneOf).
   */
  @Override
  public void setActualInstance(Object instance) {
    if (JSONNavigator.isInstanceOf(CardMessageDto.class, instance, new HashSet<Class<?>>())) {
      super.setActualInstance(instance);
      return;
    }

    if (JSONNavigator.isInstanceOf(CarouselMessageDto.class, instance, new HashSet<Class<?>>())) {
      super.setActualInstance(instance);
      return;
    }

    if (JSONNavigator.isInstanceOf(ChoiceMessageDto.class, instance, new HashSet<Class<?>>())) {
      super.setActualInstance(instance);
      return;
    }

    if (JSONNavigator.isInstanceOf(ListMessageDto.class, instance, new HashSet<Class<?>>())) {
      super.setActualInstance(instance);
      return;
    }

    if (JSONNavigator.isInstanceOf(LocationMessageDto.class, instance, new HashSet<Class<?>>())) {
      super.setActualInstance(instance);
      return;
    }

    if (JSONNavigator.isInstanceOf(MediaMessageDto.class, instance, new HashSet<Class<?>>())) {
      super.setActualInstance(instance);
      return;
    }

    if (JSONNavigator.isInstanceOf(TemplateMessageDto.class, instance, new HashSet<Class<?>>())) {
      super.setActualInstance(instance);
      return;
    }

    if (JSONNavigator.isInstanceOf(TextMessageDto.class, instance, new HashSet<Class<?>>())) {
      super.setActualInstance(instance);
      return;
    }

    throw new RuntimeException(
        "Invalid instance type. Must be CardMessageDto, CarouselMessageDto, ChoiceMessageDto,"
            + " ListMessageDto, LocationMessageDto, MediaMessageDto, TemplateMessageDto,"
            + " TextMessageDto");
  }

  /**
   * Get the actual instance, which can be the following: CardMessageDto, CarouselMessageDto,
   * ChoiceMessageDto, ListMessageDto, LocationMessageDto, MediaMessageDto, TemplateMessageDto,
   * TextMessageDto
   *
   * @return The actual instance (CardMessageDto, CarouselMessageDto, ChoiceMessageDto,
   *     ListMessageDto, LocationMessageDto, MediaMessageDto, TemplateMessageDto, TextMessageDto)
   */
  @Override
  public Object getActualInstance() {
    return super.getActualInstance();
  }

  /**
   * Get the actual instance of `CardMessageDto`. If the actual instance is not `CardMessageDto`,
   * the ClassCastException will be thrown.
   *
   * @return The actual instance of `CardMessageDto`
   * @throws ClassCastException if the instance is not `CardMessageDto`
   */
  public CardMessageDto getCardMessageDto() throws ClassCastException {
    return (CardMessageDto) super.getActualInstance();
  }

  /**
   * Get the actual instance of `CarouselMessageDto`. If the actual instance is not
   * `CarouselMessageDto`, the ClassCastException will be thrown.
   *
   * @return The actual instance of `CarouselMessageDto`
   * @throws ClassCastException if the instance is not `CarouselMessageDto`
   */
  public CarouselMessageDto getCarouselMessageDto() throws ClassCastException {
    return (CarouselMessageDto) super.getActualInstance();
  }

  /**
   * Get the actual instance of `ChoiceMessageDto`. If the actual instance is not
   * `ChoiceMessageDto`, the ClassCastException will be thrown.
   *
   * @return The actual instance of `ChoiceMessageDto`
   * @throws ClassCastException if the instance is not `ChoiceMessageDto`
   */
  public ChoiceMessageDto getChoiceMessageDto() throws ClassCastException {
    return (ChoiceMessageDto) super.getActualInstance();
  }

  /**
   * Get the actual instance of `ListMessageDto`. If the actual instance is not `ListMessageDto`,
   * the ClassCastException will be thrown.
   *
   * @return The actual instance of `ListMessageDto`
   * @throws ClassCastException if the instance is not `ListMessageDto`
   */
  public ListMessageDto getListMessageDto() throws ClassCastException {
    return (ListMessageDto) super.getActualInstance();
  }

  /**
   * Get the actual instance of `LocationMessageDto`. If the actual instance is not
   * `LocationMessageDto`, the ClassCastException will be thrown.
   *
   * @return The actual instance of `LocationMessageDto`
   * @throws ClassCastException if the instance is not `LocationMessageDto`
   */
  public LocationMessageDto getLocationMessageDto() throws ClassCastException {
    return (LocationMessageDto) super.getActualInstance();
  }

  /**
   * Get the actual instance of `MediaMessageDto`. If the actual instance is not `MediaMessageDto`,
   * the ClassCastException will be thrown.
   *
   * @return The actual instance of `MediaMessageDto`
   * @throws ClassCastException if the instance is not `MediaMessageDto`
   */
  public MediaMessageDto getMediaMessageDto() throws ClassCastException {
    return (MediaMessageDto) super.getActualInstance();
  }

  /**
   * Get the actual instance of `TemplateMessageDto`. If the actual instance is not
   * `TemplateMessageDto`, the ClassCastException will be thrown.
   *
   * @return The actual instance of `TemplateMessageDto`
   * @throws ClassCastException if the instance is not `TemplateMessageDto`
   */
  public TemplateMessageDto getTemplateMessageDto() throws ClassCastException {
    return (TemplateMessageDto) super.getActualInstance();
  }

  /**
   * Get the actual instance of `TextMessageDto`. If the actual instance is not `TextMessageDto`,
   * the ClassCastException will be thrown.
   *
   * @return The actual instance of `TextMessageDto`
   * @throws ClassCastException if the instance is not `TextMessageDto`
   */
  public TextMessageDto getTextMessageDto() throws ClassCastException {
    return (TextMessageDto) super.getActualInstance();
  }
}
