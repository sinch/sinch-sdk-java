/*
 * Conversation API | Sinch
 * Send and receive messages globally over SMS, RCS, WhatsApp, Viber Business, Facebook messenger and other popular channels using the Sinch Conversation API.  The Conversation API endpoint uses built-in transcoding to give you the power of conversation across all supported channels and, if required, full control over channel specific features.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@sinch.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.sinch.sdk.domains.conversation.models.dto.v1;

import com.fasterxml.jackson.annotation.JsonFilter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import java.util.Objects;

/** FallbackMessageFallbackMessageDto */
@JsonPropertyOrder({
  FallbackMessageFallbackMessageDto.JSON_PROPERTY_RAW_MESSAGE,
  FallbackMessageFallbackMessageDto.JSON_PROPERTY_REASON
})
@JsonFilter("uninitializedFilter")
@JsonInclude(value = JsonInclude.Include.CUSTOM)
public class FallbackMessageFallbackMessageDto {
  public static final String JSON_PROPERTY_RAW_MESSAGE = "raw_message";
  private String rawMessage;
  private boolean rawMessageDefined = false;

  public static final String JSON_PROPERTY_REASON = "reason";
  private ReasonDto reason;
  private boolean reasonDefined = false;

  public FallbackMessageFallbackMessageDto() {}

  public FallbackMessageFallbackMessageDto rawMessage(String rawMessage) {
    this.rawMessage = rawMessage;
    this.rawMessageDefined = true;
    return this;
  }

  /**
   * Optional. The raw fallback message if provided by the channel.
   *
   * @return rawMessage
   */
  @JsonProperty(JSON_PROPERTY_RAW_MESSAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getRawMessage() {
    return rawMessage;
  }

  @JsonIgnore
  public boolean getRawMessageDefined() {
    return rawMessageDefined;
  }

  @JsonProperty(JSON_PROPERTY_RAW_MESSAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRawMessage(String rawMessage) {
    this.rawMessage = rawMessage;
    this.rawMessageDefined = true;
  }

  public FallbackMessageFallbackMessageDto reason(ReasonDto reason) {
    this.reason = reason;
    this.reasonDefined = true;
    return this;
  }

  /**
   * Get reason
   *
   * @return reason
   */
  @JsonProperty(JSON_PROPERTY_REASON)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public ReasonDto getReason() {
    return reason;
  }

  @JsonIgnore
  public boolean getReasonDefined() {
    return reasonDefined;
  }

  @JsonProperty(JSON_PROPERTY_REASON)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setReason(ReasonDto reason) {
    this.reason = reason;
    this.reasonDefined = true;
  }

  /** Return true if this FallbackMessage_fallback_message object is equal to o. */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FallbackMessageFallbackMessageDto fallbackMessageFallbackMessage =
        (FallbackMessageFallbackMessageDto) o;
    return Objects.equals(this.rawMessage, fallbackMessageFallbackMessage.rawMessage)
        && Objects.equals(this.reason, fallbackMessageFallbackMessage.reason);
  }

  @Override
  public int hashCode() {
    return Objects.hash(rawMessage, reason);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FallbackMessageFallbackMessageDto {\n");
    sb.append("    rawMessage: ").append(toIndentedString(rawMessage)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
