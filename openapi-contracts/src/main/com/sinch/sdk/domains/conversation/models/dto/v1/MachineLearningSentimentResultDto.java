/*
 * Conversation API | Sinch
 * Send and receive messages globally over SMS, RCS, WhatsApp, Viber Business, Facebook messenger and other popular channels using the Sinch Conversation API.  The Conversation API endpoint uses built-in transcoding to give you the power of conversation across all supported channels and, if required, full control over channel specific features.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@sinch.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.sinch.sdk.domains.conversation.models.dto.v1;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFilter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/** MachineLearningSentimentResultDto */
@JsonPropertyOrder({
  MachineLearningSentimentResultDto.JSON_PROPERTY_MESSAGE,
  MachineLearningSentimentResultDto.JSON_PROPERTY_RESULTS,
  MachineLearningSentimentResultDto.JSON_PROPERTY_SENTIMENT,
  MachineLearningSentimentResultDto.JSON_PROPERTY_SCORE
})
@JsonFilter("uninitializedFilter")
@JsonInclude(value = JsonInclude.Include.CUSTOM)
public class MachineLearningSentimentResultDto {
  private static final long serialVersionUID = 1L;
  public static final String JSON_PROPERTY_MESSAGE = "message";
  private String message;
  private boolean messageDefined = false;

  public static final String JSON_PROPERTY_RESULTS = "results";
  private List<SentimentResultDto> results;
  private boolean resultsDefined = false;

  /** The most probable sentiment of the analyzed text. */
  public enum SentimentEnum {
    POSITIVE("positive"),

    NEGATIVE("negative"),

    NEUTRAL("neutral"),

    UNKNOWN_DEFAULT_OPEN_API("unknown_default_open_api");

    private String value;

    SentimentEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static SentimentEnum fromValue(String value) {
      for (SentimentEnum b : SentimentEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return UNKNOWN_DEFAULT_OPEN_API;
    }
  }

  public static final String JSON_PROPERTY_SENTIMENT = "sentiment";
  private String sentiment;
  private boolean sentimentDefined = false;

  public static final String JSON_PROPERTY_SCORE = "score";
  private Float score;
  private boolean scoreDefined = false;

  public MachineLearningSentimentResultDto() {}

  public MachineLearningSentimentResultDto message(String message) {
    this.message = message;
    this.messageDefined = true;
    return this;
  }

  /**
   * The message text that was analyzed.
   *
   * @return message
   */
  @JsonProperty(JSON_PROPERTY_MESSAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getMessage() {
    return message;
  }

  @JsonIgnore
  public boolean getMessageDefined() {
    return messageDefined;
  }

  @JsonProperty(JSON_PROPERTY_MESSAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMessage(String message) {
    this.message = message;
    this.messageDefined = true;
  }

  public MachineLearningSentimentResultDto results(List<SentimentResultDto> results) {
    this.results = results;
    this.resultsDefined = true;
    return this;
  }

  public MachineLearningSentimentResultDto addResultsItem(SentimentResultDto resultsItem) {
    if (this.results == null) {
      this.results = new ArrayList<>();
    }
    this.resultsDefined = true;
    this.results.add(resultsItem);
    return this;
  }

  /**
   * An array of JSON objects made up of sentiment and score pairs, where the score represents the
   * likelihood that the message communicates the corresponding sentiment.
   *
   * @return results
   */
  @JsonProperty(JSON_PROPERTY_RESULTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<SentimentResultDto> getResults() {
    return results;
  }

  @JsonIgnore
  public boolean getResultsDefined() {
    return resultsDefined;
  }

  @JsonProperty(JSON_PROPERTY_RESULTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setResults(List<SentimentResultDto> results) {
    this.results = results;
    this.resultsDefined = true;
  }

  public MachineLearningSentimentResultDto sentiment(String sentiment) {
    this.sentiment = sentiment;
    this.sentimentDefined = true;
    return this;
  }

  /**
   * The most probable sentiment of the analyzed text.
   *
   * @return sentiment
   */
  @JsonProperty(JSON_PROPERTY_SENTIMENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getSentiment() {
    return sentiment;
  }

  @JsonIgnore
  public boolean getSentimentDefined() {
    return sentimentDefined;
  }

  @JsonProperty(JSON_PROPERTY_SENTIMENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSentiment(String sentiment) {
    this.sentiment = sentiment;
    this.sentimentDefined = true;
  }

  public MachineLearningSentimentResultDto score(Float score) {
    this.score = score;
    this.scoreDefined = true;
    return this;
  }

  /**
   * The likelihood that the assigned sentiment represents the emotional context of the analyzed
   * text. 1 is the maximum value, representing the highest likelihood that the message text matches
   * the sentiment, and 0 is the minimum value, representing the lowest likelihood that the message
   * text matches the sentiment.
   *
   * @return score
   */
  @JsonProperty(JSON_PROPERTY_SCORE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Float getScore() {
    return score;
  }

  @JsonIgnore
  public boolean getScoreDefined() {
    return scoreDefined;
  }

  @JsonProperty(JSON_PROPERTY_SCORE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setScore(Float score) {
    this.score = score;
    this.scoreDefined = true;
  }

  /** Return true if this MachineLearningSentimentResult object is equal to o. */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MachineLearningSentimentResultDto machineLearningSentimentResult =
        (MachineLearningSentimentResultDto) o;
    return Objects.equals(this.message, machineLearningSentimentResult.message)
        && Objects.equals(this.results, machineLearningSentimentResult.results)
        && Objects.equals(this.sentiment, machineLearningSentimentResult.sentiment)
        && Objects.equals(this.score, machineLearningSentimentResult.score);
  }

  @Override
  public int hashCode() {
    return Objects.hash(message, results, sentiment, score);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MachineLearningSentimentResultDto {\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    results: ").append(toIndentedString(results)).append("\n");
    sb.append("    sentiment: ").append(toIndentedString(sentiment)).append("\n");
    sb.append("    score: ").append(toIndentedString(score)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
