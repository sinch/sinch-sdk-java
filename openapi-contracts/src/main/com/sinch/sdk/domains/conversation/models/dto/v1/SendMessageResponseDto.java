/*
 * Conversation API | Sinch
 * Send and receive messages globally over SMS, RCS, WhatsApp, Viber Business, Facebook messenger and other popular channels using the Sinch Conversation API.  The Conversation API endpoint uses built-in transcoding to give you the power of conversation across all supported channels and, if required, full control over channel specific features.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@sinch.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.sinch.sdk.domains.conversation.models.dto.v1;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFilter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import java.time.OffsetDateTime;
import java.util.Objects;

/** SendMessageResponseDto */
@JsonPropertyOrder({
  SendMessageResponseDto.JSON_PROPERTY_ACCEPTED_TIME,
  SendMessageResponseDto.JSON_PROPERTY_MESSAGE_ID
})
@JsonFilter("uninitializedFilter")
@JsonInclude(value = JsonInclude.Include.CUSTOM)
public class SendMessageResponseDto {
  private static final long serialVersionUID = 1L;
  public static final String JSON_PROPERTY_ACCEPTED_TIME = "accepted_time";
  private OffsetDateTime acceptedTime;
  private boolean acceptedTimeDefined = false;

  public static final String JSON_PROPERTY_MESSAGE_ID = "message_id";
  private String messageId;
  private boolean messageIdDefined = false;

  public SendMessageResponseDto() {}

  @JsonCreator
  public SendMessageResponseDto(
      @JsonProperty(JSON_PROPERTY_ACCEPTED_TIME) OffsetDateTime acceptedTime,
      @JsonProperty(JSON_PROPERTY_MESSAGE_ID) String messageId) {
    this();
    this.acceptedTime = acceptedTime;
    this.acceptedTimeDefined = true;
    this.messageId = messageId;
    this.messageIdDefined = true;
  }

  /**
   * Timestamp when the Conversation API accepted the message for delivery to the referenced
   * contact.
   *
   * @return acceptedTime
   */
  @JsonProperty(JSON_PROPERTY_ACCEPTED_TIME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public OffsetDateTime getAcceptedTime() {
    return acceptedTime;
  }

  @JsonIgnore
  public boolean getAcceptedTimeDefined() {
    return acceptedTimeDefined;
  }

  /**
   * The ID of the message.
   *
   * @return messageId
   */
  @JsonProperty(JSON_PROPERTY_MESSAGE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getMessageId() {
    return messageId;
  }

  @JsonIgnore
  public boolean getMessageIdDefined() {
    return messageIdDefined;
  }

  /** Return true if this SendMessageResponse object is equal to o. */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SendMessageResponseDto sendMessageResponse = (SendMessageResponseDto) o;
    return Objects.equals(this.acceptedTime, sendMessageResponse.acceptedTime)
        && Objects.equals(this.messageId, sendMessageResponse.messageId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(acceptedTime, messageId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SendMessageResponseDto {\n");
    sb.append("    acceptedTime: ").append(toIndentedString(acceptedTime)).append("\n");
    sb.append("    messageId: ").append(toIndentedString(messageId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
