/*
 * Conversation API | Sinch
 * Send and receive messages globally over SMS, RCS, WhatsApp, Viber Business, Facebook messenger and other popular channels using the Sinch Conversation API.  The Conversation API endpoint uses built-in transcoding to give you the power of conversation across all supported channels and, if required, full control over channel specific features.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@sinch.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.sinch.sdk.domains.conversation.models.dto.v1;

import com.fasterxml.jackson.annotation.JsonFilter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import java.util.Objects;

/** An object that contains the PII analysis of the corresponding messages. */
@JsonPropertyOrder({
  MachineLearningPIIResultDto.JSON_PROPERTY_MESSAGE,
  MachineLearningPIIResultDto.JSON_PROPERTY_MASKED
})
@JsonFilter("uninitializedFilter")
@JsonInclude(value = JsonInclude.Include.CUSTOM)
public class MachineLearningPIIResultDto {
  public static final String JSON_PROPERTY_MESSAGE = "message";
  private String message;
  private boolean messageDefined = false;

  public static final String JSON_PROPERTY_MASKED = "masked";
  private String masked;
  private boolean maskedDefined = false;

  public MachineLearningPIIResultDto() {}

  public MachineLearningPIIResultDto message(String message) {
    this.message = message;
    this.messageDefined = true;
    return this;
  }

  /**
   * The message text that was analyzed.
   *
   * @return message
   */
  @JsonProperty(JSON_PROPERTY_MESSAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getMessage() {
    return message;
  }

  @JsonIgnore
  public boolean getMessageDefined() {
    return messageDefined;
  }

  @JsonProperty(JSON_PROPERTY_MESSAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMessage(String message) {
    this.message = message;
    this.messageDefined = true;
  }

  public MachineLearningPIIResultDto masked(String masked) {
    this.masked = masked;
    this.maskedDefined = true;
    return this;
  }

  /**
   * The redacted message text in which sensitive information was replaced with appropriate masks. A
   * MISC mask is applied to a term that has been identified as PII, but with low confidence
   * regarding which type of mask to assign.
   *
   * @return masked
   */
  @JsonProperty(JSON_PROPERTY_MASKED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getMasked() {
    return masked;
  }

  @JsonIgnore
  public boolean getMaskedDefined() {
    return maskedDefined;
  }

  @JsonProperty(JSON_PROPERTY_MASKED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMasked(String masked) {
    this.masked = masked;
    this.maskedDefined = true;
  }

  /** Return true if this MachineLearningPIIResult object is equal to o. */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MachineLearningPIIResultDto machineLearningPIIResult = (MachineLearningPIIResultDto) o;
    return Objects.equals(this.message, machineLearningPIIResult.message)
        && Objects.equals(this.masked, machineLearningPIIResult.masked);
  }

  @Override
  public int hashCode() {
    return Objects.hash(message, masked);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MachineLearningPIIResultDto {\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    masked: ").append(toIndentedString(masked)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
