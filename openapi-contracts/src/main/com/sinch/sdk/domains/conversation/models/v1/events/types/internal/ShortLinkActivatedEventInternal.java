/*
 * Conversation API | Sinch
 * Send and receive messages globally over SMS, RCS, WhatsApp, Viber Business, Facebook messenger and other popular channels using the Sinch Conversation API.  The Conversation API endpoint uses built-in transcoding to give you the power of conversation across all supported channels and, if required, full control over channel specific features.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@sinch.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.sinch.sdk.domains.conversation.models.v1.events.types.internal;

import com.fasterxml.jackson.databind.annotation.JsonDeserialize;

/**
 * Object reflecting an event that is created when a contact visits a shortlink. Currently, this is
 * only supported for the Messenger and Instagram channels. See <a
 * href="https://developers.sinch.com/docs/conversation/callbacks/#shortlink-activated-event">Shortlink
 * Activated Event</a> for more details.
 */
@JsonDeserialize(builder = ShortLinkActivatedEventInternalImpl.Builder.class)
public interface ShortLinkActivatedEventInternal {

  /**
   * Refers to the payload previously configured to be sent in the postback.
   *
   * @return payload
   */
  String getPayload();

  /**
   * Only relevant for the Instagram channel.
   *
   * @return title
   */
  String getTitle();

  /**
   * The ref parameter from the shortlink the user visited.
   *
   * @return ref
   */
  String getRef();

  /**
   * Defaults to &quot;SHORTLINK&quot; for this type of event.
   *
   * @return source
   */
  String getSource();

  /**
   * The identifier for the referral. For Instagram and Messenger shortlinks, this is always set to
   * &quot;OPEN_THREAD&quot;.
   *
   * @return type
   */
  String getType();

  /**
   * Set to true if target channel's conversation thread already existed at the moment the shortlink
   * was visited. Set to false if a new conversation thread began when the shortlink was visited.
   *
   * @return existingThread
   */
  Boolean getExistingThread();

  /**
   * Getting builder
   *
   * @return New Builder instance
   */
  static Builder builder() {
    return new ShortLinkActivatedEventInternalImpl.Builder();
  }

  /** Dedicated Builder */
  interface Builder {

    /**
     * see getter
     *
     * @param payload see getter
     * @return Current builder
     * @see #getPayload
     */
    Builder setPayload(String payload);

    /**
     * see getter
     *
     * @param title see getter
     * @return Current builder
     * @see #getTitle
     */
    Builder setTitle(String title);

    /**
     * see getter
     *
     * @param ref see getter
     * @return Current builder
     * @see #getRef
     */
    Builder setRef(String ref);

    /**
     * see getter
     *
     * @param source see getter
     * @return Current builder
     * @see #getSource
     */
    Builder setSource(String source);

    /**
     * see getter
     *
     * @param type see getter
     * @return Current builder
     * @see #getType
     */
    Builder setType(String type);

    /**
     * see getter
     *
     * @param existingThread see getter
     * @return Current builder
     * @see #getExistingThread
     */
    Builder setExistingThread(Boolean existingThread);

    /**
     * Create instance
     *
     * @return The instance build with current builder values
     */
    ShortLinkActivatedEventInternal build();
  }
}
