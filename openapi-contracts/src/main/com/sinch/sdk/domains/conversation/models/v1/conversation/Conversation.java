/*
 * Conversation API | Sinch
 *
 * OpenAPI document version: 1.0
 * Contact: support@sinch.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

package com.sinch.sdk.domains.conversation.models.v1.conversation;

import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.sinch.sdk.domains.conversation.models.v1.ConversationChannel;
import java.time.Instant;

/**
 * A collection of messages exchanged between a contact and an app. Conversations are normally
 * created on the fly by Conversation API once a message is sent and there is no active conversation
 * already. There can be only one active conversation at any given time between a particular contact
 * and an app.
 */
@JsonDeserialize(builder = ConversationImpl.Builder.class)
public interface Conversation {

  /**
   * Flag for whether this conversation is active.
   *
   * @return active
   */
  Boolean getActive();

  /**
   * Get activeChannel
   *
   * @return activeChannel
   */
  ConversationChannel getActiveChannel();

  /**
   * The ID of the participating app.
   *
   * @return appId
   */
  String getAppId();

  /**
   * The ID of the participating contact.
   *
   * @return contactId
   */
  String getContactId();

  /**
   * Arbitrary data set by the Conversation API clients. Up to 1024 characters long. NOTE: This
   * field has been deprecated due to changes in the system architecture or functionality. It is no
   * longer actively maintained and may be removed in future versions. Please avoid relying on this
   * field in new code.
   *
   * @return metadata
   * @deprecated
   */
  @Deprecated
  String getMetadata();

  /**
   * Arbitrary data set by the Conversation API clients and/or provided in the <code>
   * conversation_metadata</code> field of a SendMessageRequest. A valid JSON object.
   *
   * @return metadataJson
   */
  Object getMetadataJson();

  /**
   * Arbitrary correlation ID related to the MT message set by the Conversation API user.
   *
   * @return correlationId
   */
  String getCorrelationId();

  /**
   * The ID of the conversation.
   *
   * @return id
   */
  String getId();

  /**
   * The timestamp of the latest message in the conversation. The timestamp will be Thursday January
   * 01, 1970 00:00:00 UTC if the conversation contains no messages.
   *
   * @return lastReceived
   */
  Instant getLastReceived();

  /**
   * Getting builder
   *
   * @return New Builder instance
   */
  static Builder builder() {
    return new ConversationImpl.Builder();
  }

  /** Dedicated Builder */
  interface Builder {

    /**
     * see getter
     *
     * @param active see getter
     * @return Current builder
     * @see #getActive
     */
    Builder setActive(Boolean active);

    /**
     * see getter
     *
     * @param activeChannel see getter
     * @return Current builder
     * @see #getActiveChannel
     */
    Builder setActiveChannel(ConversationChannel activeChannel);

    /**
     * see getter
     *
     * @param appId see getter
     * @return Current builder
     * @see #getAppId
     */
    Builder setAppId(String appId);

    /**
     * see getter
     *
     * @param contactId see getter
     * @return Current builder
     * @see #getContactId
     */
    Builder setContactId(String contactId);

    /**
     * see getter
     *
     * @param metadata see getter
     * @return Current builder
     * @see #getMetadata
     */
    @Deprecated
    Builder setMetadata(String metadata);

    /**
     * see getter
     *
     * @param metadataJson see getter
     * @return Current builder
     * @see #getMetadataJson
     */
    Builder setMetadataJson(Object metadataJson);

    /**
     * see getter
     *
     * @param correlationId see getter
     * @return Current builder
     * @see #getCorrelationId
     */
    Builder setCorrelationId(String correlationId);

    /**
     * see getter
     *
     * @param id see getter
     * @return Current builder
     * @see #getId
     */
    Builder setId(String id);

    /**
     * see getter
     *
     * @param lastReceived see getter
     * @return Current builder
     * @see #getLastReceived
     */
    Builder setLastReceived(Instant lastReceived);

    /**
     * Create instance
     *
     * @return The instance build with current builder values
     */
    Conversation build();
  }
}
