/*
 * Conversation API | Sinch
 * Send and receive messages globally over SMS, RCS, WhatsApp, Viber Business, Facebook messenger and other popular channels using the Sinch Conversation API.  The Conversation API endpoint uses built-in transcoding to give you the power of conversation across all supported channels and, if required, full control over channel specific features.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@sinch.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.sinch.sdk.domains.conversation.models.dto.v1;

import com.fasterxml.jackson.annotation.JsonFilter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

/**
 * The referenced template can be an omnichannel template stored in Conversation API Template Store
 * as AppMessage or it can reference external channel-specific template such as WhatsApp Business
 * Template.
 */
@JsonPropertyOrder({
  TemplateReferenceDto.JSON_PROPERTY_TEMPLATE_ID,
  TemplateReferenceDto.JSON_PROPERTY_VERSION,
  TemplateReferenceDto.JSON_PROPERTY_LANGUAGE_CODE,
  TemplateReferenceDto.JSON_PROPERTY_PARAMETERS
})
@JsonFilter("uninitializedFilter")
@JsonInclude(value = JsonInclude.Include.CUSTOM)
public class TemplateReferenceDto {
  private static final long serialVersionUID = 1L;
  public static final String JSON_PROPERTY_TEMPLATE_ID = "template_id";
  private String templateId;
  private boolean templateIdDefined = false;

  public static final String JSON_PROPERTY_VERSION = "version";
  private String version;
  private boolean versionDefined = false;

  public static final String JSON_PROPERTY_LANGUAGE_CODE = "language_code";
  private String languageCode;
  private boolean languageCodeDefined = false;

  public static final String JSON_PROPERTY_PARAMETERS = "parameters";
  private Map<String, String> parameters;
  private boolean parametersDefined = false;

  public TemplateReferenceDto() {}

  public TemplateReferenceDto templateId(String templateId) {
    this.templateId = templateId;
    this.templateIdDefined = true;
    return this;
  }

  /**
   * The ID of the template.
   *
   * @return templateId
   */
  @JsonProperty(JSON_PROPERTY_TEMPLATE_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getTemplateId() {
    return templateId;
  }

  @JsonIgnore
  public boolean getTemplateIdDefined() {
    return templateIdDefined;
  }

  @JsonProperty(JSON_PROPERTY_TEMPLATE_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTemplateId(String templateId) {
    this.templateId = templateId;
    this.templateIdDefined = true;
  }

  public TemplateReferenceDto version(String version) {
    this.version = version;
    this.versionDefined = true;
    return this;
  }

  /**
   * Used to specify what version of a template to use. This will be used in conjunction with
   * &#x60;language_code&#x60;.
   *
   * @return version
   */
  @JsonProperty(JSON_PROPERTY_VERSION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getVersion() {
    return version;
  }

  @JsonIgnore
  public boolean getVersionDefined() {
    return versionDefined;
  }

  @JsonProperty(JSON_PROPERTY_VERSION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setVersion(String version) {
    this.version = version;
    this.versionDefined = true;
  }

  public TemplateReferenceDto languageCode(String languageCode) {
    this.languageCode = languageCode;
    this.languageCodeDefined = true;
    return this;
  }

  /**
   * The BCP-47 language code, such as &#x60;en-US&#x60; or &#x60;sr-Latn&#x60;. For more
   * information, see http://www.unicode.org/reports/tr35/#Unicode_locale_identifier. English is the
   * default language_code.
   *
   * @return languageCode
   */
  @JsonProperty(JSON_PROPERTY_LANGUAGE_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getLanguageCode() {
    return languageCode;
  }

  @JsonIgnore
  public boolean getLanguageCodeDefined() {
    return languageCodeDefined;
  }

  @JsonProperty(JSON_PROPERTY_LANGUAGE_CODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLanguageCode(String languageCode) {
    this.languageCode = languageCode;
    this.languageCodeDefined = true;
  }

  public TemplateReferenceDto parameters(Map<String, String> parameters) {
    this.parameters = parameters;
    this.parametersDefined = true;
    return this;
  }

  public TemplateReferenceDto putParametersItem(String key, String parametersItem) {
    if (this.parameters == null) {
      this.parameters = new HashMap<>();
    }
    this.parametersDefined = true;
    this.parameters.put(key, parametersItem);
    return this;
  }

  /**
   * Required if the template has parameters. Concrete values must be present for all defined
   * parameters in the template. Parameters can be different for different versions and/or languages
   * of the template.
   *
   * @return parameters
   */
  @JsonProperty(JSON_PROPERTY_PARAMETERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Map<String, String> getParameters() {
    return parameters;
  }

  @JsonIgnore
  public boolean getParametersDefined() {
    return parametersDefined;
  }

  @JsonProperty(JSON_PROPERTY_PARAMETERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setParameters(Map<String, String> parameters) {
    this.parameters = parameters;
    this.parametersDefined = true;
  }

  /** Return true if this TemplateReference object is equal to o. */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TemplateReferenceDto templateReference = (TemplateReferenceDto) o;
    return Objects.equals(this.templateId, templateReference.templateId)
        && Objects.equals(this.version, templateReference.version)
        && Objects.equals(this.languageCode, templateReference.languageCode)
        && Objects.equals(this.parameters, templateReference.parameters);
  }

  @Override
  public int hashCode() {
    return Objects.hash(templateId, version, languageCode, parameters);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TemplateReferenceDto {\n");
    sb.append("    templateId: ").append(toIndentedString(templateId)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    languageCode: ").append(toIndentedString(languageCode)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
