/*
 * Conversation API | Sinch
 * Send and receive messages globally over SMS, RCS, WhatsApp, Viber Business, Facebook messenger and other popular channels using the Sinch Conversation API.  The Conversation API endpoint uses built-in transcoding to give you the power of conversation across all supported channels and, if required, full control over channel specific features.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@sinch.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.sinch.sdk.domains.conversation.models.dto.v1;

import com.fasterxml.jackson.annotation.JsonFilter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import java.util.Objects;

/** SmartConversationsEventAllOfSmartConversationNotificationDto */
@JsonPropertyOrder({
  SmartConversationsEventAllOfSmartConversationNotificationDto.JSON_PROPERTY_CONTACT_ID,
  SmartConversationsEventAllOfSmartConversationNotificationDto.JSON_PROPERTY_CHANNEL_IDENTITY,
  SmartConversationsEventAllOfSmartConversationNotificationDto.JSON_PROPERTY_CHANNEL,
  SmartConversationsEventAllOfSmartConversationNotificationDto.JSON_PROPERTY_MESSAGE_ID,
  SmartConversationsEventAllOfSmartConversationNotificationDto.JSON_PROPERTY_CONVERSATION_ID,
  SmartConversationsEventAllOfSmartConversationNotificationDto.JSON_PROPERTY_ANALYSIS_RESULTS
})
@JsonFilter("uninitializedFilter")
@JsonInclude(value = JsonInclude.Include.CUSTOM)
public class SmartConversationsEventAllOfSmartConversationNotificationDto {
  private static final long serialVersionUID = 1L;
  public static final String JSON_PROPERTY_CONTACT_ID = "contact_id";
  private String contactId;
  private boolean contactIdDefined = false;

  public static final String JSON_PROPERTY_CHANNEL_IDENTITY = "channel_identity";
  private String channelIdentity;
  private boolean channelIdentityDefined = false;

  public static final String JSON_PROPERTY_CHANNEL = "channel";
  private ConversationChannelDto channel;
  private boolean channelDefined = false;

  public static final String JSON_PROPERTY_MESSAGE_ID = "message_id";
  private String messageId;
  private boolean messageIdDefined = false;

  public static final String JSON_PROPERTY_CONVERSATION_ID = "conversation_id";
  private String conversationId;
  private boolean conversationIdDefined = false;

  public static final String JSON_PROPERTY_ANALYSIS_RESULTS = "analysis_results";
  private AnalysisResultDto analysisResults;
  private boolean analysisResultsDefined = false;

  public SmartConversationsEventAllOfSmartConversationNotificationDto() {}

  public SmartConversationsEventAllOfSmartConversationNotificationDto contactId(String contactId) {
    this.contactId = contactId;
    this.contactIdDefined = true;
    return this;
  }

  /**
   * The unique ID of the contact that sent the message.
   *
   * @return contactId
   */
  @JsonProperty(JSON_PROPERTY_CONTACT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getContactId() {
    return contactId;
  }

  @JsonIgnore
  public boolean getContactIdDefined() {
    return contactIdDefined;
  }

  @JsonProperty(JSON_PROPERTY_CONTACT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setContactId(String contactId) {
    this.contactId = contactId;
    this.contactIdDefined = true;
  }

  public SmartConversationsEventAllOfSmartConversationNotificationDto channelIdentity(
      String channelIdentity) {
    this.channelIdentity = channelIdentity;
    this.channelIdentityDefined = true;
    return this;
  }

  /**
   * The channel-specific identifier for the contact.
   *
   * @return channelIdentity
   */
  @JsonProperty(JSON_PROPERTY_CHANNEL_IDENTITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getChannelIdentity() {
    return channelIdentity;
  }

  @JsonIgnore
  public boolean getChannelIdentityDefined() {
    return channelIdentityDefined;
  }

  @JsonProperty(JSON_PROPERTY_CHANNEL_IDENTITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setChannelIdentity(String channelIdentity) {
    this.channelIdentity = channelIdentity;
    this.channelIdentityDefined = true;
  }

  public SmartConversationsEventAllOfSmartConversationNotificationDto channel(
      ConversationChannelDto channel) {
    this.channel = channel;
    this.channelDefined = true;
    return this;
  }

  /**
   * Get channel
   *
   * @return channel
   */
  @JsonProperty(JSON_PROPERTY_CHANNEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public ConversationChannelDto getChannel() {
    return channel;
  }

  @JsonIgnore
  public boolean getChannelDefined() {
    return channelDefined;
  }

  @JsonProperty(JSON_PROPERTY_CHANNEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setChannel(ConversationChannelDto channel) {
    this.channel = channel;
    this.channelDefined = true;
  }

  public SmartConversationsEventAllOfSmartConversationNotificationDto messageId(String messageId) {
    this.messageId = messageId;
    this.messageIdDefined = true;
    return this;
  }

  /**
   * The unique ID of the corresponding message.
   *
   * @return messageId
   */
  @JsonProperty(JSON_PROPERTY_MESSAGE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getMessageId() {
    return messageId;
  }

  @JsonIgnore
  public boolean getMessageIdDefined() {
    return messageIdDefined;
  }

  @JsonProperty(JSON_PROPERTY_MESSAGE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMessageId(String messageId) {
    this.messageId = messageId;
    this.messageIdDefined = true;
  }

  public SmartConversationsEventAllOfSmartConversationNotificationDto conversationId(
      String conversationId) {
    this.conversationId = conversationId;
    this.conversationIdDefined = true;
    return this;
  }

  /**
   * The ID of the conversation the app message is part of.
   *
   * @return conversationId
   */
  @JsonProperty(JSON_PROPERTY_CONVERSATION_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getConversationId() {
    return conversationId;
  }

  @JsonIgnore
  public boolean getConversationIdDefined() {
    return conversationIdDefined;
  }

  @JsonProperty(JSON_PROPERTY_CONVERSATION_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setConversationId(String conversationId) {
    this.conversationId = conversationId;
    this.conversationIdDefined = true;
  }

  public SmartConversationsEventAllOfSmartConversationNotificationDto analysisResults(
      AnalysisResultDto analysisResults) {
    this.analysisResults = analysisResults;
    this.analysisResultsDefined = true;
    return this;
  }

  /**
   * Get analysisResults
   *
   * @return analysisResults
   */
  @JsonProperty(JSON_PROPERTY_ANALYSIS_RESULTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public AnalysisResultDto getAnalysisResults() {
    return analysisResults;
  }

  @JsonIgnore
  public boolean getAnalysisResultsDefined() {
    return analysisResultsDefined;
  }

  @JsonProperty(JSON_PROPERTY_ANALYSIS_RESULTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAnalysisResults(AnalysisResultDto analysisResults) {
    this.analysisResults = analysisResults;
    this.analysisResultsDefined = true;
  }

  /**
   * Return true if this SmartConversationsEvent_allOf_smart_conversation_notification object is
   * equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SmartConversationsEventAllOfSmartConversationNotificationDto
        smartConversationsEventAllOfSmartConversationNotification =
            (SmartConversationsEventAllOfSmartConversationNotificationDto) o;
    return Objects.equals(
            this.contactId, smartConversationsEventAllOfSmartConversationNotification.contactId)
        && Objects.equals(
            this.channelIdentity,
            smartConversationsEventAllOfSmartConversationNotification.channelIdentity)
        && Objects.equals(
            this.channel, smartConversationsEventAllOfSmartConversationNotification.channel)
        && Objects.equals(
            this.messageId, smartConversationsEventAllOfSmartConversationNotification.messageId)
        && Objects.equals(
            this.conversationId,
            smartConversationsEventAllOfSmartConversationNotification.conversationId)
        && Objects.equals(
            this.analysisResults,
            smartConversationsEventAllOfSmartConversationNotification.analysisResults);
  }

  @Override
  public int hashCode() {
    return Objects.hash(
        contactId, channelIdentity, channel, messageId, conversationId, analysisResults);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SmartConversationsEventAllOfSmartConversationNotificationDto {\n");
    sb.append("    contactId: ").append(toIndentedString(contactId)).append("\n");
    sb.append("    channelIdentity: ").append(toIndentedString(channelIdentity)).append("\n");
    sb.append("    channel: ").append(toIndentedString(channel)).append("\n");
    sb.append("    messageId: ").append(toIndentedString(messageId)).append("\n");
    sb.append("    conversationId: ").append(toIndentedString(conversationId)).append("\n");
    sb.append("    analysisResults: ").append(toIndentedString(analysisResults)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
