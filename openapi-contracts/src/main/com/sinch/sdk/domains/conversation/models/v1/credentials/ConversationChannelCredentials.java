/*
 * Conversation API | Sinch
 *
 * OpenAPI document version: 1.0
 * Contact: support@sinch.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

package com.sinch.sdk.domains.conversation.models.v1.credentials;

import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.sinch.sdk.domains.conversation.models.v1.ConversationChannel;

/**
 * Enables access to the underlying messaging channel.
 *
 * <p>Use the <b>{@link
 * com.sinch.sdk.domains.conversation.models.v1.credentials.ConversationChannelCredentialsBuilderFactory}</b>
 * factory builder helper to create credentials related to channel
 *
 * @see
 *     com.sinch.sdk.domains.conversation.models.v1.credentials.ConversationChannelCredentialsBuilderFactory
 */
@JsonDeserialize(builder = ConversationChannelCredentialsImpl.Builder.class)
public interface ConversationChannelCredentials {

  /**
   * Get credentials related to conversation channel
   *
   * @return credentials
   */
  ChannelCredentials getCredentials();

  /**
   * The secret used to verify the channel callbacks for channels which support callback
   * verification. The callback verification is not needed for Sinch-managed channels because the
   * callbacks are not leaving Sinch internal networks. Max length is 256 characters. Note: leaving
   * channel_callback_secret empty for channels with callback verification will disable the
   * verification.
   *
   * @return callbackSecret
   */
  String getCallbackSecret();

  /**
   * Get channel
   *
   * @return channel
   */
  ConversationChannel getChannel();

  /**
   * Get state
   *
   * @return state
   * @readOnly <em>This field is returned by the server and cannot be modified</em>
   */
  ChannelIntegrationState getState();

  /**
   * Additional identifier set by the channel that represents an specific id used by the channel.
   *
   * @return channelKnownId
   * @readOnly <em>This field is returned by the server and cannot be modified</em>
   */
  String getChannelKnownId();

  /**
   * The ordinal number of the credential. This field is used when the application supports multiple
   * credential integrations per channel. Currently, this is only applicable to the <code>LINE
   * </code> channel. For other channels, this value will always be set to <code>0</code>. In the
   * case in which there are multiple credential integrations per channel on a single app, this
   * field must have a unique value for each multi-credential channel entry.
   *
   * <p>minimum: 0 maximum: 255
   *
   * @return credentialOrdinalNumber
   */
  Integer getCredentialOrdinalNumber();

  /**
   * Getting builder
   *
   * @return New Builder instance
   */
  static Builder builder() {
    return new ConversationChannelCredentialsImpl.Builder();
  }

  /** Dedicated Builder */
  interface Builder {

    /**
     * see getter
     *
     * @param credentials see getter
     * @return Current builder
     * @see #getCredentials
     */
    Builder setCredentials(ChannelCredentials credentials);

    /**
     * see getter
     *
     * @param callbackSecret see getter
     * @return Current builder
     * @see #getCallbackSecret
     */
    Builder setCallbackSecret(String callbackSecret);

    /**
     * see getter
     *
     * @param channel see getter
     * @return Current builder
     * @see #getChannel
     */
    Builder setChannel(ConversationChannel channel);

    /**
     * see getter
     *
     * @param state see getter
     * @return Current builder
     * @see #getState
     * @readOnly <em>This field is returned by the server and cannot be modified</em>
     */
    Builder setState(ChannelIntegrationState state);

    /**
     * see getter
     *
     * @param channelKnownId see getter
     * @return Current builder
     * @see #getChannelKnownId
     * @readOnly <em>This field is returned by the server and cannot be modified</em>
     */
    Builder setChannelKnownId(String channelKnownId);

    /**
     * see getter
     *
     * @param credentialOrdinalNumber see getter
     * @return Current builder
     * @see #getCredentialOrdinalNumber
     */
    Builder setCredentialOrdinalNumber(Integer credentialOrdinalNumber);

    /**
     * Create instance
     *
     * @return The instance build with current builder values
     */
    ConversationChannelCredentials build();
  }
}
