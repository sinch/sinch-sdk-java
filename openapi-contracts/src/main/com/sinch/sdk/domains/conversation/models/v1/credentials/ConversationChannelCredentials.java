/*
 * Conversation API | Sinch
 *
 * OpenAPI document version: 1.0
 * Contact: support@sinch.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

package com.sinch.sdk.domains.conversation.models.v1.credentials;

import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.sinch.sdk.domains.conversation.models.v1.ConversationChannel;

/** Enables access to the underlying messaging channel. */
@JsonDeserialize(builder = ConversationChannelCredentialsImpl.Builder.class)
public interface ConversationChannelCredentials {

  /**
   * Get staticBearer
   *
   * @return staticBearer
   */
  StaticBearerCredentials getStaticBearer();

  /**
   * Get staticToken
   *
   * @return staticToken
   */
  StaticTokenCredentials getStaticToken();

  /**
   * Get mmsCredentials
   *
   * @return mmsCredentials
   */
  MMSCredentials getMmsCredentials();

  /**
   * Get kakaotalkCredentials
   *
   * @return kakaotalkCredentials
   */
  KakaoTalkCredentials getKakaotalkCredentials();

  /**
   * Get telegramCredentials
   *
   * @return telegramCredentials
   */
  TelegramCredentials getTelegramCredentials();

  /**
   * Get lineCredentials
   *
   * @return lineCredentials
   */
  LineCredentials getLineCredentials();

  /**
   * Get wechatCredentials
   *
   * @return wechatCredentials
   */
  WeChatCredentials getWechatCredentials();

  /**
   * Get instagramCredentials
   *
   * @return instagramCredentials
   */
  InstagramCredentials getInstagramCredentials();

  /**
   * Get applebcCredentials
   *
   * @return applebcCredentials
   */
  AppleBusinessChatCredentials getApplebcCredentials();

  /**
   * Get kakaotalkchatCredentials
   *
   * @return kakaotalkchatCredentials
   */
  KakaoTalkChatCredentials getKakaotalkchatCredentials();

  /**
   * The secret used to verify the channel callbacks for channels which support callback
   * verification. The callback verification is not needed for Sinch-managed channels because the
   * callbacks are not leaving Sinch internal networks. Max length is 256 characters. Note: leaving
   * channel_callback_secret empty for channels with callback verification will disable the
   * verification.
   *
   * @return callbackSecret
   */
  String getCallbackSecret();

  /**
   * Get channel
   *
   * @return channel
   */
  ConversationChannel getChannel();

  /**
   * Get state
   *
   * @return state
   */
  ChannelIntegrationState getState();

  /**
   * Additional identifier set by the channel that represents an specific id used by the channel.
   *
   * @return channelKnownId
   */
  String getChannelKnownId();

  /**
   * Getting builder
   *
   * @return New Builder instance
   */
  static Builder builder() {
    return new ConversationChannelCredentialsImpl.Builder();
  }

  /** Dedicated Builder */
  interface Builder {

    /**
     * see getter
     *
     * @param staticBearer see getter
     * @return Current builder
     * @see #getStaticBearer
     */
    Builder setStaticBearer(StaticBearerCredentials staticBearer);

    /**
     * see getter
     *
     * @param staticToken see getter
     * @return Current builder
     * @see #getStaticToken
     */
    Builder setStaticToken(StaticTokenCredentials staticToken);

    /**
     * see getter
     *
     * @param mmsCredentials see getter
     * @return Current builder
     * @see #getMmsCredentials
     */
    Builder setMmsCredentials(MMSCredentials mmsCredentials);

    /**
     * see getter
     *
     * @param kakaotalkCredentials see getter
     * @return Current builder
     * @see #getKakaotalkCredentials
     */
    Builder setKakaotalkCredentials(KakaoTalkCredentials kakaotalkCredentials);

    /**
     * see getter
     *
     * @param telegramCredentials see getter
     * @return Current builder
     * @see #getTelegramCredentials
     */
    Builder setTelegramCredentials(TelegramCredentials telegramCredentials);

    /**
     * see getter
     *
     * @param lineCredentials see getter
     * @return Current builder
     * @see #getLineCredentials
     */
    Builder setLineCredentials(LineCredentials lineCredentials);

    /**
     * see getter
     *
     * @param wechatCredentials see getter
     * @return Current builder
     * @see #getWechatCredentials
     */
    Builder setWechatCredentials(WeChatCredentials wechatCredentials);

    /**
     * see getter
     *
     * @param instagramCredentials see getter
     * @return Current builder
     * @see #getInstagramCredentials
     */
    Builder setInstagramCredentials(InstagramCredentials instagramCredentials);

    /**
     * see getter
     *
     * @param applebcCredentials see getter
     * @return Current builder
     * @see #getApplebcCredentials
     */
    Builder setApplebcCredentials(AppleBusinessChatCredentials applebcCredentials);

    /**
     * see getter
     *
     * @param kakaotalkchatCredentials see getter
     * @return Current builder
     * @see #getKakaotalkchatCredentials
     */
    Builder setKakaotalkchatCredentials(KakaoTalkChatCredentials kakaotalkchatCredentials);

    /**
     * see getter
     *
     * @param callbackSecret see getter
     * @return Current builder
     * @see #getCallbackSecret
     */
    Builder setCallbackSecret(String callbackSecret);

    /**
     * see getter
     *
     * @param channel see getter
     * @return Current builder
     * @see #getChannel
     */
    Builder setChannel(ConversationChannel channel);

    /**
     * see getter
     *
     * @param state see getter
     * @return Current builder
     * @see #getState
     */
    Builder setState(ChannelIntegrationState state);

    /**
     * see getter
     *
     * @param channelKnownId see getter
     * @return Current builder
     * @see #getChannelKnownId
     */
    Builder setChannelKnownId(String channelKnownId);

    /**
     * Create instance
     *
     * @return The instance build with current builder values
     */
    ConversationChannelCredentials build();
  }
}
