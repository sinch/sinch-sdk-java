/*
 * Conversation API | Sinch
 * Send and receive messages globally over SMS, RCS, WhatsApp, Viber Business, Facebook messenger and other popular channels using the Sinch Conversation API.  The Conversation API endpoint uses built-in transcoding to give you the power of conversation across all supported channels and, if required, full control over channel specific features.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@sinch.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.sinch.sdk.domains.conversation.models.v1.webhooks.events.smartconversations;

import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.List;

/** MachineLearningSentimentResult */
@JsonDeserialize(builder = MachineLearningSentimentResultImpl.Builder.class)
public interface MachineLearningSentimentResult {

  /**
   * The message text that was analyzed.
   *
   * @return message
   */
  String getMessage();

  /**
   * An array of JSON objects made up of sentiment and score pairs, where the score represents the
   * likelihood that the message communicates the corresponding sentiment.
   *
   * @return results
   */
  List<SentimentResult> getResults();

  /**
   * Get sentiment
   *
   * @return sentiment
   */
  Sentiment getSentiment();

  /**
   * The likelihood that the assigned sentiment represents the emotional context of the analyzed
   * text. 1 is the maximum value, representing the highest likelihood that the message text matches
   * the sentiment, and 0 is the minimum value, representing the lowest likelihood that the message
   * text matches the sentiment.
   *
   * @return score
   */
  Float getScore();

  /**
   * Getting builder
   *
   * @return New Builder instance
   */
  static Builder builder() {
    return new MachineLearningSentimentResultImpl.Builder();
  }

  /** Dedicated Builder */
  interface Builder {

    /**
     * see getter
     *
     * @param message see getter
     * @return Current builder
     * @see #getMessage
     */
    Builder setMessage(String message);

    /**
     * see getter
     *
     * @param results see getter
     * @return Current builder
     * @see #getResults
     */
    Builder setResults(List<SentimentResult> results);

    /**
     * see getter
     *
     * @param sentiment see getter
     * @return Current builder
     * @see #getSentiment
     */
    Builder setSentiment(Sentiment sentiment);

    /**
     * see getter
     *
     * @param score see getter
     * @return Current builder
     * @see #getScore
     */
    Builder setScore(Float score);

    /**
     * Create instance
     *
     * @return The instance build with current builder values
     */
    MachineLearningSentimentResult build();
  }
}
