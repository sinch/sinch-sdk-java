/*
 * Conversation API | Sinch
 * Send and receive messages globally over SMS, RCS, WhatsApp, Viber Business, Facebook messenger and other popular channels using the Sinch Conversation API.  The Conversation API endpoint uses built-in transcoding to give you the power of conversation across all supported channels and, if required, full control over channel specific features.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@sinch.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.sinch.sdk.domains.conversation.models.dto.v1;

import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
import com.fasterxml.jackson.databind.ser.std.StdSerializer;
import com.sinch.sdk.core.models.AbstractOpenApiSchema;
import com.sinch.sdk.core.utils.databind.JSONNavigator;
import java.io.IOException;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;

@JsonDeserialize(using = ContactMessageDto.ContactMessageDtoDeserializer.class)
@JsonSerialize(using = ContactMessageDto.ContactMessageDtoSerializer.class)
public final class ContactMessageDto extends AbstractOpenApiSchema {
  private static final Logger log = Logger.getLogger(ContactMessageDto.class.getName());

  public static final class ContactMessageDtoSerializer extends StdSerializer<ContactMessageDto> {
    private static final long serialVersionUID = 1L;

    public ContactMessageDtoSerializer(Class<ContactMessageDto> t) {
      super(t);
    }

    public ContactMessageDtoSerializer() {
      this(null);
    }

    @Override
    public void serialize(ContactMessageDto value, JsonGenerator jgen, SerializerProvider provider)
        throws IOException, JsonProcessingException {
      jgen.writeObject(value.getActualInstance());
    }
  }

  public static final class ContactMessageDtoDeserializer
      extends StdDeserializer<ContactMessageDto> {

    private static final long serialVersionUID = 1L;

    public ContactMessageDtoDeserializer() {
      this(ContactMessageDto.class);
    }

    public ContactMessageDtoDeserializer(Class<?> vc) {
      super(vc);
    }

    @Override
    public ContactMessageDto deserialize(JsonParser jp, DeserializationContext ctxt)
        throws IOException, JsonProcessingException {
      JsonNode tree = jp.readValueAsTree();
      Object deserialized = null;
      boolean typeCoercion = ctxt.isEnabled(MapperFeature.ALLOW_COERCION_OF_SCALARS);
      int match = 0;
      JsonToken token = tree.traverse(jp.getCodec()).nextToken();
      // deserialize ChoiceResponseMessageDto
      try {
        boolean attemptParsing = true;
        // ensure that we respect type coercion as set on the client ObjectMapper
        if (ChoiceResponseMessageDto.class.equals(Integer.class)
            || ChoiceResponseMessageDto.class.equals(Long.class)
            || ChoiceResponseMessageDto.class.equals(Float.class)
            || ChoiceResponseMessageDto.class.equals(Double.class)
            || ChoiceResponseMessageDto.class.equals(Boolean.class)
            || ChoiceResponseMessageDto.class.equals(String.class)) {
          attemptParsing = typeCoercion;
          if (!attemptParsing) {
            attemptParsing |=
                ((ChoiceResponseMessageDto.class.equals(Integer.class)
                        || ChoiceResponseMessageDto.class.equals(Long.class))
                    && token == JsonToken.VALUE_NUMBER_INT);
            attemptParsing |=
                ((ChoiceResponseMessageDto.class.equals(Float.class)
                        || ChoiceResponseMessageDto.class.equals(Double.class))
                    && token == JsonToken.VALUE_NUMBER_FLOAT);
            attemptParsing |=
                (ChoiceResponseMessageDto.class.equals(Boolean.class)
                    && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
            attemptParsing |=
                (ChoiceResponseMessageDto.class.equals(String.class)
                    && token == JsonToken.VALUE_STRING);
          }
        }
        if (attemptParsing) {
          deserialized = tree.traverse(jp.getCodec()).readValueAs(ChoiceResponseMessageDto.class);
          // TODO: there is no validation against JSON schema constraints
          // (min, max, enum, pattern...), this does not perform a strict JSON
          // validation, which means the 'match' count may be higher than it should be.
          match++;
          log.log(Level.FINER, "Input data matches schema 'ChoiceResponseMessageDto'");
        }
      } catch (Exception e) {
        // deserialization failed, continue
        log.log(Level.FINER, "Input data does not match schema 'ChoiceResponseMessageDto'", e);
      }

      // deserialize FallbackMessageDto
      try {
        boolean attemptParsing = true;
        // ensure that we respect type coercion as set on the client ObjectMapper
        if (FallbackMessageDto.class.equals(Integer.class)
            || FallbackMessageDto.class.equals(Long.class)
            || FallbackMessageDto.class.equals(Float.class)
            || FallbackMessageDto.class.equals(Double.class)
            || FallbackMessageDto.class.equals(Boolean.class)
            || FallbackMessageDto.class.equals(String.class)) {
          attemptParsing = typeCoercion;
          if (!attemptParsing) {
            attemptParsing |=
                ((FallbackMessageDto.class.equals(Integer.class)
                        || FallbackMessageDto.class.equals(Long.class))
                    && token == JsonToken.VALUE_NUMBER_INT);
            attemptParsing |=
                ((FallbackMessageDto.class.equals(Float.class)
                        || FallbackMessageDto.class.equals(Double.class))
                    && token == JsonToken.VALUE_NUMBER_FLOAT);
            attemptParsing |=
                (FallbackMessageDto.class.equals(Boolean.class)
                    && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
            attemptParsing |=
                (FallbackMessageDto.class.equals(String.class) && token == JsonToken.VALUE_STRING);
          }
        }
        if (attemptParsing) {
          deserialized = tree.traverse(jp.getCodec()).readValueAs(FallbackMessageDto.class);
          // TODO: there is no validation against JSON schema constraints
          // (min, max, enum, pattern...), this does not perform a strict JSON
          // validation, which means the 'match' count may be higher than it should be.
          match++;
          log.log(Level.FINER, "Input data matches schema 'FallbackMessageDto'");
        }
      } catch (Exception e) {
        // deserialization failed, continue
        log.log(Level.FINER, "Input data does not match schema 'FallbackMessageDto'", e);
      }

      // deserialize LocationMessageDto
      try {
        boolean attemptParsing = true;
        // ensure that we respect type coercion as set on the client ObjectMapper
        if (LocationMessageDto.class.equals(Integer.class)
            || LocationMessageDto.class.equals(Long.class)
            || LocationMessageDto.class.equals(Float.class)
            || LocationMessageDto.class.equals(Double.class)
            || LocationMessageDto.class.equals(Boolean.class)
            || LocationMessageDto.class.equals(String.class)) {
          attemptParsing = typeCoercion;
          if (!attemptParsing) {
            attemptParsing |=
                ((LocationMessageDto.class.equals(Integer.class)
                        || LocationMessageDto.class.equals(Long.class))
                    && token == JsonToken.VALUE_NUMBER_INT);
            attemptParsing |=
                ((LocationMessageDto.class.equals(Float.class)
                        || LocationMessageDto.class.equals(Double.class))
                    && token == JsonToken.VALUE_NUMBER_FLOAT);
            attemptParsing |=
                (LocationMessageDto.class.equals(Boolean.class)
                    && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
            attemptParsing |=
                (LocationMessageDto.class.equals(String.class) && token == JsonToken.VALUE_STRING);
          }
        }
        if (attemptParsing) {
          deserialized = tree.traverse(jp.getCodec()).readValueAs(LocationMessageDto.class);
          // TODO: there is no validation against JSON schema constraints
          // (min, max, enum, pattern...), this does not perform a strict JSON
          // validation, which means the 'match' count may be higher than it should be.
          match++;
          log.log(Level.FINER, "Input data matches schema 'LocationMessageDto'");
        }
      } catch (Exception e) {
        // deserialization failed, continue
        log.log(Level.FINER, "Input data does not match schema 'LocationMessageDto'", e);
      }

      // deserialize MediaCardMessageDto
      try {
        boolean attemptParsing = true;
        // ensure that we respect type coercion as set on the client ObjectMapper
        if (MediaCardMessageDto.class.equals(Integer.class)
            || MediaCardMessageDto.class.equals(Long.class)
            || MediaCardMessageDto.class.equals(Float.class)
            || MediaCardMessageDto.class.equals(Double.class)
            || MediaCardMessageDto.class.equals(Boolean.class)
            || MediaCardMessageDto.class.equals(String.class)) {
          attemptParsing = typeCoercion;
          if (!attemptParsing) {
            attemptParsing |=
                ((MediaCardMessageDto.class.equals(Integer.class)
                        || MediaCardMessageDto.class.equals(Long.class))
                    && token == JsonToken.VALUE_NUMBER_INT);
            attemptParsing |=
                ((MediaCardMessageDto.class.equals(Float.class)
                        || MediaCardMessageDto.class.equals(Double.class))
                    && token == JsonToken.VALUE_NUMBER_FLOAT);
            attemptParsing |=
                (MediaCardMessageDto.class.equals(Boolean.class)
                    && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
            attemptParsing |=
                (MediaCardMessageDto.class.equals(String.class) && token == JsonToken.VALUE_STRING);
          }
        }
        if (attemptParsing) {
          deserialized = tree.traverse(jp.getCodec()).readValueAs(MediaCardMessageDto.class);
          // TODO: there is no validation against JSON schema constraints
          // (min, max, enum, pattern...), this does not perform a strict JSON
          // validation, which means the 'match' count may be higher than it should be.
          match++;
          log.log(Level.FINER, "Input data matches schema 'MediaCardMessageDto'");
        }
      } catch (Exception e) {
        // deserialization failed, continue
        log.log(Level.FINER, "Input data does not match schema 'MediaCardMessageDto'", e);
      }

      // deserialize MediaMessageDto
      try {
        boolean attemptParsing = true;
        // ensure that we respect type coercion as set on the client ObjectMapper
        if (MediaMessageDto.class.equals(Integer.class)
            || MediaMessageDto.class.equals(Long.class)
            || MediaMessageDto.class.equals(Float.class)
            || MediaMessageDto.class.equals(Double.class)
            || MediaMessageDto.class.equals(Boolean.class)
            || MediaMessageDto.class.equals(String.class)) {
          attemptParsing = typeCoercion;
          if (!attemptParsing) {
            attemptParsing |=
                ((MediaMessageDto.class.equals(Integer.class)
                        || MediaMessageDto.class.equals(Long.class))
                    && token == JsonToken.VALUE_NUMBER_INT);
            attemptParsing |=
                ((MediaMessageDto.class.equals(Float.class)
                        || MediaMessageDto.class.equals(Double.class))
                    && token == JsonToken.VALUE_NUMBER_FLOAT);
            attemptParsing |=
                (MediaMessageDto.class.equals(Boolean.class)
                    && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
            attemptParsing |=
                (MediaMessageDto.class.equals(String.class) && token == JsonToken.VALUE_STRING);
          }
        }
        if (attemptParsing) {
          deserialized = tree.traverse(jp.getCodec()).readValueAs(MediaMessageDto.class);
          // TODO: there is no validation against JSON schema constraints
          // (min, max, enum, pattern...), this does not perform a strict JSON
          // validation, which means the 'match' count may be higher than it should be.
          match++;
          log.log(Level.FINER, "Input data matches schema 'MediaMessageDto'");
        }
      } catch (Exception e) {
        // deserialization failed, continue
        log.log(Level.FINER, "Input data does not match schema 'MediaMessageDto'", e);
      }

      // deserialize ReplyToDto
      try {
        boolean attemptParsing = true;
        // ensure that we respect type coercion as set on the client ObjectMapper
        if (ReplyToDto.class.equals(Integer.class)
            || ReplyToDto.class.equals(Long.class)
            || ReplyToDto.class.equals(Float.class)
            || ReplyToDto.class.equals(Double.class)
            || ReplyToDto.class.equals(Boolean.class)
            || ReplyToDto.class.equals(String.class)) {
          attemptParsing = typeCoercion;
          if (!attemptParsing) {
            attemptParsing |=
                ((ReplyToDto.class.equals(Integer.class) || ReplyToDto.class.equals(Long.class))
                    && token == JsonToken.VALUE_NUMBER_INT);
            attemptParsing |=
                ((ReplyToDto.class.equals(Float.class) || ReplyToDto.class.equals(Double.class))
                    && token == JsonToken.VALUE_NUMBER_FLOAT);
            attemptParsing |=
                (ReplyToDto.class.equals(Boolean.class)
                    && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
            attemptParsing |=
                (ReplyToDto.class.equals(String.class) && token == JsonToken.VALUE_STRING);
          }
        }
        if (attemptParsing) {
          deserialized = tree.traverse(jp.getCodec()).readValueAs(ReplyToDto.class);
          // TODO: there is no validation against JSON schema constraints
          // (min, max, enum, pattern...), this does not perform a strict JSON
          // validation, which means the 'match' count may be higher than it should be.
          match++;
          log.log(Level.FINER, "Input data matches schema 'ReplyToDto'");
        }
      } catch (Exception e) {
        // deserialization failed, continue
        log.log(Level.FINER, "Input data does not match schema 'ReplyToDto'", e);
      }

      // deserialize TextMessageDto
      try {
        boolean attemptParsing = true;
        // ensure that we respect type coercion as set on the client ObjectMapper
        if (TextMessageDto.class.equals(Integer.class)
            || TextMessageDto.class.equals(Long.class)
            || TextMessageDto.class.equals(Float.class)
            || TextMessageDto.class.equals(Double.class)
            || TextMessageDto.class.equals(Boolean.class)
            || TextMessageDto.class.equals(String.class)) {
          attemptParsing = typeCoercion;
          if (!attemptParsing) {
            attemptParsing |=
                ((TextMessageDto.class.equals(Integer.class)
                        || TextMessageDto.class.equals(Long.class))
                    && token == JsonToken.VALUE_NUMBER_INT);
            attemptParsing |=
                ((TextMessageDto.class.equals(Float.class)
                        || TextMessageDto.class.equals(Double.class))
                    && token == JsonToken.VALUE_NUMBER_FLOAT);
            attemptParsing |=
                (TextMessageDto.class.equals(Boolean.class)
                    && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
            attemptParsing |=
                (TextMessageDto.class.equals(String.class) && token == JsonToken.VALUE_STRING);
          }
        }
        if (attemptParsing) {
          deserialized = tree.traverse(jp.getCodec()).readValueAs(TextMessageDto.class);
          // TODO: there is no validation against JSON schema constraints
          // (min, max, enum, pattern...), this does not perform a strict JSON
          // validation, which means the 'match' count may be higher than it should be.
          match++;
          log.log(Level.FINER, "Input data matches schema 'TextMessageDto'");
        }
      } catch (Exception e) {
        // deserialization failed, continue
        log.log(Level.FINER, "Input data does not match schema 'TextMessageDto'", e);
      }

      if (match == 1) {
        ContactMessageDto ret = new ContactMessageDto();
        ret.setActualInstance(deserialized);
        return ret;
      }
      throw new IOException(
          String.format(
              "Failed deserialization for ContactMessageDto: %d classes match result, expected 1",
              match));
    }

    /** Handle deserialization of the 'null' value. */
    @Override
    public ContactMessageDto getNullValue(DeserializationContext ctxt) throws JsonMappingException {
      throw new JsonMappingException(ctxt.getParser(), "ContactMessageDto cannot be null");
    }
  }

  // store a list of schema names defined in oneOf
  public static final Map<String, Class<?>> schemas = new HashMap<>();

  public ContactMessageDto() {
    super("oneOf", Boolean.FALSE);
  }

  public ContactMessageDto(ChoiceResponseMessageDto o) {
    super("oneOf", Boolean.FALSE);
    setActualInstance(o);
  }

  public ContactMessageDto(FallbackMessageDto o) {
    super("oneOf", Boolean.FALSE);
    setActualInstance(o);
  }

  public ContactMessageDto(LocationMessageDto o) {
    super("oneOf", Boolean.FALSE);
    setActualInstance(o);
  }

  public ContactMessageDto(MediaCardMessageDto o) {
    super("oneOf", Boolean.FALSE);
    setActualInstance(o);
  }

  public ContactMessageDto(MediaMessageDto o) {
    super("oneOf", Boolean.FALSE);
    setActualInstance(o);
  }

  public ContactMessageDto(ReplyToDto o) {
    super("oneOf", Boolean.FALSE);
    setActualInstance(o);
  }

  public ContactMessageDto(TextMessageDto o) {
    super("oneOf", Boolean.FALSE);
    setActualInstance(o);
  }

  static {
    schemas.put("ChoiceResponseMessageDto", ChoiceResponseMessageDto.class);
    schemas.put("FallbackMessageDto", FallbackMessageDto.class);
    schemas.put("LocationMessageDto", LocationMessageDto.class);
    schemas.put("MediaCardMessageDto", MediaCardMessageDto.class);
    schemas.put("MediaMessageDto", MediaMessageDto.class);
    schemas.put("ReplyToDto", ReplyToDto.class);
    schemas.put("TextMessageDto", TextMessageDto.class);
    JSONNavigator.registerDescendants(
        ContactMessageDto.class, Collections.unmodifiableMap(schemas));
  }

  @Override
  public Map<String, Class<?>> getSchemas() {
    return ContactMessageDto.schemas;
  }

  /**
   * Set the instance that matches the oneOf child schema, check the instance parameter is valid
   * against the oneOf child schemas: ChoiceResponseMessageDto, FallbackMessageDto,
   * LocationMessageDto, MediaCardMessageDto, MediaMessageDto, ReplyToDto, TextMessageDto
   *
   * <p>It could be an instance of the 'oneOf' schemas. The oneOf child schemas may themselves be a
   * composed schema (allOf, anyOf, oneOf).
   */
  @Override
  public void setActualInstance(Object instance) {
    if (JSONNavigator.isInstanceOf(
        ChoiceResponseMessageDto.class, instance, new HashSet<Class<?>>())) {
      super.setActualInstance(instance);
      return;
    }

    if (JSONNavigator.isInstanceOf(FallbackMessageDto.class, instance, new HashSet<Class<?>>())) {
      super.setActualInstance(instance);
      return;
    }

    if (JSONNavigator.isInstanceOf(LocationMessageDto.class, instance, new HashSet<Class<?>>())) {
      super.setActualInstance(instance);
      return;
    }

    if (JSONNavigator.isInstanceOf(MediaCardMessageDto.class, instance, new HashSet<Class<?>>())) {
      super.setActualInstance(instance);
      return;
    }

    if (JSONNavigator.isInstanceOf(MediaMessageDto.class, instance, new HashSet<Class<?>>())) {
      super.setActualInstance(instance);
      return;
    }

    if (JSONNavigator.isInstanceOf(ReplyToDto.class, instance, new HashSet<Class<?>>())) {
      super.setActualInstance(instance);
      return;
    }

    if (JSONNavigator.isInstanceOf(TextMessageDto.class, instance, new HashSet<Class<?>>())) {
      super.setActualInstance(instance);
      return;
    }

    throw new RuntimeException(
        "Invalid instance type. Must be ChoiceResponseMessageDto, FallbackMessageDto,"
            + " LocationMessageDto, MediaCardMessageDto, MediaMessageDto, ReplyToDto,"
            + " TextMessageDto");
  }

  /**
   * Get the actual instance, which can be the following: ChoiceResponseMessageDto,
   * FallbackMessageDto, LocationMessageDto, MediaCardMessageDto, MediaMessageDto, ReplyToDto,
   * TextMessageDto
   *
   * @return The actual instance (ChoiceResponseMessageDto, FallbackMessageDto, LocationMessageDto,
   *     MediaCardMessageDto, MediaMessageDto, ReplyToDto, TextMessageDto)
   */
  @Override
  public Object getActualInstance() {
    return super.getActualInstance();
  }

  /**
   * Get the actual instance of `ChoiceResponseMessageDto`. If the actual instance is not
   * `ChoiceResponseMessageDto`, the ClassCastException will be thrown.
   *
   * @return The actual instance of `ChoiceResponseMessageDto`
   * @throws ClassCastException if the instance is not `ChoiceResponseMessageDto`
   */
  public ChoiceResponseMessageDto getChoiceResponseMessageDto() throws ClassCastException {
    return (ChoiceResponseMessageDto) super.getActualInstance();
  }

  /**
   * Get the actual instance of `FallbackMessageDto`. If the actual instance is not
   * `FallbackMessageDto`, the ClassCastException will be thrown.
   *
   * @return The actual instance of `FallbackMessageDto`
   * @throws ClassCastException if the instance is not `FallbackMessageDto`
   */
  public FallbackMessageDto getFallbackMessageDto() throws ClassCastException {
    return (FallbackMessageDto) super.getActualInstance();
  }

  /**
   * Get the actual instance of `LocationMessageDto`. If the actual instance is not
   * `LocationMessageDto`, the ClassCastException will be thrown.
   *
   * @return The actual instance of `LocationMessageDto`
   * @throws ClassCastException if the instance is not `LocationMessageDto`
   */
  public LocationMessageDto getLocationMessageDto() throws ClassCastException {
    return (LocationMessageDto) super.getActualInstance();
  }

  /**
   * Get the actual instance of `MediaCardMessageDto`. If the actual instance is not
   * `MediaCardMessageDto`, the ClassCastException will be thrown.
   *
   * @return The actual instance of `MediaCardMessageDto`
   * @throws ClassCastException if the instance is not `MediaCardMessageDto`
   */
  public MediaCardMessageDto getMediaCardMessageDto() throws ClassCastException {
    return (MediaCardMessageDto) super.getActualInstance();
  }

  /**
   * Get the actual instance of `MediaMessageDto`. If the actual instance is not `MediaMessageDto`,
   * the ClassCastException will be thrown.
   *
   * @return The actual instance of `MediaMessageDto`
   * @throws ClassCastException if the instance is not `MediaMessageDto`
   */
  public MediaMessageDto getMediaMessageDto() throws ClassCastException {
    return (MediaMessageDto) super.getActualInstance();
  }

  /**
   * Get the actual instance of `ReplyToDto`. If the actual instance is not `ReplyToDto`, the
   * ClassCastException will be thrown.
   *
   * @return The actual instance of `ReplyToDto`
   * @throws ClassCastException if the instance is not `ReplyToDto`
   */
  public ReplyToDto getReplyToDto() throws ClassCastException {
    return (ReplyToDto) super.getActualInstance();
  }

  /**
   * Get the actual instance of `TextMessageDto`. If the actual instance is not `TextMessageDto`,
   * the ClassCastException will be thrown.
   *
   * @return The actual instance of `TextMessageDto`
   * @throws ClassCastException if the instance is not `TextMessageDto`
   */
  public TextMessageDto getTextMessageDto() throws ClassCastException {
    return (TextMessageDto) super.getActualInstance();
  }
}
