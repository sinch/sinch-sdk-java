/*
 * Conversation API | Sinch
 * Send and receive messages globally over SMS, RCS, WhatsApp, Viber Business, Facebook messenger and other popular channels using the Sinch Conversation API.  The Conversation API endpoint uses built-in transcoding to give you the power of conversation across all supported channels and, if required, full control over channel specific features.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@sinch.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.sinch.sdk.domains.conversation.models.dto.v1;

import com.fasterxml.jackson.annotation.JsonFilter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import java.util.Objects;

/** MessageSubmitEventAllOfMessageSubmitNotificationDto */
@JsonPropertyOrder({
  MessageSubmitEventAllOfMessageSubmitNotificationDto.JSON_PROPERTY_MESSAGE_ID,
  MessageSubmitEventAllOfMessageSubmitNotificationDto.JSON_PROPERTY_CONVERSATION_ID,
  MessageSubmitEventAllOfMessageSubmitNotificationDto.JSON_PROPERTY_CHANNEL_IDENTITY,
  MessageSubmitEventAllOfMessageSubmitNotificationDto.JSON_PROPERTY_CONTACT_ID,
  MessageSubmitEventAllOfMessageSubmitNotificationDto.JSON_PROPERTY_SUBMITTED_MESSAGE,
  MessageSubmitEventAllOfMessageSubmitNotificationDto.JSON_PROPERTY_METADATA,
  MessageSubmitEventAllOfMessageSubmitNotificationDto.JSON_PROPERTY_PROCESSING_MODE
})
@JsonFilter("uninitializedFilter")
@JsonInclude(value = JsonInclude.Include.CUSTOM)
public class MessageSubmitEventAllOfMessageSubmitNotificationDto {
  private static final long serialVersionUID = 1L;
  public static final String JSON_PROPERTY_MESSAGE_ID = "message_id";
  private String messageId;
  private boolean messageIdDefined = false;

  public static final String JSON_PROPERTY_CONVERSATION_ID = "conversation_id";
  private String conversationId;
  private boolean conversationIdDefined = false;

  public static final String JSON_PROPERTY_CHANNEL_IDENTITY = "channel_identity";
  private ChannelIdentityDto channelIdentity;
  private boolean channelIdentityDefined = false;

  public static final String JSON_PROPERTY_CONTACT_ID = "contact_id";
  private String contactId;
  private boolean contactIdDefined = false;

  public static final String JSON_PROPERTY_SUBMITTED_MESSAGE = "submitted_message";
  private ContactMessageDto submittedMessage;
  private boolean submittedMessageDefined = false;

  public static final String JSON_PROPERTY_METADATA = "metadata";
  private String metadata;
  private boolean metadataDefined = false;

  public static final String JSON_PROPERTY_PROCESSING_MODE = "processing_mode";
  private ProcessingModeDto processingMode;
  private boolean processingModeDefined = false;

  public MessageSubmitEventAllOfMessageSubmitNotificationDto() {}

  public MessageSubmitEventAllOfMessageSubmitNotificationDto messageId(String messageId) {
    this.messageId = messageId;
    this.messageIdDefined = true;
    return this;
  }

  /**
   * The ID of the app message.
   *
   * @return messageId
   */
  @JsonProperty(JSON_PROPERTY_MESSAGE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getMessageId() {
    return messageId;
  }

  @JsonIgnore
  public boolean getMessageIdDefined() {
    return messageIdDefined;
  }

  @JsonProperty(JSON_PROPERTY_MESSAGE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMessageId(String messageId) {
    this.messageId = messageId;
    this.messageIdDefined = true;
  }

  public MessageSubmitEventAllOfMessageSubmitNotificationDto conversationId(String conversationId) {
    this.conversationId = conversationId;
    this.conversationIdDefined = true;
    return this;
  }

  /**
   * The ID of the conversation the app message is part of. Will be empty if processing_mode is
   * DISPATCH.
   *
   * @return conversationId
   */
  @JsonProperty(JSON_PROPERTY_CONVERSATION_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getConversationId() {
    return conversationId;
  }

  @JsonIgnore
  public boolean getConversationIdDefined() {
    return conversationIdDefined;
  }

  @JsonProperty(JSON_PROPERTY_CONVERSATION_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setConversationId(String conversationId) {
    this.conversationId = conversationId;
    this.conversationIdDefined = true;
  }

  public MessageSubmitEventAllOfMessageSubmitNotificationDto channelIdentity(
      ChannelIdentityDto channelIdentity) {
    this.channelIdentity = channelIdentity;
    this.channelIdentityDefined = true;
    return this;
  }

  /**
   * Get channelIdentity
   *
   * @return channelIdentity
   */
  @JsonProperty(JSON_PROPERTY_CHANNEL_IDENTITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public ChannelIdentityDto getChannelIdentity() {
    return channelIdentity;
  }

  @JsonIgnore
  public boolean getChannelIdentityDefined() {
    return channelIdentityDefined;
  }

  @JsonProperty(JSON_PROPERTY_CHANNEL_IDENTITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setChannelIdentity(ChannelIdentityDto channelIdentity) {
    this.channelIdentity = channelIdentity;
    this.channelIdentityDefined = true;
  }

  public MessageSubmitEventAllOfMessageSubmitNotificationDto contactId(String contactId) {
    this.contactId = contactId;
    this.contactIdDefined = true;
    return this;
  }

  /**
   * The ID of the contact. Will be empty if processing_mode is DISPATCH.
   *
   * @return contactId
   */
  @JsonProperty(JSON_PROPERTY_CONTACT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getContactId() {
    return contactId;
  }

  @JsonIgnore
  public boolean getContactIdDefined() {
    return contactIdDefined;
  }

  @JsonProperty(JSON_PROPERTY_CONTACT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setContactId(String contactId) {
    this.contactId = contactId;
    this.contactIdDefined = true;
  }

  public MessageSubmitEventAllOfMessageSubmitNotificationDto submittedMessage(
      ContactMessageDto submittedMessage) {
    this.submittedMessage = submittedMessage;
    this.submittedMessageDefined = true;
    return this;
  }

  /**
   * Get submittedMessage
   *
   * @return submittedMessage
   */
  @JsonProperty(JSON_PROPERTY_SUBMITTED_MESSAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public ContactMessageDto getSubmittedMessage() {
    return submittedMessage;
  }

  @JsonIgnore
  public boolean getSubmittedMessageDefined() {
    return submittedMessageDefined;
  }

  @JsonProperty(JSON_PROPERTY_SUBMITTED_MESSAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSubmittedMessage(ContactMessageDto submittedMessage) {
    this.submittedMessage = submittedMessage;
    this.submittedMessageDefined = true;
  }

  public MessageSubmitEventAllOfMessageSubmitNotificationDto metadata(String metadata) {
    this.metadata = metadata;
    this.metadataDefined = true;
    return this;
  }

  /**
   * Metadata specified in the message_metadata field of a Send Message request, if any.
   *
   * @return metadata
   */
  @JsonProperty(JSON_PROPERTY_METADATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getMetadata() {
    return metadata;
  }

  @JsonIgnore
  public boolean getMetadataDefined() {
    return metadataDefined;
  }

  @JsonProperty(JSON_PROPERTY_METADATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMetadata(String metadata) {
    this.metadata = metadata;
    this.metadataDefined = true;
  }

  public MessageSubmitEventAllOfMessageSubmitNotificationDto processingMode(
      ProcessingModeDto processingMode) {
    this.processingMode = processingMode;
    this.processingModeDefined = true;
    return this;
  }

  /**
   * Get processingMode
   *
   * @return processingMode
   */
  @JsonProperty(JSON_PROPERTY_PROCESSING_MODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public ProcessingModeDto getProcessingMode() {
    return processingMode;
  }

  @JsonIgnore
  public boolean getProcessingModeDefined() {
    return processingModeDefined;
  }

  @JsonProperty(JSON_PROPERTY_PROCESSING_MODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setProcessingMode(ProcessingModeDto processingMode) {
    this.processingMode = processingMode;
    this.processingModeDefined = true;
  }

  /**
   * Return true if this MessageSubmitEvent_allOf_message_submit_notification object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MessageSubmitEventAllOfMessageSubmitNotificationDto
        messageSubmitEventAllOfMessageSubmitNotification =
            (MessageSubmitEventAllOfMessageSubmitNotificationDto) o;
    return Objects.equals(
            this.messageId, messageSubmitEventAllOfMessageSubmitNotification.messageId)
        && Objects.equals(
            this.conversationId, messageSubmitEventAllOfMessageSubmitNotification.conversationId)
        && Objects.equals(
            this.channelIdentity, messageSubmitEventAllOfMessageSubmitNotification.channelIdentity)
        && Objects.equals(
            this.contactId, messageSubmitEventAllOfMessageSubmitNotification.contactId)
        && Objects.equals(
            this.submittedMessage,
            messageSubmitEventAllOfMessageSubmitNotification.submittedMessage)
        && Objects.equals(this.metadata, messageSubmitEventAllOfMessageSubmitNotification.metadata)
        && Objects.equals(
            this.processingMode, messageSubmitEventAllOfMessageSubmitNotification.processingMode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(
        messageId,
        conversationId,
        channelIdentity,
        contactId,
        submittedMessage,
        metadata,
        processingMode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MessageSubmitEventAllOfMessageSubmitNotificationDto {\n");
    sb.append("    messageId: ").append(toIndentedString(messageId)).append("\n");
    sb.append("    conversationId: ").append(toIndentedString(conversationId)).append("\n");
    sb.append("    channelIdentity: ").append(toIndentedString(channelIdentity)).append("\n");
    sb.append("    contactId: ").append(toIndentedString(contactId)).append("\n");
    sb.append("    submittedMessage: ").append(toIndentedString(submittedMessage)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    processingMode: ").append(toIndentedString(processingMode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
