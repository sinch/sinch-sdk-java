/*
 * Conversation API | Sinch
 * Send and receive messages globally over SMS, RCS, WhatsApp, Viber Business, Facebook messenger and other popular channels using the Sinch Conversation API.  The Conversation API endpoint uses built-in transcoding to give you the power of conversation across all supported channels and, if required, full control over channel specific features.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@sinch.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.sinch.sdk.domains.conversation.models.dto.v1;

import com.fasterxml.jackson.annotation.JsonFilter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import java.util.Objects;

/** A message component for interactive messages, containing a product. */
@JsonPropertyOrder({
  ProductItemDto.JSON_PROPERTY_ID,
  ProductItemDto.JSON_PROPERTY_MARKETPLACE,
  ProductItemDto.JSON_PROPERTY_QUANTITY,
  ProductItemDto.JSON_PROPERTY_ITEM_PRICE,
  ProductItemDto.JSON_PROPERTY_CURRENCY
})
@JsonFilter("uninitializedFilter")
@JsonInclude(value = JsonInclude.Include.CUSTOM)
public class ProductItemDto {
  public static final String JSON_PROPERTY_ID = "id";
  private String id;
  private boolean idDefined = false;

  public static final String JSON_PROPERTY_MARKETPLACE = "marketplace";
  private String marketplace;
  private boolean marketplaceDefined = false;

  public static final String JSON_PROPERTY_QUANTITY = "quantity";
  private Integer quantity;
  private boolean quantityDefined = false;

  public static final String JSON_PROPERTY_ITEM_PRICE = "item_price";
  private Float itemPrice;
  private boolean itemPriceDefined = false;

  public static final String JSON_PROPERTY_CURRENCY = "currency";
  private String currency;
  private boolean currencyDefined = false;

  public ProductItemDto() {}

  public ProductItemDto id(String id) {
    this.id = id;
    this.idDefined = true;
    return this;
  }

  /**
   * Required parameter. The ID for the product.
   *
   * @return id
   */
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getId() {
    return id;
  }

  @JsonIgnore
  public boolean getIdDefined() {
    return idDefined;
  }

  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(String id) {
    this.id = id;
    this.idDefined = true;
  }

  public ProductItemDto marketplace(String marketplace) {
    this.marketplace = marketplace;
    this.marketplaceDefined = true;
    return this;
  }

  /**
   * Required parameter. The marketplace to which the product belongs.
   *
   * @return marketplace
   */
  @JsonProperty(JSON_PROPERTY_MARKETPLACE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getMarketplace() {
    return marketplace;
  }

  @JsonIgnore
  public boolean getMarketplaceDefined() {
    return marketplaceDefined;
  }

  @JsonProperty(JSON_PROPERTY_MARKETPLACE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMarketplace(String marketplace) {
    this.marketplace = marketplace;
    this.marketplaceDefined = true;
  }

  public ProductItemDto quantity(Integer quantity) {
    this.quantity = quantity;
    this.quantityDefined = true;
    return this;
  }

  /**
   * Output only. The quantity of the chosen product.
   *
   * @return quantity
   */
  @JsonProperty(JSON_PROPERTY_QUANTITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getQuantity() {
    return quantity;
  }

  @JsonIgnore
  public boolean getQuantityDefined() {
    return quantityDefined;
  }

  @JsonProperty(JSON_PROPERTY_QUANTITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setQuantity(Integer quantity) {
    this.quantity = quantity;
    this.quantityDefined = true;
  }

  public ProductItemDto itemPrice(Float itemPrice) {
    this.itemPrice = itemPrice;
    this.itemPriceDefined = true;
    return this;
  }

  /**
   * Output only. The price for one unit of the chosen product.
   *
   * @return itemPrice
   */
  @JsonProperty(JSON_PROPERTY_ITEM_PRICE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Float getItemPrice() {
    return itemPrice;
  }

  @JsonIgnore
  public boolean getItemPriceDefined() {
    return itemPriceDefined;
  }

  @JsonProperty(JSON_PROPERTY_ITEM_PRICE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setItemPrice(Float itemPrice) {
    this.itemPrice = itemPrice;
    this.itemPriceDefined = true;
  }

  public ProductItemDto currency(String currency) {
    this.currency = currency;
    this.currencyDefined = true;
    return this;
  }

  /**
   * Output only. The currency of the item_price.
   *
   * @return currency
   */
  @JsonProperty(JSON_PROPERTY_CURRENCY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getCurrency() {
    return currency;
  }

  @JsonIgnore
  public boolean getCurrencyDefined() {
    return currencyDefined;
  }

  @JsonProperty(JSON_PROPERTY_CURRENCY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCurrency(String currency) {
    this.currency = currency;
    this.currencyDefined = true;
  }

  /** Return true if this ProductItem object is equal to o. */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProductItemDto productItem = (ProductItemDto) o;
    return Objects.equals(this.id, productItem.id)
        && Objects.equals(this.marketplace, productItem.marketplace)
        && Objects.equals(this.quantity, productItem.quantity)
        && Objects.equals(this.itemPrice, productItem.itemPrice)
        && Objects.equals(this.currency, productItem.currency);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, marketplace, quantity, itemPrice, currency);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProductItemDto {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    marketplace: ").append(toIndentedString(marketplace)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    itemPrice: ").append(toIndentedString(itemPrice)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
