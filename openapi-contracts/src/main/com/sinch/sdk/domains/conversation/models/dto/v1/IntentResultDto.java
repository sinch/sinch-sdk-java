/*
 * Conversation API | Sinch
 * Send and receive messages globally over SMS, RCS, WhatsApp, Viber Business, Facebook messenger and other popular channels using the Sinch Conversation API.  The Conversation API endpoint uses built-in transcoding to give you the power of conversation across all supported channels and, if required, full control over channel specific features.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@sinch.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.sinch.sdk.domains.conversation.models.dto.v1;

import com.fasterxml.jackson.annotation.JsonFilter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import java.util.Objects;

/** IntentResultDto */
@JsonPropertyOrder({IntentResultDto.JSON_PROPERTY_INTENT, IntentResultDto.JSON_PROPERTY_SCORE})
@JsonFilter("uninitializedFilter")
@JsonInclude(value = JsonInclude.Include.CUSTOM)
public class IntentResultDto {
  private static final long serialVersionUID = 1L;
  public static final String JSON_PROPERTY_INTENT = "intent";
  private String intent;
  private boolean intentDefined = false;

  public static final String JSON_PROPERTY_SCORE = "score";
  private Float score;
  private boolean scoreDefined = false;

  public IntentResultDto() {}

  public IntentResultDto intent(String intent) {
    this.intent = intent;
    this.intentDefined = true;
    return this;
  }

  /**
   * The most probable intent of the analyzed text. For example, chitchat.greeting, chitchat.bye,
   * chitchat.compliment, chitchat.how_are_you, or general.yes_or_agreed.
   *
   * @return intent
   */
  @JsonProperty(JSON_PROPERTY_INTENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getIntent() {
    return intent;
  }

  @JsonIgnore
  public boolean getIntentDefined() {
    return intentDefined;
  }

  @JsonProperty(JSON_PROPERTY_INTENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIntent(String intent) {
    this.intent = intent;
    this.intentDefined = true;
  }

  public IntentResultDto score(Float score) {
    this.score = score;
    this.scoreDefined = true;
    return this;
  }

  /**
   * The likelihood that the assigned intent represents the purpose of the analyzed text. 1 is the
   * maximum value, representing the highest likelihood that the message text matches the intent,
   * and 0 is the minimum value, representing the lowest likelihood that the message text matches
   * the intent.
   *
   * @return score
   */
  @JsonProperty(JSON_PROPERTY_SCORE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Float getScore() {
    return score;
  }

  @JsonIgnore
  public boolean getScoreDefined() {
    return scoreDefined;
  }

  @JsonProperty(JSON_PROPERTY_SCORE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setScore(Float score) {
    this.score = score;
    this.scoreDefined = true;
  }

  /** Return true if this IntentResult object is equal to o. */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IntentResultDto intentResult = (IntentResultDto) o;
    return Objects.equals(this.intent, intentResult.intent)
        && Objects.equals(this.score, intentResult.score);
  }

  @Override
  public int hashCode() {
    return Objects.hash(intent, score);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IntentResultDto {\n");
    sb.append("    intent: ").append(toIndentedString(intent)).append("\n");
    sb.append("    score: ").append(toIndentedString(score)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
