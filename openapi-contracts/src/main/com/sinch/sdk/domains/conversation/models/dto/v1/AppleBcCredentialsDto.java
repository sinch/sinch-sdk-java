/*
 * Conversation API | Sinch
 * Send and receive messages globally over SMS, RCS, WhatsApp, Viber Business, Facebook messenger and other popular channels using the Sinch Conversation API.  The Conversation API endpoint uses built-in transcoding to give you the power of conversation across all supported channels and, if required, full control over channel specific features.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@sinch.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.sinch.sdk.domains.conversation.models.dto.v1;

import com.fasterxml.jackson.annotation.JsonFilter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import java.util.Objects;

/**
 * If you are including the AppleBc channel in the &#x60;channel_identifier&#x60; property, you must
 * include this object.
 */
@JsonPropertyOrder({
  AppleBcCredentialsDto.JSON_PROPERTY_BUSINESS_CHAT_ACCOUNT_ID,
  AppleBcCredentialsDto.JSON_PROPERTY_MERCHANT_ID,
  AppleBcCredentialsDto.JSON_PROPERTY_APPLE_PAY_CERTIFICATE_REFERENCE,
  AppleBcCredentialsDto.JSON_PROPERTY_APPLE_PAY_CERTIFICATE_PASSWORD
})
@JsonFilter("uninitializedFilter")
@JsonInclude(value = JsonInclude.Include.CUSTOM)
public class AppleBcCredentialsDto {
  private static final long serialVersionUID = 1L;
  public static final String JSON_PROPERTY_BUSINESS_CHAT_ACCOUNT_ID = "business_chat_account_id";
  private String businessChatAccountId;
  private boolean businessChatAccountIdDefined = false;

  public static final String JSON_PROPERTY_MERCHANT_ID = "merchant_id";
  private String merchantId;
  private boolean merchantIdDefined = false;

  public static final String JSON_PROPERTY_APPLE_PAY_CERTIFICATE_REFERENCE =
      "apple_pay_certificate_reference";
  private String applePayCertificateReference;
  private boolean applePayCertificateReferenceDefined = false;

  public static final String JSON_PROPERTY_APPLE_PAY_CERTIFICATE_PASSWORD =
      "apple_pay_certificate_password";
  private String applePayCertificatePassword;
  private boolean applePayCertificatePasswordDefined = false;

  public AppleBcCredentialsDto() {}

  public AppleBcCredentialsDto businessChatAccountId(String businessChatAccountId) {
    this.businessChatAccountId = businessChatAccountId;
    this.businessChatAccountIdDefined = true;
    return this;
  }

  /**
   * The ID that identifies a Business Chat Account (BCA).
   *
   * @return businessChatAccountId
   */
  @JsonProperty(JSON_PROPERTY_BUSINESS_CHAT_ACCOUNT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getBusinessChatAccountId() {
    return businessChatAccountId;
  }

  @JsonIgnore
  public boolean getBusinessChatAccountIdDefined() {
    return businessChatAccountIdDefined;
  }

  @JsonProperty(JSON_PROPERTY_BUSINESS_CHAT_ACCOUNT_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setBusinessChatAccountId(String businessChatAccountId) {
    this.businessChatAccountId = businessChatAccountId;
    this.businessChatAccountIdDefined = true;
  }

  public AppleBcCredentialsDto merchantId(String merchantId) {
    this.merchantId = merchantId;
    this.merchantIdDefined = true;
    return this;
  }

  /**
   * Merchant ID, required if our client wants to use Apple Pay.
   *
   * @return merchantId
   */
  @JsonProperty(JSON_PROPERTY_MERCHANT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getMerchantId() {
    return merchantId;
  }

  @JsonIgnore
  public boolean getMerchantIdDefined() {
    return merchantIdDefined;
  }

  @JsonProperty(JSON_PROPERTY_MERCHANT_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMerchantId(String merchantId) {
    this.merchantId = merchantId;
    this.merchantIdDefined = true;
  }

  public AppleBcCredentialsDto applePayCertificateReference(String applePayCertificateReference) {
    this.applePayCertificateReference = applePayCertificateReference;
    this.applePayCertificateReferenceDefined = true;
    return this;
  }

  /**
   * Certificate reference, required if our client wants to use Apple Pay.
   *
   * @return applePayCertificateReference
   */
  @JsonProperty(JSON_PROPERTY_APPLE_PAY_CERTIFICATE_REFERENCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getApplePayCertificateReference() {
    return applePayCertificateReference;
  }

  @JsonIgnore
  public boolean getApplePayCertificateReferenceDefined() {
    return applePayCertificateReferenceDefined;
  }

  @JsonProperty(JSON_PROPERTY_APPLE_PAY_CERTIFICATE_REFERENCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setApplePayCertificateReference(String applePayCertificateReference) {
    this.applePayCertificateReference = applePayCertificateReference;
    this.applePayCertificateReferenceDefined = true;
  }

  public AppleBcCredentialsDto applePayCertificatePassword(String applePayCertificatePassword) {
    this.applePayCertificatePassword = applePayCertificatePassword;
    this.applePayCertificatePasswordDefined = true;
    return this;
  }

  /**
   * Certificate password, required if our client wants to use Apple Pay.
   *
   * @return applePayCertificatePassword
   */
  @JsonProperty(JSON_PROPERTY_APPLE_PAY_CERTIFICATE_PASSWORD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getApplePayCertificatePassword() {
    return applePayCertificatePassword;
  }

  @JsonIgnore
  public boolean getApplePayCertificatePasswordDefined() {
    return applePayCertificatePasswordDefined;
  }

  @JsonProperty(JSON_PROPERTY_APPLE_PAY_CERTIFICATE_PASSWORD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setApplePayCertificatePassword(String applePayCertificatePassword) {
    this.applePayCertificatePassword = applePayCertificatePassword;
    this.applePayCertificatePasswordDefined = true;
  }

  /** Return true if this AppleBcCredentials object is equal to o. */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AppleBcCredentialsDto appleBcCredentials = (AppleBcCredentialsDto) o;
    return Objects.equals(this.businessChatAccountId, appleBcCredentials.businessChatAccountId)
        && Objects.equals(this.merchantId, appleBcCredentials.merchantId)
        && Objects.equals(
            this.applePayCertificateReference, appleBcCredentials.applePayCertificateReference)
        && Objects.equals(
            this.applePayCertificatePassword, appleBcCredentials.applePayCertificatePassword);
  }

  @Override
  public int hashCode() {
    return Objects.hash(
        businessChatAccountId,
        merchantId,
        applePayCertificateReference,
        applePayCertificatePassword);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AppleBcCredentialsDto {\n");
    sb.append("    businessChatAccountId: ")
        .append(toIndentedString(businessChatAccountId))
        .append("\n");
    sb.append("    merchantId: ").append(toIndentedString(merchantId)).append("\n");
    sb.append("    applePayCertificateReference: ")
        .append(toIndentedString(applePayCertificateReference))
        .append("\n");
    sb.append("    applePayCertificatePassword: ")
        .append(toIndentedString(applePayCertificatePassword))
        .append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
