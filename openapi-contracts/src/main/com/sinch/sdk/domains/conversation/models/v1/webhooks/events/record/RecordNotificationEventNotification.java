/*
 * Conversation API | Sinch
 * Send and receive messages globally over SMS, RCS, WhatsApp, Viber Business, Facebook messenger and other popular channels using the Sinch Conversation API.  The Conversation API endpoint uses built-in transcoding to give you the power of conversation across all supported channels and, if required, full control over channel specific features.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@sinch.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.sinch.sdk.domains.conversation.models.v1.webhooks.events.record;

import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.sinch.sdk.core.utils.EnumDynamic;
import com.sinch.sdk.core.utils.EnumSupportDynamic;
import com.sinch.sdk.domains.conversation.models.v1.ChannelIdentity;
import com.sinch.sdk.domains.conversation.models.v1.ProcessingMode;
import com.sinch.sdk.domains.conversation.models.v1.Reason;
import java.util.Arrays;
import java.util.stream.Stream;

/** RecordNotificationEventNotification */
@JsonDeserialize(builder = RecordNotificationEventNotificationImpl.Builder.class)
public interface RecordNotificationEventNotification {

  /**
   * The ID of the entity.
   *
   * @return entityId
   */
  String getEntityId();

  /** Record status for a specific entity */
  public class RecordStatusEnum extends EnumDynamic<String, RecordStatusEnum> {
    public static final RecordStatusEnum RECORD_STATUS_UNSPECIFIED =
        new RecordStatusEnum("RECORD_STATUS_UNSPECIFIED");
    public static final RecordStatusEnum EVENT_RECORD_STORED =
        new RecordStatusEnum("EVENT_RECORD_STORED");

    private static final EnumSupportDynamic<String, RecordStatusEnum> ENUM_SUPPORT =
        new EnumSupportDynamic<>(
            RecordStatusEnum.class,
            RecordStatusEnum::new,
            Arrays.asList(RECORD_STATUS_UNSPECIFIED, EVENT_RECORD_STORED));

    private RecordStatusEnum(String value) {
      super(value);
    }

    public static Stream<RecordStatusEnum> values() {
      return ENUM_SUPPORT.values();
    }

    public static RecordStatusEnum from(String value) {
      return ENUM_SUPPORT.from(value);
    }

    public static String valueOf(RecordStatusEnum e) {
      return ENUM_SUPPORT.valueOf(e);
    }
  }

  /**
   * Record status for a specific entity
   *
   * @return recordStatus
   */
  RecordStatusEnum getRecordStatus();

  /**
   * Get channelIdentity
   *
   * @return channelIdentity
   */
  ChannelIdentity getChannelIdentity();

  /**
   * The ID of the contact. Will not be present for apps in Dispatch Mode.
   *
   * @return contactId
   */
  String getContactId();

  /**
   * The ID of the conversation. Will not be present for apps in Dispatch Mode.
   *
   * @return conversationId
   */
  String getConversationId();

  /**
   * Get reason
   *
   * @return reason
   */
  Reason getReason();

  /**
   * Get processingMode
   *
   * @return processingMode
   */
  ProcessingMode getProcessingMode();

  /**
   * Getting builder
   *
   * @return New Builder instance
   */
  static Builder builder() {
    return new RecordNotificationEventNotificationImpl.Builder();
  }

  /** Dedicated Builder */
  interface Builder {

    /**
     * see getter
     *
     * @param entityId see getter
     * @return Current builder
     * @see #getEntityId
     */
    Builder setEntityId(String entityId);

    /**
     * see getter
     *
     * @param recordStatus see getter
     * @return Current builder
     * @see #getRecordStatus
     */
    Builder setRecordStatus(RecordStatusEnum recordStatus);

    /**
     * see getter
     *
     * @param channelIdentity see getter
     * @return Current builder
     * @see #getChannelIdentity
     */
    Builder setChannelIdentity(ChannelIdentity channelIdentity);

    /**
     * see getter
     *
     * @param contactId see getter
     * @return Current builder
     * @see #getContactId
     */
    Builder setContactId(String contactId);

    /**
     * see getter
     *
     * @param conversationId see getter
     * @return Current builder
     * @see #getConversationId
     */
    Builder setConversationId(String conversationId);

    /**
     * see getter
     *
     * @param reason see getter
     * @return Current builder
     * @see #getReason
     */
    Builder setReason(Reason reason);

    /**
     * see getter
     *
     * @param processingMode see getter
     * @return Current builder
     * @see #getProcessingMode
     */
    Builder setProcessingMode(ProcessingMode processingMode);

    /**
     * Create instance
     *
     * @return The instance build with current builder values
     */
    RecordNotificationEventNotification build();
  }
}
