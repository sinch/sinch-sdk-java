/*
 * Conversation API | Sinch
 * Send and receive messages globally over SMS, RCS, WhatsApp, Viber Business, Facebook messenger and other popular channels using the Sinch Conversation API.  The Conversation API endpoint uses built-in transcoding to give you the power of conversation across all supported channels and, if required, full control over channel specific features.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@sinch.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.sinch.sdk.domains.conversation.models.dto.v1;

import com.fasterxml.jackson.annotation.JsonFilter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/** ListMessageListMessageDto */
@JsonPropertyOrder({
  ListMessageListMessageDto.JSON_PROPERTY_TITLE,
  ListMessageListMessageDto.JSON_PROPERTY_SECTIONS,
  ListMessageListMessageDto.JSON_PROPERTY_DESCRIPTION,
  ListMessageListMessageDto.JSON_PROPERTY_MESSAGE_PROPERTIES
})
@JsonFilter("uninitializedFilter")
@JsonInclude(value = JsonInclude.Include.CUSTOM)
public class ListMessageListMessageDto {
  private static final long serialVersionUID = 1L;
  public static final String JSON_PROPERTY_TITLE = "title";
  private String title;
  private boolean titleDefined = false;

  public static final String JSON_PROPERTY_SECTIONS = "sections";
  private List<ListSectionDto> sections;
  private boolean sectionsDefined = false;

  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  private String description;
  private boolean descriptionDefined = false;

  public static final String JSON_PROPERTY_MESSAGE_PROPERTIES = "message_properties";
  private ListMessageListMessageMessagePropertiesDto messageProperties;
  private boolean messagePropertiesDefined = false;

  public ListMessageListMessageDto() {}

  public ListMessageListMessageDto title(String title) {
    this.title = title;
    this.titleDefined = true;
    return this;
  }

  /**
   * A title for the message that is displayed near the products or choices.
   *
   * @return title
   */
  @JsonProperty(JSON_PROPERTY_TITLE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getTitle() {
    return title;
  }

  @JsonIgnore
  public boolean getTitleDefined() {
    return titleDefined;
  }

  @JsonProperty(JSON_PROPERTY_TITLE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTitle(String title) {
    this.title = title;
    this.titleDefined = true;
  }

  public ListMessageListMessageDto sections(List<ListSectionDto> sections) {
    this.sections = sections;
    this.sectionsDefined = true;
    return this;
  }

  public ListMessageListMessageDto addSectionsItem(ListSectionDto sectionsItem) {
    if (this.sections == null) {
      this.sections = new ArrayList<>();
    }
    this.sectionsDefined = true;
    this.sections.add(sectionsItem);
    return this;
  }

  /**
   * List of ListSection objects containing choices to be presented in the list message.
   *
   * @return sections
   */
  @JsonProperty(JSON_PROPERTY_SECTIONS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public List<ListSectionDto> getSections() {
    return sections;
  }

  @JsonIgnore
  public boolean getSectionsDefined() {
    return sectionsDefined;
  }

  @JsonProperty(JSON_PROPERTY_SECTIONS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSections(List<ListSectionDto> sections) {
    this.sections = sections;
    this.sectionsDefined = true;
  }

  public ListMessageListMessageDto description(String description) {
    this.description = description;
    this.descriptionDefined = true;
    return this;
  }

  /**
   * This is an optional field, containing a description for the message.
   *
   * @return description
   */
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getDescription() {
    return description;
  }

  @JsonIgnore
  public boolean getDescriptionDefined() {
    return descriptionDefined;
  }

  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDescription(String description) {
    this.description = description;
    this.descriptionDefined = true;
  }

  public ListMessageListMessageDto messageProperties(
      ListMessageListMessageMessagePropertiesDto messageProperties) {
    this.messageProperties = messageProperties;
    this.messagePropertiesDefined = true;
    return this;
  }

  /**
   * Get messageProperties
   *
   * @return messageProperties
   */
  @JsonProperty(JSON_PROPERTY_MESSAGE_PROPERTIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public ListMessageListMessageMessagePropertiesDto getMessageProperties() {
    return messageProperties;
  }

  @JsonIgnore
  public boolean getMessagePropertiesDefined() {
    return messagePropertiesDefined;
  }

  @JsonProperty(JSON_PROPERTY_MESSAGE_PROPERTIES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMessageProperties(ListMessageListMessageMessagePropertiesDto messageProperties) {
    this.messageProperties = messageProperties;
    this.messagePropertiesDefined = true;
  }

  /** Return true if this ListMessage_list_message object is equal to o. */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListMessageListMessageDto listMessageListMessage = (ListMessageListMessageDto) o;
    return Objects.equals(this.title, listMessageListMessage.title)
        && Objects.equals(this.sections, listMessageListMessage.sections)
        && Objects.equals(this.description, listMessageListMessage.description)
        && Objects.equals(this.messageProperties, listMessageListMessage.messageProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(title, sections, description, messageProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListMessageListMessageDto {\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    sections: ").append(toIndentedString(sections)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    messageProperties: ").append(toIndentedString(messageProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
