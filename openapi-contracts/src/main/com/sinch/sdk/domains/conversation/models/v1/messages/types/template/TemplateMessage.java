/*
 * Conversation API | Sinch
 * Send and receive messages globally over SMS, RCS, WhatsApp, Viber Business, Facebook messenger and other popular channels using the Sinch Conversation API.  The Conversation API endpoint uses built-in transcoding to give you the power of conversation across all supported channels and, if required, full control over channel specific features.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@sinch.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.sinch.sdk.domains.conversation.models.v1.messages.types.template;

import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.sinch.sdk.domains.conversation.models.v1.ConversationChannel;
import com.sinch.sdk.domains.conversation.models.v1.TemplateReference;
import java.util.Map;

/** Template Message */
@JsonDeserialize(builder = TemplateMessageImpl.Builder.class)
public interface TemplateMessage
    extends com.sinch.sdk.domains.conversation.models.v1.messages.AppMessage {

  /**
   * Optional. Channel specific template reference with parameters per channel. The channel template
   * if exists overrides the omnichannel template. At least one of <code>channel_template</code> or
   * <code>omni_template</code> needs to be present. The key in the map must point to a valid
   * conversation channel as defined by the enum ConversationChannel.
   *
   * @return channelTemplate
   */
  Map<ConversationChannel, TemplateReference> getChannelTemplate();

  /**
   * Get omniTemplate
   *
   * @return omniTemplate
   */
  TemplateReference getOmniTemplate();

  /**
   * Getting builder
   *
   * @return New Builder instance
   */
  static Builder builder() {
    return new TemplateMessageImpl.Builder();
  }

  /** Dedicated Builder */
  interface Builder {

    /**
     * see getter
     *
     * @param channelTemplate see getter
     * @return Current builder
     * @see #getChannelTemplate
     */
    Builder setChannelTemplate(Map<ConversationChannel, TemplateReference> channelTemplate);

    /**
     * see getter
     *
     * @param omniTemplate see getter
     * @return Current builder
     * @see #getOmniTemplate
     */
    Builder setOmniTemplate(TemplateReference omniTemplate);

    /**
     * Create instance
     *
     * @return The instance build with current builder values
     */
    TemplateMessage build();
  }
}
