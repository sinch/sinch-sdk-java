/*
 * API Overview | Sinch
 *
 * OpenAPI document version: v1
 * Contact: Support@sinch.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

package com.sinch.sdk.domains.sms.models.v1.batches.response;

import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.sinch.sdk.core.utils.EnumDynamic;
import com.sinch.sdk.core.utils.EnumSupportDynamic;
import com.sinch.sdk.domains.sms.models.v1.batches.DeliveryReportType;
import java.time.Instant;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.stream.Stream;

/** BatchText */
@JsonDeserialize(builder = BatchTextImpl.Builder.class)
public interface BatchText extends Batch {

  /**
   * Unique identifier for batch
   *
   * @return id
   * @readOnly <em>This field is returned by the server and cannot be modified</em>
   */
  String getId();

  /**
   * List of Phone numbers and group IDs that will receive the batch. <a
   * href="https://community.sinch.com/t5/Glossary/MSISDN/ta-p/7628">More info</a>
   *
   * @return to
   */
  List<String> getTo();

  /**
   * Sender number. Must be valid phone number, short code or alphanumeric. Required if Automatic
   * Default Originator not configured.
   *
   * @return from
   */
  String getFrom();

  /**
   * Indicates if the batch has been canceled or not.
   *
   * @return canceled
   * @readOnly <em>This field is returned by the server and cannot be modified</em>
   */
  Boolean getCanceled();

  /**
   * Contains the parameters that will be used for customizing the message for each recipient. <a
   * href="/docs/sms/resources/message-info/message-parameterization">Click here to learn more about
   * parameterization</a>.
   *
   * @return parameters
   */
  Map<String, Map<String, String>> getParameters();

  /**
   * The message content
   *
   * @return body
   */
  String getBody();

  /** Regular SMS */
  public class TypeEnum extends EnumDynamic<String, TypeEnum> {
    public static final TypeEnum MT_TEXT = new TypeEnum("mt_text");

    private static final EnumSupportDynamic<String, TypeEnum> ENUM_SUPPORT =
        new EnumSupportDynamic<>(TypeEnum.class, TypeEnum::new, Arrays.asList(MT_TEXT));

    private TypeEnum(String value) {
      super(value);
    }

    public static Stream<TypeEnum> values() {
      return ENUM_SUPPORT.values();
    }

    public static TypeEnum from(String value) {
      return ENUM_SUPPORT.from(value);
    }

    public static String valueOf(TypeEnum e) {
      return ENUM_SUPPORT.valueOf(e);
    }
  }

  /**
   * Timestamp for when batch was created. Formatted as <a
   * href="https://en.wikipedia.org/wiki/ISO_8601">ISO-8601</a>:<code>YYYY-MM-DDThh:mm:ss.SSSZ
   * </code>.
   *
   * @return createdAt
   * @readOnly <em>This field is returned by the server and cannot be modified</em>
   */
  Instant getCreatedAt();

  /**
   * Timestamp for when batch was last updated. Formatted as <a
   * href="https://en.wikipedia.org/wiki/ISO_8601">ISO-8601</a>:<code>YYYY-MM-DDThh:mm:ss.SSSZ
   * </code>.
   *
   * @return modifiedAt
   * @readOnly <em>This field is returned by the server and cannot be modified</em>
   */
  Instant getModifiedAt();

  /**
   * Get deliveryReport
   *
   * @return deliveryReport
   */
  DeliveryReportType getDeliveryReport();

  /**
   * If set in the future, the message will be delayed until <code>send_at</code> occurs. Must be
   * before <code>expire_at</code>. If set in the past, messages will be sent immediately. Formatted
   * as <a href="https://en.wikipedia.org/wiki/ISO_8601">ISO-8601</a>: <code>
   * YYYY-MM-DDThh:mm:ss.SSSZ</code>.
   *
   * @return sendAt
   */
  Instant getSendAt();

  /**
   * If set, the system will stop trying to deliver the message at this point. Must be after <code>
   * send_at</code>. Default and max is 3 days after <code>send_at</code>. Formatted as <a
   * href="https://en.wikipedia.org/wiki/ISO_8601">ISO-8601</a>: <code>YYYY-MM-DDThh:mm:ss.SSSZ
   * </code>.
   *
   * @return expireAt
   */
  Instant getExpireAt();

  /**
   * Override the default callback URL for this batch. Must be valid URL.
   *
   * @return callbackUrl
   */
  String getCallbackUrl();

  /**
   * The client identifier of a batch message. If set, the identifier will be added in the delivery
   * report/callback of this batch
   *
   * @return clientReference
   */
  String getClientReference();

  /**
   * If set to <code>true</code>, then <a
   * href="/docs/sms/api-reference/sms/tag/Batches/#tag/Batches/operation/deliveryFeedback">feedback</a>
   * is expected after successful delivery.
   *
   * @return feedbackEnabled
   */
  Boolean getFeedbackEnabled();

  /**
   * Shows message on screen without user interaction while not saving the message to the inbox.
   *
   * @return flashMessage
   */
  Boolean getFlashMessage();

  /**
   * If set to <code>true</code> the message will be shortened when exceeding one part.
   *
   * @return truncateConcat
   */
  Boolean getTruncateConcat();

  /**
   * Message will be dispatched only if it is not split to more parts than Max Number of Message
   * Parts
   *
   * <p>minimum: 1
   *
   * @return maxNumberOfMessageParts
   */
  Integer getMaxNumberOfMessageParts();

  /**
   * The type of number for the sender number. Use to override the automatic detection.
   *
   * <p>minimum: 0 maximum: 6
   *
   * @return fromTon
   */
  Integer getFromTon();

  /**
   * Number Plan Indicator for the sender number. Use to override the automatic detection.
   *
   * <p>minimum: 0 maximum: 18
   *
   * @return fromNpi
   */
  Integer getFromNpi();

  /**
   * Getting builder
   *
   * @return New Builder instance
   */
  static Builder builder() {
    return new BatchTextImpl.Builder();
  }

  /** Dedicated Builder */
  interface Builder {

    /**
     * see getter
     *
     * @param id see getter
     * @return Current builder
     * @see #getId
     * @readOnly <em>This field is returned by the server and cannot be modified</em>
     */
    Builder setId(String id);

    /**
     * see getter
     *
     * @param to see getter
     * @return Current builder
     * @see #getTo
     */
    Builder setTo(List<String> to);

    /**
     * see getter
     *
     * @param from see getter
     * @return Current builder
     * @see #getFrom
     */
    Builder setFrom(String from);

    /**
     * see getter
     *
     * @param canceled see getter
     * @return Current builder
     * @see #getCanceled
     * @readOnly <em>This field is returned by the server and cannot be modified</em>
     */
    Builder setCanceled(Boolean canceled);

    /**
     * see getter
     *
     * @param parameters see getter
     * @return Current builder
     * @see #getParameters
     */
    Builder setParameters(Map<String, Map<String, String>> parameters);

    /**
     * see getter
     *
     * @param body see getter
     * @return Current builder
     * @see #getBody
     */
    Builder setBody(String body);

    /**
     * see getter
     *
     * @param createdAt see getter
     * @return Current builder
     * @see #getCreatedAt
     * @readOnly <em>This field is returned by the server and cannot be modified</em>
     */
    Builder setCreatedAt(Instant createdAt);

    /**
     * see getter
     *
     * @param modifiedAt see getter
     * @return Current builder
     * @see #getModifiedAt
     * @readOnly <em>This field is returned by the server and cannot be modified</em>
     */
    Builder setModifiedAt(Instant modifiedAt);

    /**
     * see getter
     *
     * @param deliveryReport see getter
     * @return Current builder
     * @see #getDeliveryReport
     */
    Builder setDeliveryReport(DeliveryReportType deliveryReport);

    /**
     * see getter
     *
     * @param sendAt see getter
     * @return Current builder
     * @see #getSendAt
     */
    Builder setSendAt(Instant sendAt);

    /**
     * see getter
     *
     * @param expireAt see getter
     * @return Current builder
     * @see #getExpireAt
     */
    Builder setExpireAt(Instant expireAt);

    /**
     * see getter
     *
     * @param callbackUrl see getter
     * @return Current builder
     * @see #getCallbackUrl
     */
    Builder setCallbackUrl(String callbackUrl);

    /**
     * see getter
     *
     * @param clientReference see getter
     * @return Current builder
     * @see #getClientReference
     */
    Builder setClientReference(String clientReference);

    /**
     * see getter
     *
     * @param feedbackEnabled see getter
     * @return Current builder
     * @see #getFeedbackEnabled
     */
    Builder setFeedbackEnabled(Boolean feedbackEnabled);

    /**
     * see getter
     *
     * @param flashMessage see getter
     * @return Current builder
     * @see #getFlashMessage
     */
    Builder setFlashMessage(Boolean flashMessage);

    /**
     * see getter
     *
     * @param truncateConcat see getter
     * @return Current builder
     * @see #getTruncateConcat
     */
    Builder setTruncateConcat(Boolean truncateConcat);

    /**
     * see getter
     *
     * @param maxNumberOfMessageParts see getter
     * @return Current builder
     * @see #getMaxNumberOfMessageParts
     */
    Builder setMaxNumberOfMessageParts(Integer maxNumberOfMessageParts);

    /**
     * see getter
     *
     * @param fromTon see getter
     * @return Current builder
     * @see #getFromTon
     */
    Builder setFromTon(Integer fromTon);

    /**
     * see getter
     *
     * @param fromNpi see getter
     * @return Current builder
     * @see #getFromNpi
     */
    Builder setFromNpi(Integer fromNpi);

    /**
     * Create instance
     *
     * @return The instance build with current builder values
     */
    BatchText build();
  }
}
