/*
 * API Overview | Sinch
 * Sinch SMS API is one of the easiest APIs we offer and enables you to add fast and reliable global SMS to your applications. Send single messages, scheduled batch messages, use available message templates and more.
 *
 * The version of the OpenAPI document: v1
 * Contact: Support@sinch.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.sinch.sdk.domains.sms.models.dto.v1;

import com.fasterxml.jackson.annotation.JsonFilter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import java.util.Objects;

/** DryRun200ResponsePerRecipientInnerDto */
@JsonPropertyOrder({
  DryRun200ResponsePerRecipientInnerDto.JSON_PROPERTY_RECIPIENT,
  DryRun200ResponsePerRecipientInnerDto.JSON_PROPERTY_MESSAGE_PART,
  DryRun200ResponsePerRecipientInnerDto.JSON_PROPERTY_BODY,
  DryRun200ResponsePerRecipientInnerDto.JSON_PROPERTY_ENCODING
})
@JsonFilter("uninitializedFilter")
@JsonInclude(value = JsonInclude.Include.CUSTOM)
public class DryRun200ResponsePerRecipientInnerDto {
  private static final long serialVersionUID = 1L;
  public static final String JSON_PROPERTY_RECIPIENT = "recipient";
  private String recipient;
  private boolean recipientDefined = false;

  public static final String JSON_PROPERTY_MESSAGE_PART = "message_part";
  private String messagePart;
  private boolean messagePartDefined = false;

  public static final String JSON_PROPERTY_BODY = "body";
  private String body;
  private boolean bodyDefined = false;

  public static final String JSON_PROPERTY_ENCODING = "encoding";
  private String encoding;
  private boolean encodingDefined = false;

  public DryRun200ResponsePerRecipientInnerDto() {}

  public DryRun200ResponsePerRecipientInnerDto recipient(String recipient) {
    this.recipient = recipient;
    this.recipientDefined = true;
    return this;
  }

  /**
   * Get recipient
   *
   * @return recipient
   */
  @JsonProperty(JSON_PROPERTY_RECIPIENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getRecipient() {
    return recipient;
  }

  @JsonIgnore
  public boolean getRecipientDefined() {
    return recipientDefined;
  }

  @JsonProperty(JSON_PROPERTY_RECIPIENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRecipient(String recipient) {
    this.recipient = recipient;
    this.recipientDefined = true;
  }

  public DryRun200ResponsePerRecipientInnerDto messagePart(String messagePart) {
    this.messagePart = messagePart;
    this.messagePartDefined = true;
    return this;
  }

  /**
   * Get messagePart
   *
   * @return messagePart
   */
  @JsonProperty(JSON_PROPERTY_MESSAGE_PART)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getMessagePart() {
    return messagePart;
  }

  @JsonIgnore
  public boolean getMessagePartDefined() {
    return messagePartDefined;
  }

  @JsonProperty(JSON_PROPERTY_MESSAGE_PART)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMessagePart(String messagePart) {
    this.messagePart = messagePart;
    this.messagePartDefined = true;
  }

  public DryRun200ResponsePerRecipientInnerDto body(String body) {
    this.body = body;
    this.bodyDefined = true;
    return this;
  }

  /**
   * Get body
   *
   * @return body
   */
  @JsonProperty(JSON_PROPERTY_BODY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getBody() {
    return body;
  }

  @JsonIgnore
  public boolean getBodyDefined() {
    return bodyDefined;
  }

  @JsonProperty(JSON_PROPERTY_BODY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setBody(String body) {
    this.body = body;
    this.bodyDefined = true;
  }

  public DryRun200ResponsePerRecipientInnerDto encoding(String encoding) {
    this.encoding = encoding;
    this.encodingDefined = true;
    return this;
  }

  /**
   * Get encoding
   *
   * @return encoding
   */
  @JsonProperty(JSON_PROPERTY_ENCODING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getEncoding() {
    return encoding;
  }

  @JsonIgnore
  public boolean getEncodingDefined() {
    return encodingDefined;
  }

  @JsonProperty(JSON_PROPERTY_ENCODING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEncoding(String encoding) {
    this.encoding = encoding;
    this.encodingDefined = true;
  }

  /** Return true if this Dry_Run_200_response_per_recipient_inner object is equal to o. */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DryRun200ResponsePerRecipientInnerDto dryRun200ResponsePerRecipientInner =
        (DryRun200ResponsePerRecipientInnerDto) o;
    return Objects.equals(this.recipient, dryRun200ResponsePerRecipientInner.recipient)
        && Objects.equals(this.messagePart, dryRun200ResponsePerRecipientInner.messagePart)
        && Objects.equals(this.body, dryRun200ResponsePerRecipientInner.body)
        && Objects.equals(this.encoding, dryRun200ResponsePerRecipientInner.encoding);
  }

  @Override
  public int hashCode() {
    return Objects.hash(recipient, messagePart, body, encoding);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DryRun200ResponsePerRecipientInnerDto {\n");
    sb.append("    recipient: ").append(toIndentedString(recipient)).append("\n");
    sb.append("    messagePart: ").append(toIndentedString(messagePart)).append("\n");
    sb.append("    body: ").append(toIndentedString(body)).append("\n");
    sb.append("    encoding: ").append(toIndentedString(encoding)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
