/*
 * API Overview | Sinch
 *
 * OpenAPI document version: v1
 * Contact: Support@sinch.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

package com.sinch.sdk.domains.sms.api.v1;

import com.sinch.sdk.core.exceptions.ApiException;
import com.sinch.sdk.domains.sms.models.v1.batches.request.BatchRequest;
import com.sinch.sdk.domains.sms.models.v1.batches.request.DryRunQueryParameters;
import com.sinch.sdk.domains.sms.models.v1.batches.request.ListBatchesQueryParameters;
import com.sinch.sdk.domains.sms.models.v1.batches.request.SendDeliveryFeedbackRequest;
import com.sinch.sdk.domains.sms.models.v1.batches.request.UpdateBatchRequest;
import com.sinch.sdk.domains.sms.models.v1.batches.response.BatchResponse;
import com.sinch.sdk.domains.sms.models.v1.batches.response.DryRunResponse;
import com.sinch.sdk.domains.sms.models.v1.batches.response.ListBatchesResponse;

/** Batches Service */
public interface BatchesService {

  /**
   * Cancel a batch message A batch can be canceled at any point. If a batch is canceled while
   * it&#39;s currently being delivered some messages currently being processed might still be
   * delivered. The delivery report will indicate which messages were canceled and which
   * weren&#39;t. Canceling a batch scheduled in the future will result in an empty delivery report
   * while canceling an already sent batch would result in no change to the completed delivery
   * report.
   *
   * @param batchId The batch ID you received from sending a message. (required)
   * @return BatchResponse
   * @throws ApiException if fails to make API call
   */
  BatchResponse cancel(String batchId) throws ApiException;

  /**
   * Dry run (using default parameters) This operation will perform a dry run of a batch which
   * calculates the bodies and number of parts for all messages in the batch without actually
   * sending any messages.
   *
   * @param sendRequest (required)
   * @return DryRunResponse
   * @throws ApiException if fails to make API call
   */
  DryRunResponse dryRun(BatchRequest sendRequest) throws ApiException;

  /**
   * Dry run This operation will perform a dry run of a batch which calculates the bodies and number
   * of parts for all messages in the batch without actually sending any messages.
   *
   * @param queryParameter (optional)
   * @param sendRequest (required)
   * @return DryRunResponse
   * @throws ApiException if fails to make API call
   */
  DryRunResponse dryRun(DryRunQueryParameters queryParameter, BatchRequest sendRequest)
      throws ApiException;

  /**
   * Get a batch message This operation returns a specific batch that matches the provided batch ID.
   *
   * @param batchId The batch ID you received from sending a message. (required)
   * @return BatchResponse
   * @throws ApiException if fails to make API call
   */
  BatchResponse get(String batchId) throws ApiException;

  /**
   * List Batches (using default parameters) With the list operation you can list batch messages
   * created in the last 14 days that you have created. This operation supports pagination.
   *
   * @return ListBatchesResponse
   * @throws ApiException if fails to make API call
   */
  ListBatchesResponse list() throws ApiException;

  /**
   * List Batches With the list operation you can list batch messages created in the last 14 days
   * that you have created. This operation supports pagination.
   *
   * @param queryParameter (optional)
   * @return ListBatchesResponse
   * @throws ApiException if fails to make API call
   */
  ListBatchesResponse list(ListBatchesQueryParameters queryParameter) throws ApiException;

  /**
   * Replace a batch This operation will replace all the parameters of a batch with the provided
   * values. It is the same as cancelling a batch and sending a new one instead.
   *
   * @param batchId The batch ID you received from sending a message. (required)
   * @param sendRequest (required)
   * @return BatchResponse
   * @throws ApiException if fails to make API call
   */
  BatchResponse replace(String batchId, BatchRequest sendRequest) throws ApiException;

  /**
   * Send delivery feedback for a message Send feedback if your system can confirm successful
   * message delivery. Feedback can only be provided if &#x60;feedback_enabled&#x60; was set when
   * batch was submitted. **Batches**: It is possible to submit feedback multiple times for the same
   * batch for different recipients. Feedback without specified recipients is treated as successful
   * message delivery to all recipients referenced in the batch. Note that the
   * &#x60;recipients&#x60; key is still required even if the value is empty. **Groups**: If the
   * batch message was creating using a group ID, at least one recipient is required. Excluding
   * recipients (an empty recipient list) does not work and will result in a failed request.
   *
   * @param batchId The batch ID you received from sending a message. (required)
   * @param sendDeliveryFeedbackRequest A list of phone numbers (MSISDNs) that successfully received
   *     the message. (required)
   * @throws ApiException if fails to make API call
   */
  void sendDeliveryFeedback(String batchId, SendDeliveryFeedbackRequest sendDeliveryFeedbackRequest)
      throws ApiException;

  /**
   * Send Send a message or a batch of messages. Depending on the length of the body, one message
   * might be split into multiple parts and charged accordingly. Any groups targeted in a scheduled
   * batch will be evaluated at the time of sending. If a group is deleted between batch creation
   * and scheduled date, it will be considered empty. Be sure to use the correct
   * [region](/docs/sms/api-reference/#base-url) in the server URL.
   *
   * @param sendRequest Default schema is Text if type is not specified. (optional)
   * @return BatchResponse
   * @throws ApiException if fails to make API call
   */
  BatchResponse send(BatchRequest sendRequest) throws ApiException;

  /**
   * Update a Batch message This operation updates all specified parameters of a batch that matches
   * the provided batch ID.
   *
   * @param batchId The batch ID you received from sending a message. (required)
   * @param updateBatchRequest (required)
   * @return BatchResponse
   * @throws ApiException if fails to make API call
   */
  BatchResponse update(String batchId, UpdateBatchRequest updateBatchRequest) throws ApiException;
}
