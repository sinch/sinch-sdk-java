/*
 * API Overview | Sinch
 *
 * OpenAPI document version: v1
 * Contact: Support@sinch.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

package com.sinch.sdk.domains.sms.api.v1.adapters;

import com.fasterxml.jackson.core.type.TypeReference;
import com.sinch.sdk.core.exceptions.ApiException;
import com.sinch.sdk.core.exceptions.ApiExceptionBuilder;
import com.sinch.sdk.core.http.AuthManager;
import com.sinch.sdk.core.http.HttpClient;
import com.sinch.sdk.core.http.HttpMapper;
import com.sinch.sdk.core.http.HttpMethod;
import com.sinch.sdk.core.http.HttpRequest;
import com.sinch.sdk.core.http.HttpResponse;
import com.sinch.sdk.core.http.HttpStatus;
import com.sinch.sdk.core.http.URLParameter;
import com.sinch.sdk.core.http.URLParameterUtils;
import com.sinch.sdk.core.http.URLPathUtils;
import com.sinch.sdk.core.models.ServerConfiguration;
import com.sinch.sdk.core.models.pagination.Page;
import com.sinch.sdk.domains.sms.models.v1.groups.Group;
import com.sinch.sdk.domains.sms.models.v1.groups.request.GroupRequest;
import com.sinch.sdk.domains.sms.models.v1.groups.request.GroupUpdateRequest;
import com.sinch.sdk.domains.sms.models.v1.groups.request.ListGroupsQueryParameters;
import com.sinch.sdk.domains.sms.models.v1.groups.response.ListGroupsResponse;
import com.sinch.sdk.domains.sms.models.v1.groups.response.internal.ApiGroupList;
import com.sinch.sdk.domains.sms.models.v1.internal.SMSCursorPageNavigator;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Logger;

public class GroupsServiceImpl implements com.sinch.sdk.domains.sms.api.v1.GroupsService {

  private static final Logger LOGGER = Logger.getLogger(GroupsServiceImpl.class.getName());
  private final HttpClient httpClient;
  private final ServerConfiguration serverConfiguration;
  private final Map<String, AuthManager> authManagersByOasSecuritySchemes;
  private final HttpMapper mapper;

  private final String servicePlanId;

  public GroupsServiceImpl(
      HttpClient httpClient,
      ServerConfiguration serverConfiguration,
      Map<String, AuthManager> authManagersByOasSecuritySchemes,
      HttpMapper mapper,
      String servicePlanId) {
    this.httpClient = httpClient;
    this.serverConfiguration = serverConfiguration;
    this.authManagersByOasSecuritySchemes = authManagersByOasSecuritySchemes;
    this.mapper = mapper;
    this.servicePlanId = servicePlanId;
  }

  @Override
  public Group create(GroupRequest groupRequest) throws ApiException {

    LOGGER.finest("[create]" + " " + "groupRequest: " + groupRequest);

    HttpRequest httpRequest = createRequestBuilder(groupRequest);
    HttpResponse response =
        httpClient.invokeAPI(
            this.serverConfiguration, this.authManagersByOasSecuritySchemes, httpRequest);

    if (HttpStatus.isSuccessfulStatus(response.getCode())) {
      return mapper.deserialize(response, new TypeReference<Group>() {});
    }
    // fallback to default errors handling:
    // all error cases definition are not required from specs: will try some "hardcoded" content
    // parsing
    throw ApiExceptionBuilder.build(
        response.getMessage(),
        response.getCode(),
        mapper.deserialize(response, new TypeReference<HashMap<String, ?>>() {}));
  }

  private HttpRequest createRequestBuilder(GroupRequest groupRequest) throws ApiException {
    // verify the required parameter 'this.servicePlanId' is set
    if (this.servicePlanId == null) {
      throw new ApiException(
          400, "Missing the required parameter 'this.servicePlanId' when calling create");
    }
    // verify the required parameter 'groupRequest' is set
    if (groupRequest == null) {
      throw new ApiException(
          400, "Missing the required parameter 'groupRequest' when calling create");
    }

    String localVarPath =
        "/xms/v1/{service_plan_id}/groups"
            .replaceAll(
                "\\{" + "service_plan_id" + "\\}",
                URLPathUtils.encodePathSegment(this.servicePlanId.toString()));

    List<URLParameter> localVarQueryParams = new ArrayList<>();

    Map<String, String> localVarHeaderParams = new HashMap<>();

    final Collection<String> localVarAccepts = Arrays.asList("application/json");

    final Collection<String> localVarContentTypes = Arrays.asList("application/json");

    final Collection<String> localVarAuthNames = Arrays.asList("BearerAuth");
    final String serializedBody = mapper.serialize(localVarContentTypes, groupRequest);

    return new HttpRequest(
        localVarPath,
        HttpMethod.POST,
        localVarQueryParams,
        serializedBody,
        localVarHeaderParams,
        localVarAccepts,
        localVarContentTypes,
        localVarAuthNames);
  }

  @Override
  public void delete(String groupId) throws ApiException {

    LOGGER.finest("[delete]" + " " + "groupId: " + groupId);

    HttpRequest httpRequest = deleteRequestBuilder(groupId);
    HttpResponse response =
        httpClient.invokeAPI(
            this.serverConfiguration, this.authManagersByOasSecuritySchemes, httpRequest);

    if (HttpStatus.isSuccessfulStatus(response.getCode())) {
      return;
    }
    // fallback to default errors handling:
    // all error cases definition are not required from specs: will try some "hardcoded" content
    // parsing
    throw ApiExceptionBuilder.build(
        response.getMessage(),
        response.getCode(),
        mapper.deserialize(response, new TypeReference<HashMap<String, ?>>() {}));
  }

  private HttpRequest deleteRequestBuilder(String groupId) throws ApiException {
    // verify the required parameter 'this.servicePlanId' is set
    if (this.servicePlanId == null) {
      throw new ApiException(
          400, "Missing the required parameter 'this.servicePlanId' when calling delete");
    }
    // verify the required parameter 'groupId' is set
    if (groupId == null) {
      throw new ApiException(400, "Missing the required parameter 'groupId' when calling delete");
    }

    String localVarPath =
        "/xms/v1/{service_plan_id}/groups/{group_id}"
            .replaceAll(
                "\\{" + "service_plan_id" + "\\}",
                URLPathUtils.encodePathSegment(this.servicePlanId.toString()))
            .replaceAll(
                "\\{" + "group_id" + "\\}", URLPathUtils.encodePathSegment(groupId.toString()));

    List<URLParameter> localVarQueryParams = new ArrayList<>();

    Map<String, String> localVarHeaderParams = new HashMap<>();

    final Collection<String> localVarAccepts = Arrays.asList();

    final Collection<String> localVarContentTypes = Arrays.asList();

    final Collection<String> localVarAuthNames = Arrays.asList("BearerAuth");
    final String serializedBody = null;

    return new HttpRequest(
        localVarPath,
        HttpMethod.DELETE,
        localVarQueryParams,
        serializedBody,
        localVarHeaderParams,
        localVarAccepts,
        localVarContentTypes,
        localVarAuthNames);
  }

  @Override
  public Group get(String groupId) throws ApiException {

    LOGGER.finest("[get]" + " " + "groupId: " + groupId);

    HttpRequest httpRequest = getRequestBuilder(groupId);
    HttpResponse response =
        httpClient.invokeAPI(
            this.serverConfiguration, this.authManagersByOasSecuritySchemes, httpRequest);

    if (HttpStatus.isSuccessfulStatus(response.getCode())) {
      return mapper.deserialize(response, new TypeReference<Group>() {});
    }
    // fallback to default errors handling:
    // all error cases definition are not required from specs: will try some "hardcoded" content
    // parsing
    throw ApiExceptionBuilder.build(
        response.getMessage(),
        response.getCode(),
        mapper.deserialize(response, new TypeReference<HashMap<String, ?>>() {}));
  }

  private HttpRequest getRequestBuilder(String groupId) throws ApiException {
    // verify the required parameter 'this.servicePlanId' is set
    if (this.servicePlanId == null) {
      throw new ApiException(
          400, "Missing the required parameter 'this.servicePlanId' when calling get");
    }
    // verify the required parameter 'groupId' is set
    if (groupId == null) {
      throw new ApiException(400, "Missing the required parameter 'groupId' when calling get");
    }

    String localVarPath =
        "/xms/v1/{service_plan_id}/groups/{group_id}"
            .replaceAll(
                "\\{" + "service_plan_id" + "\\}",
                URLPathUtils.encodePathSegment(this.servicePlanId.toString()))
            .replaceAll(
                "\\{" + "group_id" + "\\}", URLPathUtils.encodePathSegment(groupId.toString()));

    List<URLParameter> localVarQueryParams = new ArrayList<>();

    Map<String, String> localVarHeaderParams = new HashMap<>();

    final Collection<String> localVarAccepts = Arrays.asList("application/json");

    final Collection<String> localVarContentTypes = Arrays.asList();

    final Collection<String> localVarAuthNames = Arrays.asList("BearerAuth");
    final String serializedBody = null;

    return new HttpRequest(
        localVarPath,
        HttpMethod.GET,
        localVarQueryParams,
        serializedBody,
        localVarHeaderParams,
        localVarAccepts,
        localVarContentTypes,
        localVarAuthNames);
  }

  @Override
  public ListGroupsResponse list() throws ApiException {

    return list((ListGroupsQueryParameters) null);
  }

  @Override
  public ListGroupsResponse list(ListGroupsQueryParameters queryParameter) throws ApiException {

    LOGGER.finest("[list]" + " " + "queryParameter: " + queryParameter);

    HttpRequest httpRequest = listRequestBuilder(queryParameter);
    HttpResponse response =
        httpClient.invokeAPI(
            this.serverConfiguration, this.authManagersByOasSecuritySchemes, httpRequest);

    if (HttpStatus.isSuccessfulStatus(response.getCode())) {

      ApiGroupList deserialized =
          mapper.deserialize(response, new TypeReference<ApiGroupList>() {});

      return new ListGroupsResponse(
          this,
          new Page<>(
              queryParameter,
              deserialized.getItems(),
              new SMSCursorPageNavigator(deserialized.getPage(), deserialized.getPageSize())));
    }
    // fallback to default errors handling:
    // all error cases definition are not required from specs: will try some "hardcoded" content
    // parsing
    throw ApiExceptionBuilder.build(
        response.getMessage(),
        response.getCode(),
        mapper.deserialize(response, new TypeReference<HashMap<String, ?>>() {}));
  }

  private HttpRequest listRequestBuilder(ListGroupsQueryParameters queryParameter)
      throws ApiException {
    // verify the required parameter 'this.servicePlanId' is set
    if (this.servicePlanId == null) {
      throw new ApiException(
          400, "Missing the required parameter 'this.servicePlanId' when calling list");
    }

    String localVarPath =
        "/xms/v1/{service_plan_id}/groups"
            .replaceAll(
                "\\{" + "service_plan_id" + "\\}",
                URLPathUtils.encodePathSegment(this.servicePlanId.toString()));

    List<URLParameter> localVarQueryParams = new ArrayList<>();
    if (null != queryParameter) {

      URLParameterUtils.addQueryParam(
          queryParameter.getPage(), "page", URLParameter.form, null, localVarQueryParams, true);

      URLParameterUtils.addQueryParam(
          queryParameter.getPageSize(),
          "page_size",
          URLParameter.form,
          null,
          localVarQueryParams,
          true);
    }

    Map<String, String> localVarHeaderParams = new HashMap<>();

    final Collection<String> localVarAccepts = Arrays.asList("application/json");

    final Collection<String> localVarContentTypes = Arrays.asList();

    final Collection<String> localVarAuthNames = Arrays.asList("BearerAuth");
    final String serializedBody = null;

    return new HttpRequest(
        localVarPath,
        HttpMethod.GET,
        localVarQueryParams,
        serializedBody,
        localVarHeaderParams,
        localVarAccepts,
        localVarContentTypes,
        localVarAuthNames);
  }

  @Override
  public List<String> listMembers(String groupId) throws ApiException {

    LOGGER.finest("[listMembers]" + " " + "groupId: " + groupId);

    HttpRequest httpRequest = listMembersRequestBuilder(groupId);
    HttpResponse response =
        httpClient.invokeAPI(
            this.serverConfiguration, this.authManagersByOasSecuritySchemes, httpRequest);

    if (HttpStatus.isSuccessfulStatus(response.getCode())) {
      return mapper.deserialize(response, new TypeReference<List<String>>() {});
    }
    // fallback to default errors handling:
    // all error cases definition are not required from specs: will try some "hardcoded" content
    // parsing
    throw ApiExceptionBuilder.build(
        response.getMessage(),
        response.getCode(),
        mapper.deserialize(response, new TypeReference<HashMap<String, ?>>() {}));
  }

  private HttpRequest listMembersRequestBuilder(String groupId) throws ApiException {
    // verify the required parameter 'this.servicePlanId' is set
    if (this.servicePlanId == null) {
      throw new ApiException(
          400, "Missing the required parameter 'this.servicePlanId' when calling listMembers");
    }
    // verify the required parameter 'groupId' is set
    if (groupId == null) {
      throw new ApiException(
          400, "Missing the required parameter 'groupId' when calling listMembers");
    }

    String localVarPath =
        "/xms/v1/{service_plan_id}/groups/{group_id}/members"
            .replaceAll(
                "\\{" + "service_plan_id" + "\\}",
                URLPathUtils.encodePathSegment(this.servicePlanId.toString()))
            .replaceAll(
                "\\{" + "group_id" + "\\}", URLPathUtils.encodePathSegment(groupId.toString()));

    List<URLParameter> localVarQueryParams = new ArrayList<>();

    Map<String, String> localVarHeaderParams = new HashMap<>();

    final Collection<String> localVarAccepts = Arrays.asList("application/json");

    final Collection<String> localVarContentTypes = Arrays.asList();

    final Collection<String> localVarAuthNames = Arrays.asList("BearerAuth");
    final String serializedBody = null;

    return new HttpRequest(
        localVarPath,
        HttpMethod.GET,
        localVarQueryParams,
        serializedBody,
        localVarHeaderParams,
        localVarAccepts,
        localVarContentTypes,
        localVarAuthNames);
  }

  @Override
  public Group replace(String groupId, GroupRequest groupRequest) throws ApiException {

    LOGGER.finest(
        "[replace]" + " " + "groupId: " + groupId + ", " + "groupRequest: " + groupRequest);

    HttpRequest httpRequest = replaceRequestBuilder(groupId, groupRequest);
    HttpResponse response =
        httpClient.invokeAPI(
            this.serverConfiguration, this.authManagersByOasSecuritySchemes, httpRequest);

    if (HttpStatus.isSuccessfulStatus(response.getCode())) {
      return mapper.deserialize(response, new TypeReference<Group>() {});
    }
    // fallback to default errors handling:
    // all error cases definition are not required from specs: will try some "hardcoded" content
    // parsing
    throw ApiExceptionBuilder.build(
        response.getMessage(),
        response.getCode(),
        mapper.deserialize(response, new TypeReference<HashMap<String, ?>>() {}));
  }

  private HttpRequest replaceRequestBuilder(String groupId, GroupRequest groupRequest)
      throws ApiException {
    // verify the required parameter 'this.servicePlanId' is set
    if (this.servicePlanId == null) {
      throw new ApiException(
          400, "Missing the required parameter 'this.servicePlanId' when calling replace");
    }
    // verify the required parameter 'groupId' is set
    if (groupId == null) {
      throw new ApiException(400, "Missing the required parameter 'groupId' when calling replace");
    }
    // verify the required parameter 'groupRequest' is set
    if (groupRequest == null) {
      throw new ApiException(
          400, "Missing the required parameter 'groupRequest' when calling replace");
    }

    String localVarPath =
        "/xms/v1/{service_plan_id}/groups/{group_id}"
            .replaceAll(
                "\\{" + "service_plan_id" + "\\}",
                URLPathUtils.encodePathSegment(this.servicePlanId.toString()))
            .replaceAll(
                "\\{" + "group_id" + "\\}", URLPathUtils.encodePathSegment(groupId.toString()));

    List<URLParameter> localVarQueryParams = new ArrayList<>();

    Map<String, String> localVarHeaderParams = new HashMap<>();

    final Collection<String> localVarAccepts = Arrays.asList("application/json");

    final Collection<String> localVarContentTypes = Arrays.asList("application/json");

    final Collection<String> localVarAuthNames = Arrays.asList("BearerAuth");
    final String serializedBody = mapper.serialize(localVarContentTypes, groupRequest);

    return new HttpRequest(
        localVarPath,
        HttpMethod.PUT,
        localVarQueryParams,
        serializedBody,
        localVarHeaderParams,
        localVarAccepts,
        localVarContentTypes,
        localVarAuthNames);
  }

  @Override
  public Group update(String groupId, GroupUpdateRequest groupUpdateRequest) throws ApiException {

    LOGGER.finest(
        "[update]"
            + " "
            + "groupId: "
            + groupId
            + ", "
            + "groupUpdateRequest: "
            + groupUpdateRequest);

    HttpRequest httpRequest = updateRequestBuilder(groupId, groupUpdateRequest);
    HttpResponse response =
        httpClient.invokeAPI(
            this.serverConfiguration, this.authManagersByOasSecuritySchemes, httpRequest);

    if (HttpStatus.isSuccessfulStatus(response.getCode())) {
      return mapper.deserialize(response, new TypeReference<Group>() {});
    }
    // fallback to default errors handling:
    // all error cases definition are not required from specs: will try some "hardcoded" content
    // parsing
    throw ApiExceptionBuilder.build(
        response.getMessage(),
        response.getCode(),
        mapper.deserialize(response, new TypeReference<HashMap<String, ?>>() {}));
  }

  private HttpRequest updateRequestBuilder(String groupId, GroupUpdateRequest groupUpdateRequest)
      throws ApiException {
    // verify the required parameter 'this.servicePlanId' is set
    if (this.servicePlanId == null) {
      throw new ApiException(
          400, "Missing the required parameter 'this.servicePlanId' when calling update");
    }
    // verify the required parameter 'groupId' is set
    if (groupId == null) {
      throw new ApiException(400, "Missing the required parameter 'groupId' when calling update");
    }
    // verify the required parameter 'groupUpdateRequest' is set
    if (groupUpdateRequest == null) {
      throw new ApiException(
          400, "Missing the required parameter 'groupUpdateRequest' when calling update");
    }

    String localVarPath =
        "/xms/v1/{service_plan_id}/groups/{group_id}"
            .replaceAll(
                "\\{" + "service_plan_id" + "\\}",
                URLPathUtils.encodePathSegment(this.servicePlanId.toString()))
            .replaceAll(
                "\\{" + "group_id" + "\\}", URLPathUtils.encodePathSegment(groupId.toString()));

    List<URLParameter> localVarQueryParams = new ArrayList<>();

    Map<String, String> localVarHeaderParams = new HashMap<>();

    final Collection<String> localVarAccepts = Arrays.asList("application/json");

    final Collection<String> localVarContentTypes = Arrays.asList("application/json");

    final Collection<String> localVarAuthNames = Arrays.asList("BearerAuth");
    final String serializedBody = mapper.serialize(localVarContentTypes, groupUpdateRequest);

    return new HttpRequest(
        localVarPath,
        HttpMethod.POST,
        localVarQueryParams,
        serializedBody,
        localVarHeaderParams,
        localVarAccepts,
        localVarContentTypes,
        localVarAuthNames);
  }

  public Group create() throws ApiException {
    return this.create(GroupRequest.builder().build());
  }
}
