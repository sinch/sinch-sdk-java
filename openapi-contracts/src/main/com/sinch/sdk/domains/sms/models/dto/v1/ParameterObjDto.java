/*
 * API Overview | Sinch
 * Sinch SMS API is one of the easiest APIs we offer and enables you to add fast and reliable global SMS to your applications. Send single messages, scheduled batch messages, use available message templates and more.
 *
 * The version of the OpenAPI document: v1
 * Contact: Support@sinch.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.sinch.sdk.domains.sms.models.dto.v1;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonFilter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

/**
 * Contains the parameters that will be used for customizing the message for each recipient. [Click
 * here to learn more about
 * parameterization](/docs/sms/resources/message-info/message-parameterization).
 */
@JsonPropertyOrder({
  ParameterObjDto.JSON_PROPERTY_LEFT_CURLY_BRACKET_PARAMETER_KEY_RIGHT_CURLY_BRACKET
})
@JsonFilter("uninitializedFilter")
@JsonInclude(value = JsonInclude.Include.CUSTOM)
public class ParameterObjDto extends HashMap<String, Object> {
  public static final String JSON_PROPERTY_LEFT_CURLY_BRACKET_PARAMETER_KEY_RIGHT_CURLY_BRACKET =
      "{parameter_key}";
  private ParameterObjParameterKeyDto leftCurlyBracketParameterKeyRightCurlyBracket;
  private boolean leftCurlyBracketParameterKeyRightCurlyBracketDefined = false;

  public ParameterObjDto() {}

  public ParameterObjDto leftCurlyBracketParameterKeyRightCurlyBracket(
      ParameterObjParameterKeyDto leftCurlyBracketParameterKeyRightCurlyBracket) {
    this.leftCurlyBracketParameterKeyRightCurlyBracket =
        leftCurlyBracketParameterKeyRightCurlyBracket;
    this.leftCurlyBracketParameterKeyRightCurlyBracketDefined = true;
    return this;
  }

  /**
   * Get leftCurlyBracketParameterKeyRightCurlyBracket
   *
   * @return leftCurlyBracketParameterKeyRightCurlyBracket
   */
  @JsonProperty(JSON_PROPERTY_LEFT_CURLY_BRACKET_PARAMETER_KEY_RIGHT_CURLY_BRACKET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public ParameterObjParameterKeyDto getLeftCurlyBracketParameterKeyRightCurlyBracket() {
    return leftCurlyBracketParameterKeyRightCurlyBracket;
  }

  @JsonIgnore
  public boolean getLeftCurlyBracketParameterKeyRightCurlyBracketDefined() {
    return leftCurlyBracketParameterKeyRightCurlyBracketDefined;
  }

  @JsonProperty(JSON_PROPERTY_LEFT_CURLY_BRACKET_PARAMETER_KEY_RIGHT_CURLY_BRACKET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLeftCurlyBracketParameterKeyRightCurlyBracket(
      ParameterObjParameterKeyDto leftCurlyBracketParameterKeyRightCurlyBracket) {
    this.leftCurlyBracketParameterKeyRightCurlyBracket =
        leftCurlyBracketParameterKeyRightCurlyBracket;
    this.leftCurlyBracketParameterKeyRightCurlyBracketDefined = true;
  }

  /**
   * A container for additional, undeclared properties. This is a holder for any undeclared
   * properties as specified with the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value. If the property
   * does not already exist, create it otherwise replace it.
   *
   * @param key the name of the property
   * @param value the value of the property
   * @return self reference
   */
  @JsonAnySetter
  public ParameterObjDto putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
      this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) properties.
   *
   * @return the additional (undeclared) properties
   */
  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key the name of the property
   * @return the additional (undeclared) property with the specified name
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
      return null;
    }
    return this.additionalProperties.get(key);
  }

  /** Return true if this parameterObj object is equal to o. */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ParameterObjDto parameterObj = (ParameterObjDto) o;
    return Objects.equals(
            this.leftCurlyBracketParameterKeyRightCurlyBracket,
            parameterObj.leftCurlyBracketParameterKeyRightCurlyBracket)
        && Objects.equals(this.additionalProperties, parameterObj.additionalProperties)
        && super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(
        leftCurlyBracketParameterKeyRightCurlyBracket, super.hashCode(), additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ParameterObjDto {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    leftCurlyBracketParameterKeyRightCurlyBracket: ")
        .append(toIndentedString(leftCurlyBracketParameterKeyRightCurlyBracket))
        .append("\n");
    sb.append("    additionalProperties: ")
        .append(toIndentedString(additionalProperties))
        .append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
