/*
 * Mailgun API
 *
 * OpenAPI document version: 3.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

package com.sinch.sdk.domains.mailgun.models.v1.emails.request;

import com.sinch.sdk.core.utils.Pair;
import java.io.File;
import java.util.Collection;
import java.util.List;
import java.util.Map;

/** Sending email message request. Use to send with HTML content inline within message. */
public interface SendEmailHtmlInlineRequest extends SendEmailRequest {

  /**
   * Email address of the recipient(s). Supports friendly name format. Example: <code>
   * \&quot;Bob &lt;bob@host.com&gt;\&quot;</code>. Use commas to separate multiple recipients.
   * Duplicate addresses are automatically ignored.
   *
   * <p>Field is required
   *
   * @return to
   */
  List<String> getTo();

  /**
   * Email address of the <code>From</code> header. Can include a friendly name using the format
   * <code>\&quot;Friendly Name &lt;email@domain.com&gt;\&quot;</code>. Note: not required if
   * sending with a template that has a pre-set From header, but will override the template's From
   * header if provided.
   *
   * <p>Field is required
   *
   * @return from
   */
  String getFrom();

  /**
   * Same as <code>to</code> but for carbon copy recipients. Supports friendly name format.
   *
   * @return cc
   */
  List<String> getCc();

  /**
   * Same as <code>to</code> but for blind carbon copy recipients. Supports friendly name format.
   *
   * @return bcc
   */
  List<String> getBcc();

  /**
   * Message subject. Note: not required if sending with a template that has a pre-set Subject
   * header, but it will override it if provided.
   *
   * <p>Field is required
   *
   * @return subject
   */
  String getSubject();

  /**
   * Body of the message (text version)
   *
   * @return text
   */
  String getText();

  /**
   * AMP part of the message. Please follow Google guidelines to compose and send AMP emails
   *
   * @return ampHtml
   */
  String getAmpHtml();

  /**
   * File attachment. You can post multiple <code>attachment</code> values.
   * <strong>Important:</strong> You must use <code>multipart/form-data</code> encoding for sending
   * attachments
   *
   * @return attachment
   */
  List<File> getAttachment();

  /**
   * Attachment with <code>inline</code> disposition. Can be used to send inline images (see
   * example). You can post multiple <code>inline</code> values
   *
   * @return inline
   */
  List<File> getInline();

  /**
   * A JSON-encoded dictionary for batch sending with personalized variables per recipient. Each key
   * is a recipient email address, each value is a dictionary of variables for that recipient.
   * Variables can be referenced in the message using %recipient.variablename%. Example:
   * '{&quot;alice@example.com&quot;: {&quot;name&quot;:&quot;Alice&quot;, &quot;id&quot;:1},
   * &quot;bob@example.com&quot;: {&quot;name&quot;:&quot;Bob&quot;, &quot;id&quot;:2}}'. Maximum
   * 1,000 recipients per batch. See <a
   * href="https://documentation.mailgun.com/docs/mailgun/user-manual/sending-messages/batch-sending">Batch
   * Sending</a> for more information
   *
   * @return recipientVariables
   */
  String getRecipientVariables();

  /**
   * Get overrideProperties
   *
   * @return overrideProperties
   */
  OverrideProperties getOverrideProperties();

  /**
   * Get customVariables
   *
   * @return customVariables
   */
  List<Pair<String, String>> getCustomVariables();

  /**
   * Get customHeaders
   *
   * @return customHeaders
   */
  List<Pair<String, String>> getCustomHeaders();

  /**
   * Body of the message (HTML version)
   *
   * @return html
   */
  String getHtml();

  /**
   * Getting builder
   *
   * @return New Builder instance
   */
  static Builder builder() {
    return new SendEmailHtmlInlineRequestImpl.Builder();
  }

  /** Dedicated Builder */
  interface Builder {

    /**
     * Helper method for setRecipientVariables(String).
     *
     * <p>`recipientVariables` parameter will be serialized to JSON
     *
     * @param recipientVariables values to be encoded to JSON string
     *     <p>Each map value is a collection of Pair with key/value to be used as recipient
     *     variables names and values
     * @return Current builder
     * @see #setRecipientVariables(String)
     */
    Builder setRecipientVariables(Map<String, Collection<Pair<String, Object>>> recipientVariables);

    /**
     * see getter
     *
     * @param to see getter
     * @return Current builder
     * @see #getTo
     */
    Builder setTo(List<String> to);

    /**
     * see getter
     *
     * @param from see getter
     * @return Current builder
     * @see #getFrom
     */
    Builder setFrom(String from);

    /**
     * see getter
     *
     * @param cc see getter
     * @return Current builder
     * @see #getCc
     */
    Builder setCc(List<String> cc);

    /**
     * see getter
     *
     * @param bcc see getter
     * @return Current builder
     * @see #getBcc
     */
    Builder setBcc(List<String> bcc);

    /**
     * see getter
     *
     * @param subject see getter
     * @return Current builder
     * @see #getSubject
     */
    Builder setSubject(String subject);

    /**
     * see getter
     *
     * @param text see getter
     * @return Current builder
     * @see #getText
     */
    Builder setText(String text);

    /**
     * see getter
     *
     * @param ampHtml see getter
     * @return Current builder
     * @see #getAmpHtml
     */
    Builder setAmpHtml(String ampHtml);

    /**
     * see getter
     *
     * @param attachment see getter
     * @return Current builder
     * @see #getAttachment
     */
    Builder setAttachment(List<File> attachment);

    /**
     * see getter
     *
     * @param inline see getter
     * @return Current builder
     * @see #getInline
     */
    Builder setInline(List<File> inline);

    /**
     * see getter
     *
     * @param recipientVariables see getter
     * @return Current builder
     * @see #getRecipientVariables
     */
    Builder setRecipientVariables(String recipientVariables);

    /**
     * see getter
     *
     * @param overrideProperties see getter
     * @return Current builder
     * @see #getOverrideProperties
     */
    Builder setOverrideProperties(OverrideProperties overrideProperties);

    /**
     * see getter
     *
     * @param customVariables see getter
     * @return Current builder
     * @see #getCustomVariables
     */
    Builder setCustomVariables(List<Pair<String, String>> customVariables);

    /**
     * see getter
     *
     * @param customHeaders see getter
     * @return Current builder
     * @see #getCustomHeaders
     */
    Builder setCustomHeaders(List<Pair<String, String>> customHeaders);

    /**
     * see getter
     *
     * @param html see getter
     * @return Current builder
     * @see #getHtml
     */
    Builder setHtml(String html);

    /**
     * Create instance
     *
     * @return The instance build with current builder values
     */
    SendEmailHtmlInlineRequest build();
  }
}
