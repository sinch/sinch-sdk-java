/*
 * Mailgun API
 *
 * OpenAPI document version: 0.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

package com.sinch.sdk.domains.mailgun.api.v1;

import com.sinch.sdk.core.exceptions.ApiException;
import com.sinch.sdk.core.utils.Pair;
import com.sinch.sdk.domains.mailgun.models.v1.templates.Template;
import com.sinch.sdk.domains.mailgun.models.v1.templates.VersionDetails;
import com.sinch.sdk.domains.mailgun.models.v1.templates.request.CopyVersionQueryParameters;
import com.sinch.sdk.domains.mailgun.models.v1.templates.request.CreateTemplateRequest;
import com.sinch.sdk.domains.mailgun.models.v1.templates.request.CreateVersionRequest;
import com.sinch.sdk.domains.mailgun.models.v1.templates.request.ListTemplatesQueryParameters;
import com.sinch.sdk.domains.mailgun.models.v1.templates.request.ListVersionsQueryParameters;
import com.sinch.sdk.domains.mailgun.models.v1.templates.request.UpdateTemplateRequest;
import com.sinch.sdk.domains.mailgun.models.v1.templates.request.UpdateVersionRequest;
import com.sinch.sdk.domains.mailgun.models.v1.templates.response.ListTemplatesResponse;
import com.sinch.sdk.domains.mailgun.models.v1.templates.response.ListVersionsResponse;

/** Templates Service */
public interface TemplatesService {

  /**
   * Copy a version (using default parameters) Copies an existing version into a new version with
   * the provided name.
   *
   * @param domainName Domain name the template is associated with. (required)
   * @param templateName template name the version is stored under. (required)
   * @param versionName Tag of the version to copy. (required)
   * @param newVersionName The name for the new version. If the version name already exists, it will
   *     be overridden. (required)
   * @return VersionDetails
   * @throws ApiException if fails to make API call
   */
  VersionDetails copyVersion(
      String domainName, String templateName, String versionName, String newVersionName)
      throws ApiException;

  /**
   * Copy a version Copies an existing version into a new version with the provided name.
   *
   * @param domainName Domain name the template is associated with. (required)
   * @param templateName template name the version is stored under. (required)
   * @param versionName Tag of the version to copy. (required)
   * @param newVersionName The name for the new version. If the version name already exists, it will
   *     be overridden. (required)
   * @param queryParameter (optional)
   * @return VersionDetails
   * @throws ApiException if fails to make API call
   */
  VersionDetails copyVersion(
      String domainName,
      String templateName,
      String versionName,
      String newVersionName,
      CopyVersionQueryParameters queryParameter)
      throws ApiException;

  /**
   * Create a template Store a new template, including its name, description and (optionally) the
   * template content. If the template content is provided, a new version is automatically created
   * and becomes the active version.
   *
   * @param domainName Domain name the template is associated with. (required)
   * @param requestParameters Request parameters
   * @return Template
   * @throws ApiException if fails to make API call
   */
  Template create(String domainName, CreateTemplateRequest requestParameters) throws ApiException;

  /**
   * Create a template
   *
   * <p>Store a new template, including its name, description and the template content. A new
   * version is automatically created and becomes the active version.
   *
   * @param domainName Domain name the template is associated with. (required)
   * @param templateRequestParameters Template parameters for creation
   * @param versionRequestParameters Version parameters for creation. The <b>active</b> field will
   *     be ignored and created version will become active
   * @return Information about created Template and Version
   * @throws ApiException if fails to make API call
   */
  Pair<Template, VersionDetails> createWithActiveVersion(
      String domainName,
      CreateTemplateRequest templateRequestParameters,
      CreateVersionRequest versionRequestParameters)
      throws ApiException;

  /**
   * Create a template version Adds a new template version. If the template doesnâ€™t contain any
   * other versions, the first version becomes active. A template can store up to 40 versions.
   *
   * @param domainName Domain name the template is associated with. (required)
   * @param templateName template name to create the new version for. (required)
   * @param requestParameters Request parameters
   * @return VersionDetails
   * @throws ApiException if fails to make API call
   */
  VersionDetails createVersion(
      String domainName, String templateName, CreateVersionRequest requestParameters)
      throws ApiException;

  /**
   * Delete a template Delete the template specified in the url. NOTE: This method deletes all
   * versions of the specified template.
   *
   * @param domainName Domain name the template is associated with. (required)
   * @param templateName template name to be deleted. (required)
   * @throws ApiException if fails to make API call
   */
  void delete(String domainName, String templateName) throws ApiException;

  /**
   * Delete all templates Delete all templates and their versions for the domain.
   *
   * @param domainName Domain name the template is associated with. (required)
   * @throws ApiException if fails to make API call
   */
  void deleteAll(String domainName) throws ApiException;

  /**
   * Delete a version Delete a specific template version.
   *
   * @param domainName Domain name the template is associated with. (required)
   * @param templateName template name the version is stored under. (required)
   * @param versionName Tag of the version of the template to be deleted. (required)
   * @throws ApiException if fails to make API call
   */
  void deleteVersion(String domainName, String templateName, String versionName)
      throws ApiException;

  /**
   * Get template (using default parameters) Returns metadata information about the stored template
   * specified in the url. If the active flag is provided, the content of the active version of the
   * template is returned.
   *
   * @param domainName Domain name the template is stored under. (required)
   * @param templateName Template name to fetch. (required)
   * @return Template
   * @throws ApiException if fails to make API call
   */
  Template get(String domainName, String templateName) throws ApiException;

  /**
   * Get Template's active version
   *
   * @param domainName Domain name the template is stored under. (required)
   * @param templateName Template name to fetch. (required)
   * @return VersionDetails
   * @throws ApiException if fails to make API call
   */
  VersionDetails getActiveVersion(String domainName, String templateName) throws ApiException;

  /**
   * Get a version Retrieve the information and content of the specified version of a template.
   *
   * @param domainName Domain name the template is stored under. (required)
   * @param templateName template name the version is for. (required)
   * @param versionName Tag of the version of the template to fetch. (required)
   * @return VersionDetails
   * @throws ApiException if fails to make API call
   */
  VersionDetails getVersion(String domainName, String templateName, String versionName)
      throws ApiException;

  /**
   * Get templates (using default parameters) Returns a list of templates for the domain.
   *
   * @param domainName Domain name to fetch the templates for. (required)
   * @return ListTemplatesResponse
   * @throws ApiException if fails to make API call
   */
  ListTemplatesResponse list(String domainName) throws ApiException;

  /**
   * Get templates Returns a list of templates for the domain.
   *
   * @param domainName Domain name to fetch the templates for. (required)
   * @param queryParameter (optional)
   * @return ListTemplatesResponse
   * @throws ApiException if fails to make API call
   */
  ListTemplatesResponse list(String domainName, ListTemplatesQueryParameters queryParameter)
      throws ApiException;

  /**
   * Get all template versions (using default parameters) Returns a paginated list of template
   * versions.
   *
   * @param domainName Domain name to fetch the templates for. (required)
   * @param templateName template name to fetch the versions for. (required)
   * @return ListVersionsResponse
   * @throws ApiException if fails to make API call
   */
  ListVersionsResponse listVersions(String domainName, String templateName) throws ApiException;

  /**
   * Get all template versions Returns a paginated list of template versions.
   *
   * @param domainName Domain name to fetch the templates for. (required)
   * @param templateName template name to fetch the versions for. (required)
   * @param queryParameter (optional)
   * @return ListVersionsResponse
   * @throws ApiException if fails to make API call
   */
  ListVersionsResponse listVersions(
      String domainName, String templateName, ListVersionsQueryParameters queryParameter)
      throws ApiException;

  /**
   * Update template Update the description of a template.
   *
   * @param domainName Domain name the template is associated with. (required)
   * @param templateName The template name. (required)
   * @param requestParameters Request parameters
   * @throws ApiException if fails to make API call
   */
  void update(String domainName, String templateName, UpdateTemplateRequest requestParameters)
      throws ApiException;

  /**
   * Update a version Update information or content of the specific template version. Existing
   * fields not included in the request will not be changed
   *
   * @param domainName Domain name the template is associated with. (required)
   * @param templateName template name the version is stored under. (required)
   * @param versionName Tag of the version of the template to be updated (required)
   * @param requestParameters Request parameters
   * @throws ApiException if fails to make API call
   */
  void updateVersion(
      String domainName,
      String templateName,
      String versionName,
      UpdateVersionRequest requestParameters)
      throws ApiException;
}
