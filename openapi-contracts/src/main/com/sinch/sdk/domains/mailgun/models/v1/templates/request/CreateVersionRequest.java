/*
 * Mailgun API
 *
 * OpenAPI document version: 0.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

package com.sinch.sdk.domains.mailgun.models.v1.templates.request;

import com.sinch.sdk.core.utils.Pair;
import java.util.Collection;

/** CreateVersionRequest */
public interface CreateVersionRequest {

  /**
   * Content of the template.
   *
   * @return template
   */
  String getTemplate();

  /**
   * Tag of the version that is being created. Must be unique to the template.
   *
   * @return tag
   */
  String getTag();

  /**
   * Comment related to the version that is being created.
   *
   * @return comment
   */
  String getComment();

  /**
   * If this flag is set to yes, this version becomes active
   *
   * @return active
   */
  Boolean getActive();

  /**
   * Key Value json dictionary of headers to be stored with the template. Where key is the header
   * name and value is the header value. The header names <code>From</code>, <code>Subject</code>,
   * and <code>Reply-To</code> are the only ones currently supported. These headers will be inserted
   * into the mime at the time we attempt delivery. Headers set at the message level will override
   * headers set on the template. e.g. Setting the From header at the time of sending will override
   * the From header saved on the template. Additionally, headers generated by templates are not
   * reflected on the accepted event as they are not prepended to the message until the message is
   * prepped for delivery. if a From header is not provided either in the message or template, we
   * will default to <code>postmaster@your-sending-domain.tld</code>
   *
   * @return headers
   */
  Collection<Pair<String, String>> getHeaders();

  /**
   * Getting builder
   *
   * @return New Builder instance
   */
  static Builder builder() {
    return new CreateVersionRequestImpl.Builder();
  }

  /** Dedicated Builder */
  interface Builder {

    /**
     * see getter
     *
     * @param template see getter
     * @return Current builder
     * @see #getTemplate
     */
    Builder setTemplate(String template);

    /**
     * see getter
     *
     * @param tag see getter
     * @return Current builder
     * @see #getTag
     */
    Builder setTag(String tag);

    /**
     * see getter
     *
     * @param comment see getter
     * @return Current builder
     * @see #getComment
     */
    Builder setComment(String comment);

    /**
     * see getter
     *
     * @param active see getter
     * @return Current builder
     * @see #getActive
     */
    Builder setActive(Boolean active);

    /**
     * see getter
     *
     * @param headers see getter
     * @return Current builder
     * @see #getHeaders
     */
    Builder setHeaders(Collection<Pair<String, String>> headers);

    /**
     * Create instance
     *
     * @return The instance build with current builder values
     */
    CreateVersionRequest build();
  }
}
