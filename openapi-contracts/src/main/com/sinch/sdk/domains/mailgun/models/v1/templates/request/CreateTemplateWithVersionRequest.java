/*
 * Mailgun API
 *
 * OpenAPI document version: 3.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

package com.sinch.sdk.domains.mailgun.models.v1.templates.request;

import com.sinch.sdk.core.utils.Pair;
import java.util.Collection;

/** CreateTemplateWithVersionRequest */
public interface CreateTemplateWithVersionRequest
    extends com.sinch.sdk.domains.mailgun.models.v1.templates.request.CreateTemplateRequest {

  /**
   * Name of the template being stored. Supports utf-8 characters and name will be down cased.
   *
   * <p>Field is required
   *
   * @return name
   */
  String getName();

  /**
   * Description of the template being stored
   *
   * @return description
   */
  String getDescription();

  /**
   * Optional metadata field api user can indicate who created the template.
   *
   * @return createdBy
   */
  String getCreatedBy();

  /**
   * Content of the template.
   *
   * @return template
   */
  String getTemplate();

  /**
   * Initial tag of the created version. If the template parameter is provided and the tag is
   * missing, the default value <code>initial</code> is used.
   *
   * @return tag
   */
  String getTag();

  /**
   * Version comment. This is valid only if a new version is being created. (template parameter is
   * provided.)
   *
   * @return comment
   */
  String getComment();

  /**
   * Key value JSON object of headers to be stored with the template. Where key is the header name
   * and value is the header value. The header names <code>From</code>, <code>Subject</code>, and
   * <code>Reply-To</code> are the only ones currently supported. These headers will be inserted
   * into the MIME at the time we attempt delivery. Headers set at the message level will override
   * headers set on the template. e.g. Setting the From header at the time of sending will override
   * the From header saved on the template. Additionally, headers generated by templates are not
   * reflected on the accepted event as they are not prepended to the message until the message is
   * prepped for delivery. if a From header is not provided either in the message or template, we
   * will default to <code>postmaster@your-sending-domain.tld</code>
   *
   * @return headers
   */
  Collection<Pair<String, String>> getHeaders();

  /**
   * Getting builder
   *
   * @return New Builder instance
   */
  static Builder builder() {
    return new CreateTemplateWithVersionRequestImpl.Builder();
  }

  /** Dedicated Builder */
  interface Builder {

    /**
     * see getter
     *
     * @param name see getter
     * @return Current builder
     * @see #getName
     */
    Builder setName(String name);

    /**
     * see getter
     *
     * @param description see getter
     * @return Current builder
     * @see #getDescription
     */
    Builder setDescription(String description);

    /**
     * see getter
     *
     * @param createdBy see getter
     * @return Current builder
     * @see #getCreatedBy
     */
    Builder setCreatedBy(String createdBy);

    /**
     * see getter
     *
     * @param template see getter
     * @return Current builder
     * @see #getTemplate
     */
    Builder setTemplate(String template);

    /**
     * see getter
     *
     * @param tag see getter
     * @return Current builder
     * @see #getTag
     */
    Builder setTag(String tag);

    /**
     * see getter
     *
     * @param comment see getter
     * @return Current builder
     * @see #getComment
     */
    Builder setComment(String comment);

    /**
     * see getter
     *
     * @param headers see getter
     * @return Current builder
     * @see #getHeaders
     */
    Builder setHeaders(Collection<Pair<String, String>> headers);

    /**
     * Create instance
     *
     * @return The instance build with current builder values
     */
    CreateTemplateWithVersionRequest build();
  }
}
