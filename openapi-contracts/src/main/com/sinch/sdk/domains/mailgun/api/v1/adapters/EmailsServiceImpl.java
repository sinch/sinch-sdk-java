/*
 * Mailgun API
 *
 * OpenAPI document version: 0.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

package com.sinch.sdk.domains.mailgun.api.v1.adapters;

import com.fasterxml.jackson.core.type.TypeReference;
import com.sinch.sdk.core.exceptions.ApiException;
import com.sinch.sdk.core.exceptions.ApiExceptionBuilder;
import com.sinch.sdk.core.http.AuthManager;
import com.sinch.sdk.core.http.HttpClient;
import com.sinch.sdk.core.http.HttpMapper;
import com.sinch.sdk.core.http.HttpMethod;
import com.sinch.sdk.core.http.HttpRequest;
import com.sinch.sdk.core.http.HttpResponse;
import com.sinch.sdk.core.http.HttpStatus;
import com.sinch.sdk.core.http.URLParameter;
import com.sinch.sdk.core.http.URLPathUtils;
import com.sinch.sdk.core.models.ServerConfiguration;
import com.sinch.sdk.domains.mailgun.models.v1.emails.request.SendEmailRequest;
import com.sinch.sdk.domains.mailgun.models.v1.emails.request.SendMimeEmailRequest;
import com.sinch.sdk.domains.mailgun.models.v1.emails.response.GetStoredEmailResponse;
import com.sinch.sdk.domains.mailgun.models.v1.emails.response.SendEmailResponse;
import com.sinch.sdk.domains.mailgun.models.v1.emails.response.SendingQueuesStatusResponse;
import com.sinch.sdk.domains.mailgun.models.v1.response.GenericResponse;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Logger;

public class EmailsServiceImpl implements com.sinch.sdk.domains.mailgun.api.v1.EmailsService {

  private static final Logger LOGGER = Logger.getLogger(EmailsServiceImpl.class.getName());
  private final HttpClient httpClient;
  private final ServerConfiguration serverConfiguration;
  private final Map<String, AuthManager> authManagersByOasSecuritySchemes;
  private final HttpMapper mapper;

  public EmailsServiceImpl(
      HttpClient httpClient,
      ServerConfiguration serverConfiguration,
      Map<String, AuthManager> authManagersByOasSecuritySchemes,
      HttpMapper mapper) {
    this.httpClient = httpClient;
    this.serverConfiguration = serverConfiguration;
    this.authManagersByOasSecuritySchemes = authManagersByOasSecuritySchemes;
    this.mapper = mapper;
  }

  public SendingQueuesStatusResponse getSendingQueuesStatus(String name) throws ApiException {

    LOGGER.finest("[getSendingQueuesStatus]" + " " + "name: " + name);

    HttpRequest httpRequest = getSendingQueuesStatusRequestBuilder(name);
    HttpResponse response =
        httpClient.invokeAPI(
            this.serverConfiguration, this.authManagersByOasSecuritySchemes, httpRequest);

    if (HttpStatus.isSuccessfulStatus(response.getCode())) {
      return mapper.deserialize(response, new TypeReference<SendingQueuesStatusResponse>() {});
    }
    // fallback to default errors handling:
    // all error cases definition are not required from specs: will try some "hardcoded" content
    // parsing
    throw ApiExceptionBuilder.build(
        response.getMessage(),
        response.getCode(),
        mapper.deserialize(response, new TypeReference<HashMap<String, ?>>() {}));
  }

  private HttpRequest getSendingQueuesStatusRequestBuilder(String name) throws ApiException {
    // verify the required parameter 'name' is set
    if (name == null) {
      throw new ApiException(
          400, "Missing the required parameter 'name' when calling getSendingQueuesStatus");
    }

    String localVarPath =
        "/v3/domains/{name}/sending_queues"
            .replaceAll("\\{" + "name" + "\\}", URLPathUtils.encodePathSegment(name.toString()));

    List<URLParameter> localVarQueryParams = new ArrayList<>();

    Map<String, String> localVarHeaderParams = new HashMap<>();

    final Collection<String> localVarAccepts = Arrays.asList("application/json");

    final Collection<String> localVarContentTypes = Arrays.asList();

    final Collection<String> localVarAuthNames = Arrays.asList("basicAuth");
    final String serializedBody = null;

    return new HttpRequest(
        localVarPath,
        HttpMethod.GET,
        localVarQueryParams,
        serializedBody,
        localVarHeaderParams,
        localVarAccepts,
        localVarContentTypes,
        localVarAuthNames);
  }

  public GetStoredEmailResponse getStoredEmail(String domainName, String storageKey)
      throws ApiException {

    LOGGER.finest(
        "[getStoredEmail]"
            + " "
            + "domainName: "
            + domainName
            + ", "
            + "storageKey: "
            + storageKey);

    HttpRequest httpRequest = getStoredEmailRequestBuilder(domainName, storageKey);
    HttpResponse response =
        httpClient.invokeAPI(
            this.serverConfiguration, this.authManagersByOasSecuritySchemes, httpRequest);

    if (HttpStatus.isSuccessfulStatus(response.getCode())) {
      return mapper.deserialize(response, new TypeReference<GetStoredEmailResponse>() {});
    }
    // fallback to default errors handling:
    // all error cases definition are not required from specs: will try some "hardcoded" content
    // parsing
    throw ApiExceptionBuilder.build(
        response.getMessage(),
        response.getCode(),
        mapper.deserialize(response, new TypeReference<HashMap<String, ?>>() {}));
  }

  private HttpRequest getStoredEmailRequestBuilder(String domainName, String storageKey)
      throws ApiException {
    // verify the required parameter 'domainName' is set
    if (domainName == null) {
      throw new ApiException(
          400, "Missing the required parameter 'domainName' when calling getStoredEmail");
    }
    // verify the required parameter 'storageKey' is set
    if (storageKey == null) {
      throw new ApiException(
          400, "Missing the required parameter 'storageKey' when calling getStoredEmail");
    }

    String localVarPath =
        "/v3/domains/{domain_name}/messages/{storage_key}"
            .replaceAll(
                "\\{" + "domain_name" + "\\}",
                URLPathUtils.encodePathSegment(domainName.toString()))
            .replaceAll(
                "\\{" + "storage_key" + "\\}",
                URLPathUtils.encodePathSegment(storageKey.toString()));

    List<URLParameter> localVarQueryParams = new ArrayList<>();

    Map<String, String> localVarHeaderParams = new HashMap<>();

    final Collection<String> localVarAccepts = Arrays.asList("application/json");

    final Collection<String> localVarContentTypes = Arrays.asList();

    final Collection<String> localVarAuthNames = Arrays.asList("basicAuth");
    final String serializedBody = null;

    return new HttpRequest(
        localVarPath,
        HttpMethod.GET,
        localVarQueryParams,
        serializedBody,
        localVarHeaderParams,
        localVarAccepts,
        localVarContentTypes,
        localVarAuthNames);
  }

  public SendEmailResponse sendEmail(String domainName, SendEmailRequest requestParameters)
      throws ApiException {

    LOGGER.finest(
        "[sendEmail] " + "domainName: " + domainName + ", " + " request:" + requestParameters);
    HttpRequest httpRequest = sendEmailRequestBuilder(domainName, requestParameters);
    HttpResponse response =
        httpClient.invokeAPI(
            this.serverConfiguration, this.authManagersByOasSecuritySchemes, httpRequest);

    if (HttpStatus.isSuccessfulStatus(response.getCode())) {
      return mapper.deserialize(response, new TypeReference<SendEmailResponse>() {});
    }
    // fallback to default errors handling:
    // all error cases definition are not required from specs: will try some "hardcoded" content
    // parsing
    throw ApiExceptionBuilder.build(
        response.getMessage(),
        response.getCode(),
        mapper.deserialize(response, new TypeReference<HashMap<String, ?>>() {}));
  }

  private HttpRequest sendEmailRequestBuilder(String domainName, SendEmailRequest requestParameters)
      throws ApiException {
    // verify the required parameter 'domainName' is set
    if (domainName == null) {
      throw new ApiException(
          400, "Missing the required parameter 'domainName' when calling sendEmail");
    }

    String localVarPath =
        "/v3/{domain_name}/messages"
            .replaceAll(
                "\\{" + "domain_name" + "\\}",
                URLPathUtils.encodePathSegment(domainName.toString()));

    List<URLParameter> localVarQueryParams = new ArrayList<>();

    Map<String, String> localVarHeaderParams = new HashMap<>();

    final Collection<String> localVarAccepts = Arrays.asList("application/json");
    final Collection<String> localVarContentTypes = Arrays.asList("multipart/form-data");
    final Collection<String> localVarAuthNames = Arrays.asList("basicAuth");
    final Map<String, Object> localFormParams =
        mapper.serializeFormParameters(localVarContentTypes, requestParameters);

    return new HttpRequest(
        localVarPath,
        HttpMethod.POST,
        localVarQueryParams,
        localFormParams,
        localVarHeaderParams,
        localVarAccepts,
        localVarContentTypes,
        localVarAuthNames);
  }

  public SendEmailResponse sendMimeEmail(String domainName, SendMimeEmailRequest requestParameters)
      throws ApiException {

    LOGGER.finest(
        "[sendMimeEmail] " + "domainName: " + domainName + ", " + " request:" + requestParameters);
    HttpRequest httpRequest = sendMimeEmailRequestBuilder(domainName, requestParameters);
    HttpResponse response =
        httpClient.invokeAPI(
            this.serverConfiguration, this.authManagersByOasSecuritySchemes, httpRequest);

    if (HttpStatus.isSuccessfulStatus(response.getCode())) {
      return mapper.deserialize(response, new TypeReference<SendEmailResponse>() {});
    }
    // fallback to default errors handling:
    // all error cases definition are not required from specs: will try some "hardcoded" content
    // parsing
    throw ApiExceptionBuilder.build(
        response.getMessage(),
        response.getCode(),
        mapper.deserialize(response, new TypeReference<HashMap<String, ?>>() {}));
  }

  private HttpRequest sendMimeEmailRequestBuilder(
      String domainName, SendMimeEmailRequest requestParameters) throws ApiException {
    // verify the required parameter 'domainName' is set
    if (domainName == null) {
      throw new ApiException(
          400, "Missing the required parameter 'domainName' when calling sendMimeEmail");
    }

    String localVarPath =
        "/v3/{domain_name}/messages.mime"
            .replaceAll(
                "\\{" + "domain_name" + "\\}",
                URLPathUtils.encodePathSegment(domainName.toString()));

    List<URLParameter> localVarQueryParams = new ArrayList<>();

    Map<String, String> localVarHeaderParams = new HashMap<>();

    final Collection<String> localVarAccepts = Arrays.asList("application/json");
    final Collection<String> localVarContentTypes = Arrays.asList("multipart/form-data");
    final Collection<String> localVarAuthNames = Arrays.asList("basicAuth");
    final Map<String, Object> localFormParams =
        mapper.serializeFormParameters(localVarContentTypes, requestParameters);

    return new HttpRequest(
        localVarPath,
        HttpMethod.POST,
        localVarQueryParams,
        localFormParams,
        localVarHeaderParams,
        localVarAccepts,
        localVarContentTypes,
        localVarAuthNames);
  }

  public void purgeSendingQueue(String domainName, String storageURL) throws ApiException {

    LOGGER.finest(
        "[purgeSendingQueue]"
            + " "
            + "domainName: "
            + domainName
            + ", "
            + "storageURL: "
            + storageURL);

    ServerConfiguration serverConf = new ServerConfiguration(storageURL);
    HttpRequest httpRequest = purgeQueueRequestBuilder(domainName);
    HttpResponse response =
        httpClient.invokeAPI(serverConf, this.authManagersByOasSecuritySchemes, httpRequest);

    if (HttpStatus.isSuccessfulStatus(response.getCode())) {
      TypeReference<GenericResponse> localVarReturnType = new TypeReference<GenericResponse>() {};
      mapper.deserialize(response, localVarReturnType);
      return;
    }
    // fallback to default errors handling:
    // all error cases definition are not required from specs: will try some "hardcoded" content
    // parsing
    throw ApiExceptionBuilder.build(
        response.getMessage(),
        response.getCode(),
        mapper.deserialize(response, new TypeReference<HashMap<String, ?>>() {}));
  }

  private HttpRequest purgeQueueRequestBuilder(String domainName) throws ApiException {
    // verify the required parameter 'domainName' is set
    if (domainName == null) {
      throw new ApiException(
          400, "Missing the required parameter 'domainName' when calling purgeQueue");
    }

    String localVarPath =
        "/v3/{domain_name}/envelopes"
            .replaceAll(
                "\\{" + "domain_name" + "\\}",
                URLPathUtils.encodePathSegment(domainName.toString()));

    final List<URLParameter> localVarQueryParams = new ArrayList<>();

    final Map<String, String> localVarHeaderParams = new HashMap<>();

    final Collection<String> localVarAccepts = Arrays.asList("application/json");

    final Collection<String> localVarContentTypes = Arrays.asList();

    final Collection<String> localVarAuthNames = Arrays.asList("basicAuth");
    final String serializedBody = null;

    return new HttpRequest(
        localVarPath,
        HttpMethod.DELETE,
        localVarQueryParams,
        serializedBody,
        localVarHeaderParams,
        localVarAccepts,
        localVarContentTypes,
        localVarAuthNames);
  }
}
