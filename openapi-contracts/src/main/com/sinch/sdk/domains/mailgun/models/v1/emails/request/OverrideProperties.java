/*
 * Mailgun API
 *
 * OpenAPI document version: 0.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

package com.sinch.sdk.domains.mailgun.models.v1.emails.request;

import java.time.Instant;
import java.util.List;

/**
 * Per-message basis overload parameters. See <a
 * href="https://documentation.mailgun.com/docs/mailgun/user-manual/sending-messages/#passing-sending-options">Passing
 * Sending Options</a>
 */
public interface OverrideProperties {

  /**
   * Tag string. See <a
   * href="https://documentation.mailgun.com/docs/mailgun/user-manual/tracking-messages/#tagging">Tagging</a>
   * for more information
   *
   * @return tag
   */
  List<String> getTag();

  /**
   * Toggles Send Time Optimization (STO) on a per-message basis. String should be set to the number
   * of hours in <code>[0-9]+h</code> format, with the minimum being <code>24h</code> and the
   * maximum being <code>72h</code>. This value defines the time window in which Mailgun will run
   * the optimization algorithm based on prior engagement data of a given recipient. See
   * <strong>Sending a Message with STO</strong> for details. <em>Please note that STO is only
   * available on certain plans. See www.mailgun.com/pricing for more info</em>
   *
   * @return deliveryTimeOptimizePeriod
   */
  Integer getDeliveryTimeOptimizePeriod();

  /**
   * Enables/disables DKIM signatures on a per-message basis
   *
   * @return enableDkimSignature
   */
  Boolean getEnableDkimSignature();

  /**
   * Specify a second domain key to sign the email with. The value is formatted as <code>
   * signing_domain/selector</code>, e.g. <code>example.com/s1</code>. This tells Mailgun to sign
   * the message with the signing domain <code>example.com</code> using the selector <code>s1</code>
   * . Note: the domain key specified must have been previously created and activated.
   *
   * @return secondaryDkim
   */
  String getSecondaryDkim();

  /**
   * Specify an alias of the domain key specified in <code>o:secondary-dkim</code>. Also formatted
   * as <code>public_signing_domain/selector</code>. <code>o:secondary-dkim</code> option must also
   * be provided. Mailgun will sign the message with the provided key of the secondary DKIM, but use
   * the public secondary DKIM name and selector. Note: We will perform a DNS check prior to signing
   * the message to ensure the public keys matches the secondary DKIM.
   *
   * @return secondaryDkimPublic
   */
  String getSecondaryDkimPublic();

  /**
   * Specifies the scheduled delivery time in RFC-2822 format
   * (https://documentation.mailgun.com/docs/mailgun/user-manual/get-started/#date-format).
   * Depending on your plan, you can schedule messages up to 3 or 7 days in advance. If your domain
   * has a custom message_ttl (time-to-live) setting, this value determines the maximum scheduling
   * duration.
   *
   * @return deliveryTime
   */
  Instant getDeliveryTime();

  /**
   * Toggles Timezone Optimization (TZO) on a per message basis. String should be set to preferred
   * delivery time in <code>HH:mm</code> or <code>hh:mmaa</code> format, where <code>HH:mm</code> is
   * used for 24 hour format without AM/PM and hh:mmaa is used for 12 hour format with AM/PM. See
   * <strong>Sending a Message with TZO</strong> for details. <em>Please note that TZO is only
   * available on certain plans. See www.mailgun.com/pricing for more info</em>
   *
   * @return timeZoneLocalize
   */
  String getTimeZoneLocalize();

  /**
   * Toggles click tracking on a per-message basis, see <a
   * href="https://documentation.mailgun.com/docs/mailgun/user-manual/tracking-messages/#tracking-clicks">Tracking
   * Clicks</a>. Has higher priority than domain-level setting.
   *
   * @return trackingClicks
   */
  TrueFalseHtmlonlyEnum getTrackingClicks();

  /**
   * Toggles both click and open tracking on a per-message basis, see <a
   * href="https://documentation.mailgun.com/docs/mailgun/user-manual/tracking-messages">Tracking
   * Messages</a> for details.
   *
   * @return tracking
   */
  TrueFalseHtmlonlyEnum getTracking();

  /**
   * Toggles opens tracking on a per-message basis, see <a
   * href="https://documentation.mailgun.com/docs/mailgun/user-manual/tracking-messages/#tracking-opens">Tracking
   * Opens</a>. Has higher priority than domain-level setting.
   *
   * @return trackingOpens
   */
  Boolean getTrackingOpens();

  /**
   * If you send long emails that experience truncation or other rendering issues at the recipient,
   * you can ensure opens are being tracked accurately with placement of the tracking pixel at the
   * top of your emails
   *
   * @return trackingPixelLocationTop
   */
  TrueFalseHtmlonlyEnum getTrackingPixelLocationTop();

  /**
   * Used to specify an IP Address to send an email that is owned by your account
   *
   * @return sendingIp
   */
  String getSendingIp();

  /**
   * If an IP Pool ID is provided, the email will be delivered with an IP that belongs in that pool
   *
   * @return sendingIpPool
   */
  String getSendingIpPool();

  /**
   * Requires the message only be sent over a TLS connection, see <a
   * href="https://documentation.mailgun.com/docs/mailgun/user-manual/tls-sending/">TLS Sending
   * Connection Settings</a>. If a TLS connection can not be established, Mailgun will not deliver
   * the message. If set to <code>false</code> or <code>no</code>, Mailgun will still try and
   * upgrade the connection, but if Mailgun cannot, the message will be delivered over a plaintext
   * SMTP connection. The default is <code>false</code>
   *
   * @return requireTls
   */
  Boolean getRequireTls();

  /**
   * If <code>true</code>, the certificate and hostname of the resolved MX Host will not be verified
   * when trying to establish a TLS connection. If <code>false</code>, Mailgun will verify the
   * certificate and hostname. If either one can not be verified, a TLS connection will not be
   * established. The default is <code>false</code>
   *
   * @return skipVerification
   */
  Boolean getSkipVerification();

  /**
   * Enables sending in test mode. See <a
   * href="https://documentation.mailgun.com/docs/mailgun/user-manual/sending-messages/#sending-in-test-mode">Sending
   * in Test Mode</a>
   *
   * @return testMode
   */
  Boolean getTestMode();

  /**
   * If a message is successfully delivered, then a copy of the message is submitted in an HTTP POST
   * request to the URL provided in this parameter. The Content-Type of the POST requests is
   * application/mime and the request body is exactly what the recipient SMTP server received.
   *
   * @return archiveTo
   */
  String getArchiveTo();

  /**
   * Getting builder
   *
   * @return New Builder instance
   */
  static Builder builder() {
    return new OverridePropertiesImpl.Builder();
  }

  /** Dedicated Builder */
  interface Builder {

    /**
     * see getter
     *
     * @param tag see getter
     * @return Current builder
     * @see #getTag
     */
    Builder setTag(List<String> tag);

    /**
     * see getter
     *
     * @param deliveryTimeOptimizePeriod see getter
     * @return Current builder
     * @see #getDeliveryTimeOptimizePeriod
     */
    Builder setDeliveryTimeOptimizePeriod(Integer deliveryTimeOptimizePeriod);

    /**
     * see getter
     *
     * @param enableDkimSignature see getter
     * @return Current builder
     * @see #getEnableDkimSignature
     */
    Builder setEnableDkimSignature(Boolean enableDkimSignature);

    /**
     * see getter
     *
     * @param secondaryDkim see getter
     * @return Current builder
     * @see #getSecondaryDkim
     */
    Builder setSecondaryDkim(String secondaryDkim);

    /**
     * see getter
     *
     * @param secondaryDkimPublic see getter
     * @return Current builder
     * @see #getSecondaryDkimPublic
     */
    Builder setSecondaryDkimPublic(String secondaryDkimPublic);

    /**
     * see getter
     *
     * @param deliveryTime see getter
     * @return Current builder
     * @see #getDeliveryTime
     */
    Builder setDeliveryTime(Instant deliveryTime);

    /**
     * see getter
     *
     * @param timeZoneLocalize see getter
     * @return Current builder
     * @see #getTimeZoneLocalize
     */
    Builder setTimeZoneLocalize(String timeZoneLocalize);

    /**
     * see getter
     *
     * @param trackingClicks see getter
     * @return Current builder
     * @see #getTrackingClicks
     */
    Builder setTrackingClicks(TrueFalseHtmlonlyEnum trackingClicks);

    /**
     * see getter
     *
     * @param tracking see getter
     * @return Current builder
     * @see #getTracking
     */
    Builder setTracking(TrueFalseHtmlonlyEnum tracking);

    /**
     * see getter
     *
     * @param trackingOpens see getter
     * @return Current builder
     * @see #getTrackingOpens
     */
    Builder setTrackingOpens(Boolean trackingOpens);

    /**
     * see getter
     *
     * @param trackingPixelLocationTop see getter
     * @return Current builder
     * @see #getTrackingPixelLocationTop
     */
    Builder setTrackingPixelLocationTop(TrueFalseHtmlonlyEnum trackingPixelLocationTop);

    /**
     * see getter
     *
     * @param sendingIp see getter
     * @return Current builder
     * @see #getSendingIp
     */
    Builder setSendingIp(String sendingIp);

    /**
     * see getter
     *
     * @param sendingIpPool see getter
     * @return Current builder
     * @see #getSendingIpPool
     */
    Builder setSendingIpPool(String sendingIpPool);

    /**
     * see getter
     *
     * @param requireTls see getter
     * @return Current builder
     * @see #getRequireTls
     */
    Builder setRequireTls(Boolean requireTls);

    /**
     * see getter
     *
     * @param skipVerification see getter
     * @return Current builder
     * @see #getSkipVerification
     */
    Builder setSkipVerification(Boolean skipVerification);

    /**
     * see getter
     *
     * @param testMode see getter
     * @return Current builder
     * @see #getTestMode
     */
    Builder setTestMode(Boolean testMode);

    /**
     * see getter
     *
     * @param archiveTo see getter
     * @return Current builder
     * @see #getArchiveTo
     */
    Builder setArchiveTo(String archiveTo);

    /**
     * Create instance
     *
     * @return The instance build with current builder values
     */
    OverrideProperties build();
  }
}
