/*
 * Voice API | Sinch
 *
 * OpenAPI document version: 1.0.1
 * Contact: support@sinch.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

package com.sinch.sdk.domains.voice.models.v1.callouts.request.internal;

import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.sinch.sdk.domains.voice.models.v1.Domain;
import com.sinch.sdk.domains.voice.models.v1.MusicOnHold;
import com.sinch.sdk.domains.voice.models.v1.conferences.ConferenceDtmfOptions;
import com.sinch.sdk.domains.voice.models.v1.destination.DestinationConference;
import com.sinch.sdk.models.DualToneMultiFrequency;

/**
 * The conference callout calls a phone number or a user. When the call is answered, it's connected
 * to a conference room.
 */
@JsonDeserialize(builder = ConferenceCalloutInternalImpl.Builder.class)
public interface ConferenceCalloutInternal {

  /**
   * The number that will be displayed as the incoming caller. To set your own CLI, you may use your
   * verified number or your Dashboard number. The number must be in <a
   * href="https://community.sinch.com/t5/Glossary/E-164/ta-p/7537">E.164</a> format.
   *
   * @return cli
   */
  String getCli();

  /**
   * When the destination picks up, this DTMF tones will be played to the callee. Valid characters
   * in the string are &quot;0&quot;-&quot;9&quot;, &quot;#&quot; and &quot;w&quot;. A &quot;w&quot;
   * will render a 500 ms pause. Example: &quot;ww1234#w#&quot; will render a 1s pause, the DTMF
   * tones &quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot; and &quot;#&quot; followed by
   * a 0.5s pause and finally the DTMF tone for &quot;#&quot;. This can be used if the callout
   * destination for instance require a conference PIN code or an extension to be entered.
   *
   * @return dtmf
   */
  DualToneMultiFrequency getDtmf();

  /**
   * Used to input custom data.
   *
   * @return custom
   */
  String getCustom();

  /**
   * Get destination
   *
   * <p>Field is required
   *
   * @return destination
   */
  DestinationConference getDestination();

  /**
   * The conferenceId of the conference to which you want the callee to join. If the conferenceId
   * doesn't exist a conference room will be created.
   *
   * <p>Field is required
   *
   * @return conferenceId
   */
  String getConferenceId();

  /**
   * Get conferenceDtmfOptions
   *
   * @return conferenceDtmfOptions
   */
  ConferenceDtmfOptions getConferenceDtmfOptions();

  /**
   * Get maxDuration
   *
   * @return maxDuration
   */
  Integer getMaxDuration();

  /**
   * If <code>enableAce</code> is set to true and the application has a callback URL specified, you
   * will receive an ACE callback when the call is answered. When the callback is received, your
   * platform must respond with a svamlet containing the <code>connectConf</code> action in order to
   * add the call to a conference or create the conference if it's the first call. If it's set to
   * false, no ACE event will be sent to your backend.<br>
   * <b>Note </b> if the call is towards an InApp destination <code>type:</code> <code>username
   * </code>, then no ACE will be issued when the call is connected, even if <code>enableAce</code>
   * is present in the callout request.
   *
   * @return enableAce
   */
  Boolean getEnableAce();

  /**
   * If <code>enableDice</code> is set to true and the application has a callback URL specified, you
   * will receive a DiCE callback when the call is disconnected. If it's set to false, no DiCE event
   * will be sent to your backend.<br>
   * <b>Note</b> if the call is towards an InApp destination <code>type:</code> <code>username
   * </code>, then no DICE will be issued at the end of the call, even if <code>enableDice</code> is
   * present in the callout request.
   *
   * @return enableDice
   */
  Boolean getEnableDice();

  /**
   * If <code>enablePie</code> is set to true and the application has a callback URL specified, you
   * will receive a PIE callback after a <code>runMenu</code> action, with the information of the
   * action that the user took. If it's set to false, no PIE event will be sent to your backend.
   *
   * @return enablePie
   */
  Boolean getEnablePie();

  /**
   * The voice and language you want to use for the prompts. This can either be defined by the ISO
   * 639 locale and language code or by specifying a particular voice. Supported languages and
   * voices are detailed <a
   * href="https://developers.sinch.com/docs/voice/api-reference/voice-locales/">here</a>
   *
   * @return locale
   */
  String getLocale();

  /**
   * The text that will be spoken as a greeting.
   *
   * @return greeting
   */
  String getGreeting();

  /**
   * Means &quot;music-on-hold.&quot; It's an optional parameter that specifies what the first
   * participant should listen to while they're alone in the conference, waiting for other
   * participants to join. It can take one of these pre-defined values:
   *
   * <ul>
   *   <li><code>ring</code> (progress tone)
   *   <li><code>music1</code> (music file)
   *   <li><code>music2</code> (music file)
   *   <li><code>music3</code> (music file)
   * </ul>
   *
   * <br>
   * If no “music-on-hold” is specified, the user will only hear silence.
   *
   * @return MusicOnHold
   */
  MusicOnHold getMusicOnHold();

  /**
   * can be either “pstn” for PSTN endpoint or “mxp” for data (app or web) clients.
   *
   * @return domain
   */
  Domain getDomain();

  /**
   * Getting builder
   *
   * @return New Builder instance
   */
  static Builder builder() {
    return new ConferenceCalloutInternalImpl.Builder();
  }

  /** Dedicated Builder */
  interface Builder {

    /**
     * see getter
     *
     * @param cli see getter
     * @return Current builder
     * @see #getCli
     */
    Builder setCli(String cli);

    /**
     * see getter
     *
     * @param dtmf see getter
     * @return Current builder
     * @see #getDtmf
     */
    Builder setDtmf(DualToneMultiFrequency dtmf);

    /**
     * see getter
     *
     * @param custom see getter
     * @return Current builder
     * @see #getCustom
     */
    Builder setCustom(String custom);

    /**
     * see getter
     *
     * @param destination see getter
     * @return Current builder
     * @see #getDestination
     */
    Builder setDestination(DestinationConference destination);

    /**
     * see getter
     *
     * @param conferenceId see getter
     * @return Current builder
     * @see #getConferenceId
     */
    Builder setConferenceId(String conferenceId);

    /**
     * see getter
     *
     * @param conferenceDtmfOptions see getter
     * @return Current builder
     * @see #getConferenceDtmfOptions
     */
    Builder setConferenceDtmfOptions(ConferenceDtmfOptions conferenceDtmfOptions);

    /**
     * see getter
     *
     * @param maxDuration see getter
     * @return Current builder
     * @see #getMaxDuration
     */
    Builder setMaxDuration(Integer maxDuration);

    /**
     * see getter
     *
     * @param enableAce see getter
     * @return Current builder
     * @see #getEnableAce
     */
    Builder setEnableAce(Boolean enableAce);

    /**
     * see getter
     *
     * @param enableDice see getter
     * @return Current builder
     * @see #getEnableDice
     */
    Builder setEnableDice(Boolean enableDice);

    /**
     * see getter
     *
     * @param enablePie see getter
     * @return Current builder
     * @see #getEnablePie
     */
    Builder setEnablePie(Boolean enablePie);

    /**
     * see getter
     *
     * @param locale see getter
     * @return Current builder
     * @see #getLocale
     */
    Builder setLocale(String locale);

    /**
     * see getter
     *
     * @param greeting see getter
     * @return Current builder
     * @see #getGreeting
     */
    Builder setGreeting(String greeting);

    /**
     * see getter
     *
     * @param MusicOnHold see getter
     * @return Current builder
     * @see #getMusicOnHold
     */
    Builder setMusicOnHold(MusicOnHold MusicOnHold);

    /**
     * see getter
     *
     * @param domain see getter
     * @return Current builder
     * @see #getDomain
     */
    Builder setDomain(Domain domain);

    /**
     * Create instance
     *
     * @return The instance build with current builder values
     */
    ConferenceCalloutInternal build();
  }
}
