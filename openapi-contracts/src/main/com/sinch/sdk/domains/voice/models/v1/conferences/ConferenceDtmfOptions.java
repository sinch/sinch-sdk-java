/*
 * Voice API | Sinch
 *
 * OpenAPI document version: 1.0.1
 * Contact: support@sinch.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

package com.sinch.sdk.domains.voice.models.v1.conferences;

import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.sinch.sdk.core.utils.EnumDynamic;
import com.sinch.sdk.core.utils.EnumSupportDynamic;
import java.util.Arrays;
import java.util.stream.Stream;

/**
 * Options to control how DTMF signals are used by the participant in the conference. For
 * information on how to use this feature, read more <a
 * href="https://developers.sinch.com/docs/voice/api-reference/conference-dtmf">here</a>.
 */
@JsonDeserialize(builder = ConferenceDtmfOptionsImpl.Builder.class)
public interface ConferenceDtmfOptions {

  /** Determines what DTMF mode the participant will use in the call. */
  public class ModeEnum extends EnumDynamic<String, ModeEnum> {
    public static final ModeEnum IGNORE = new ModeEnum("ignore");
    public static final ModeEnum FORWARD = new ModeEnum("forward");
    public static final ModeEnum DETECT = new ModeEnum("detect");

    private static final EnumSupportDynamic<String, ModeEnum> ENUM_SUPPORT =
        new EnumSupportDynamic<>(
            ModeEnum.class, ModeEnum::new, Arrays.asList(IGNORE, FORWARD, DETECT));

    private ModeEnum(String value) {
      super(value);
    }

    public static Stream<ModeEnum> values() {
      return ENUM_SUPPORT.values();
    }

    public static ModeEnum from(String value) {
      return ENUM_SUPPORT.from(value);
    }

    public static String valueOf(ModeEnum e) {
      return ENUM_SUPPORT.valueOf(e);
    }
  }

  /**
   * Determines what DTMF mode the participant will use in the call.
   *
   * @return mode
   */
  ModeEnum getMode();

  /**
   * The maximum number of accepted digits before sending the collected input via a PIE callback.
   * The default value is <code>1</code>. If the value is greater than <code>1</code>, the PIE
   * callback is triggered by one of the three following events: - No additional digit is entered
   * before the <code>timeoutMills</code> timeout period has elapsed. - The <code>#</code> character
   * is entered. - The maximum number of digits has been entered.
   *
   * @return maxDigits
   */
  Integer getMaxDigits();

  /**
   * The number of milliseconds that the system will wait between entered digits before triggering
   * the PIE callback. The default value is <code>3000</code>.
   *
   * @return timeoutMills
   */
  Integer getTimeoutMills();

  /**
   * Getting builder
   *
   * @return New Builder instance
   */
  static Builder builder() {
    return new ConferenceDtmfOptionsImpl.Builder();
  }

  /** Dedicated Builder */
  interface Builder {

    /**
     * see getter
     *
     * @param mode see getter
     * @return Current builder
     * @see #getMode
     */
    Builder setMode(ModeEnum mode);

    /**
     * see getter
     *
     * @param maxDigits see getter
     * @return Current builder
     * @see #getMaxDigits
     */
    Builder setMaxDigits(Integer maxDigits);

    /**
     * see getter
     *
     * @param timeoutMills see getter
     * @return Current builder
     * @see #getTimeoutMills
     */
    Builder setTimeoutMills(Integer timeoutMills);

    /**
     * Create instance
     *
     * @return The instance build with current builder values
     */
    ConferenceDtmfOptions build();
  }
}
