package com.sinch.sdk.domains.voice.models.v1.webhooks;

import com.fasterxml.jackson.annotation.JsonFilter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;
import com.sinch.sdk.core.models.OptionalValue;
import java.util.Objects;

@JsonPropertyOrder({
  NotificationEventImpl.JSON_PROPERTY_EVENT,
  NotificationEventImpl.JSON_PROPERTY_TYPE,
  NotificationEventImpl.JSON_PROPERTY_DESTINATION,
  NotificationEventImpl.JSON_PROPERTY_AMD,
  NotificationEventImpl.JSON_PROPERTY_CUSTOM,
  NotificationEventImpl.JSON_PROPERTY_CALLID,
  NotificationEventImpl.JSON_PROPERTY_CONFERENCE_ID,
  NotificationEventImpl.JSON_PROPERTY_VERSION
})
@JsonFilter("uninitializedFilter")
@JsonInclude(value = JsonInclude.Include.CUSTOM)

/*@JsonIgnoreProperties(
  value = "event", // ignore manually set event, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the event to be set during deserialization
)*/
/*@JsonTypeInfo(use = JsonTypeInfo.Id.NONE, include = JsonTypeInfo.As.EXISTING_PROPERTY, property = "event", visible = true)
 */

public class NotificationEventImpl implements NotificationEvent, VoiceWebhookEvent {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_EVENT = "event";

  private OptionalValue<WebhooksEventRequestType> event;

  public static final String JSON_PROPERTY_TYPE = "type";

  private OptionalValue<String> type;

  public static final String JSON_PROPERTY_DESTINATION = "destination";

  private OptionalValue<String> destination;

  public static final String JSON_PROPERTY_AMD = "amd";

  private OptionalValue<AnsweringMachineDetection> amd;

  public static final String JSON_PROPERTY_CUSTOM = "custom";

  private OptionalValue<String> custom;

  public static final String JSON_PROPERTY_CALLID = "callid";

  private OptionalValue<String> callid;

  public static final String JSON_PROPERTY_CONFERENCE_ID = "conferenceId";

  private OptionalValue<String> conferenceId;

  public static final String JSON_PROPERTY_VERSION = "version";

  private OptionalValue<Integer> version;

  public NotificationEventImpl() {}

  protected NotificationEventImpl(
      OptionalValue<WebhooksEventRequestType> event,
      OptionalValue<String> type,
      OptionalValue<String> destination,
      OptionalValue<AnsweringMachineDetection> amd,
      OptionalValue<String> custom,
      OptionalValue<String> callid,
      OptionalValue<String> conferenceId,
      OptionalValue<Integer> version) {
    this.event = event;
    this.type = type;
    this.destination = destination;
    this.amd = amd;
    this.custom = custom;
    this.callid = callid;
    this.conferenceId = conferenceId;
    this.version = version;
  }

  @JsonIgnore
  public WebhooksEventRequestType getEvent() {
    return event.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_EVENT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public OptionalValue<WebhooksEventRequestType> event() {
    return event;
  }

  @JsonIgnore
  public String getType() {
    return type.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public OptionalValue<String> type() {
    return type;
  }

  @JsonIgnore
  public String getDestination() {
    return destination.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_DESTINATION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public OptionalValue<String> destination() {
    return destination;
  }

  @JsonIgnore
  public AnsweringMachineDetection getAmd() {
    return amd.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_AMD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public OptionalValue<AnsweringMachineDetection> amd() {
    return amd;
  }

  @JsonIgnore
  public String getCustom() {
    return custom.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_CUSTOM)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public OptionalValue<String> custom() {
    return custom;
  }

  @JsonIgnore
  public String getCallid() {
    return callid.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_CALLID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public OptionalValue<String> callid() {
    return callid;
  }

  @JsonIgnore
  public String getConferenceId() {
    return conferenceId.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_CONFERENCE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public OptionalValue<String> conferenceId() {
    return conferenceId;
  }

  @JsonIgnore
  public Integer getVersion() {
    return version.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_VERSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public OptionalValue<Integer> version() {
    return version;
  }

  /** Return true if this notifyRequest object is equal to o. */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NotificationEventImpl notifyRequest = (NotificationEventImpl) o;
    return Objects.equals(this.event, notifyRequest.event)
        && Objects.equals(this.type, notifyRequest.type)
        && Objects.equals(this.destination, notifyRequest.destination)
        && Objects.equals(this.amd, notifyRequest.amd)
        && Objects.equals(this.custom, notifyRequest.custom)
        && Objects.equals(this.callid, notifyRequest.callid)
        && Objects.equals(this.conferenceId, notifyRequest.conferenceId)
        && Objects.equals(this.version, notifyRequest.version)
        && super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(
        event, type, destination, amd, custom, callid, conferenceId, version, super.hashCode());
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NotificationEventImpl {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    event: ").append(toIndentedString(event)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    destination: ").append(toIndentedString(destination)).append("\n");
    sb.append("    amd: ").append(toIndentedString(amd)).append("\n");
    sb.append("    custom: ").append(toIndentedString(custom)).append("\n");
    sb.append("    callid: ").append(toIndentedString(callid)).append("\n");
    sb.append("    conferenceId: ").append(toIndentedString(conferenceId)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  @JsonPOJOBuilder(withPrefix = "set")
  static class Builder implements NotificationEvent.Builder {
    OptionalValue<WebhooksEventRequestType> event =
        OptionalValue.of(WebhooksEventRequestType.NOTIFY);
    OptionalValue<String> type = OptionalValue.empty();
    OptionalValue<String> destination = OptionalValue.empty();
    OptionalValue<AnsweringMachineDetection> amd = OptionalValue.empty();
    OptionalValue<String> custom = OptionalValue.empty();
    OptionalValue<String> callid = OptionalValue.empty();
    OptionalValue<String> conferenceId = OptionalValue.empty();
    OptionalValue<Integer> version = OptionalValue.empty();

    @JsonProperty(JSON_PROPERTY_TYPE)
    public Builder setType(String type) {
      this.type = OptionalValue.of(type);
      return this;
    }

    @JsonProperty(JSON_PROPERTY_DESTINATION)
    public Builder setDestination(String destination) {
      this.destination = OptionalValue.of(destination);
      return this;
    }

    @JsonProperty(JSON_PROPERTY_AMD)
    public Builder setAmd(AnsweringMachineDetection amd) {
      this.amd = OptionalValue.of(amd);
      return this;
    }

    @JsonProperty(JSON_PROPERTY_CUSTOM)
    public Builder setCustom(String custom) {
      this.custom = OptionalValue.of(custom);
      return this;
    }

    @JsonProperty(JSON_PROPERTY_CALLID)
    public Builder setCallid(String callid) {
      this.callid = OptionalValue.of(callid);
      return this;
    }

    @JsonProperty(JSON_PROPERTY_CONFERENCE_ID)
    public Builder setConferenceId(String conferenceId) {
      this.conferenceId = OptionalValue.of(conferenceId);
      return this;
    }

    @JsonProperty(JSON_PROPERTY_VERSION)
    public Builder setVersion(Integer version) {
      this.version = OptionalValue.of(version);
      return this;
    }

    public NotificationEvent build() {
      return new NotificationEventImpl(
          event, type, destination, amd, custom, callid, conferenceId, version);
    }
  }
}
