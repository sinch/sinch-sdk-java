/*
 * Numbers | Sinch
 *
 * OpenAPI document version: 1.0.3
 * Contact: Support@sinch.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

package com.sinch.sdk.domains.numbers.models.v1.webhooks;

import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.sinch.sdk.core.utils.EnumDynamic;
import com.sinch.sdk.core.utils.EnumSupportDynamic;
import java.time.Instant;
import java.util.Arrays;
import java.util.stream.Stream;

/** NumberEvent */
@JsonDeserialize(builder = NumberEventImpl.Builder.class)
public interface NumberEvent {

  /**
   * The ID of the event.
   *
   * @return eventId
   */
  String getEventId();

  /**
   * The date and time when the callback was created and added to the callbacks queue.
   *
   * @return timestamp
   */
  Instant getTimestamp();

  /**
   * The ID of the project to which the event belongs.
   *
   * @return projectId
   */
  String getProjectId();

  /**
   * The unique identifier of the resource, depending on the resource type. For example, a phone
   * number, a hosting order ID, or a brand ID.
   *
   * @return resourceId
   */
  String getResourceId();

  /**
   * Get resourceType
   *
   * @return resourceType
   */
  ResourceType getResourceType();

  /** The type of the event. */
  public class EventTypeEnum extends EnumDynamic<String, EventTypeEnum> {
    public static final EventTypeEnum PROVISIONING_TO_SMS_PLATFORM =
        new EventTypeEnum("PROVISIONING_TO_SMS_PLATFORM");
    public static final EventTypeEnum DEPROVISIONING_FROM_SMS_PLATFORM =
        new EventTypeEnum("DEPROVISIONING_FROM_SMS_PLATFORM");
    public static final EventTypeEnum PROVISIONING_TO_CAMPAIGN =
        new EventTypeEnum("PROVISIONING_TO_CAMPAIGN");
    public static final EventTypeEnum DEPROVISIONING_FROM_CAMPAIGN =
        new EventTypeEnum("DEPROVISIONING_FROM_CAMPAIGN");
    public static final EventTypeEnum PROVISIONING_TO_VOICE_PLATFORM =
        new EventTypeEnum("PROVISIONING_TO_VOICE_PLATFORM");
    public static final EventTypeEnum DEPROVISIONING_TO_VOICE_PLATFORM =
        new EventTypeEnum("DEPROVISIONING_TO_VOICE_PLATFORM");

    private static final EnumSupportDynamic<String, EventTypeEnum> ENUM_SUPPORT =
        new EnumSupportDynamic<>(
            EventTypeEnum.class,
            EventTypeEnum::new,
            Arrays.asList(
                PROVISIONING_TO_SMS_PLATFORM,
                DEPROVISIONING_FROM_SMS_PLATFORM,
                PROVISIONING_TO_CAMPAIGN,
                DEPROVISIONING_FROM_CAMPAIGN,
                PROVISIONING_TO_VOICE_PLATFORM,
                DEPROVISIONING_TO_VOICE_PLATFORM));

    private EventTypeEnum(String value) {
      super(value);
    }

    public static Stream<EventTypeEnum> values() {
      return ENUM_SUPPORT.values();
    }

    public static EventTypeEnum from(String value) {
      return ENUM_SUPPORT.from(value);
    }

    public static String valueOf(EventTypeEnum e) {
      return ENUM_SUPPORT.valueOf(e);
    }
  }

  /**
   * The type of the event.
   *
   * @return eventType
   */
  EventTypeEnum getEventType();

  /** The status of the event. For example, <code>SUCCEEDED</code> or <code>FAILED</code>. */
  public class StatusEnum extends EnumDynamic<String, StatusEnum> {
    public static final StatusEnum SUCCEEDED = new StatusEnum("SUCCEEDED");
    public static final StatusEnum FAILED = new StatusEnum("FAILED");

    private static final EnumSupportDynamic<String, StatusEnum> ENUM_SUPPORT =
        new EnumSupportDynamic<>(
            StatusEnum.class, StatusEnum::new, Arrays.asList(SUCCEEDED, FAILED));

    private StatusEnum(String value) {
      super(value);
    }

    public static Stream<StatusEnum> values() {
      return ENUM_SUPPORT.values();
    }

    public static StatusEnum from(String value) {
      return ENUM_SUPPORT.from(value);
    }

    public static String valueOf(StatusEnum e) {
      return ENUM_SUPPORT.valueOf(e);
    }
  }

  /**
   * The status of the event. For example, <code>SUCCEEDED</code> or <code>FAILED</code>.
   *
   * @return status
   */
  StatusEnum getStatus();

  /**
   * If the status is FAILED, a failure code will be provided. For numbers provisioning to SMS
   * platform, there won't be any extra <code>failureCode</code>, as the result is binary. For
   * campaign provisioning-related failures, refer to the list for the possible values.
   */
  public class FailureCodeEnum extends EnumDynamic<String, FailureCodeEnum> {
    public static final FailureCodeEnum CAMPAIGN_NOT_AVAILABLE =
        new FailureCodeEnum("CAMPAIGN_NOT_AVAILABLE");
    public static final FailureCodeEnum EXCEEDED_10DLC_LIMIT =
        new FailureCodeEnum("EXCEEDED_10DLC_LIMIT");
    public static final FailureCodeEnum NUMBER_PROVISIONING_FAILED =
        new FailureCodeEnum("NUMBER_PROVISIONING_FAILED");
    public static final FailureCodeEnum PARTNER_SERVICE_UNAVAILABLE =
        new FailureCodeEnum("PARTNER_SERVICE_UNAVAILABLE");
    public static final FailureCodeEnum CAMPAIGN_PENDING_ACCEPTANCE =
        new FailureCodeEnum("CAMPAIGN_PENDING_ACCEPTANCE");
    public static final FailureCodeEnum MNO_SHARING_ERROR =
        new FailureCodeEnum("MNO_SHARING_ERROR");
    public static final FailureCodeEnum CAMPAIGN_PROVISIONING_FAILED =
        new FailureCodeEnum("CAMPAIGN_PROVISIONING_FAILED");
    public static final FailureCodeEnum CAMPAIGN_EXPIRED = new FailureCodeEnum("CAMPAIGN_EXPIRED");
    public static final FailureCodeEnum CAMPAIGN_MNO_REJECTED =
        new FailureCodeEnum("CAMPAIGN_MNO_REJECTED");
    public static final FailureCodeEnum CAMPAIGN_MNO_SUSPENDED =
        new FailureCodeEnum("CAMPAIGN_MNO_SUSPENDED");
    public static final FailureCodeEnum CAMPAIGN_MNO_REVIEW =
        new FailureCodeEnum("CAMPAIGN_MNO_REVIEW");
    public static final FailureCodeEnum INSUFFICIENT_BALANCE =
        new FailureCodeEnum("INSUFFICIENT_BALANCE");
    public static final FailureCodeEnum MOCK_CAMPAIGN_NOT_ALLOWED =
        new FailureCodeEnum("MOCK_CAMPAIGN_NOT_ALLOWED");
    public static final FailureCodeEnum TFN_NOT_ALLOWED = new FailureCodeEnum("TFN_NOT_ALLOWED");
    public static final FailureCodeEnum INVALID_NNID = new FailureCodeEnum("INVALID_NNID");

    private static final EnumSupportDynamic<String, FailureCodeEnum> ENUM_SUPPORT =
        new EnumSupportDynamic<>(
            FailureCodeEnum.class,
            FailureCodeEnum::new,
            Arrays.asList(
                CAMPAIGN_NOT_AVAILABLE,
                EXCEEDED_10DLC_LIMIT,
                NUMBER_PROVISIONING_FAILED,
                PARTNER_SERVICE_UNAVAILABLE,
                CAMPAIGN_PENDING_ACCEPTANCE,
                MNO_SHARING_ERROR,
                CAMPAIGN_PROVISIONING_FAILED,
                CAMPAIGN_EXPIRED,
                CAMPAIGN_MNO_REJECTED,
                CAMPAIGN_MNO_SUSPENDED,
                CAMPAIGN_MNO_REVIEW,
                INSUFFICIENT_BALANCE,
                MOCK_CAMPAIGN_NOT_ALLOWED,
                TFN_NOT_ALLOWED,
                INVALID_NNID));

    private FailureCodeEnum(String value) {
      super(value);
    }

    public static Stream<FailureCodeEnum> values() {
      return ENUM_SUPPORT.values();
    }

    public static FailureCodeEnum from(String value) {
      return ENUM_SUPPORT.from(value);
    }

    public static String valueOf(FailureCodeEnum e) {
      return ENUM_SUPPORT.valueOf(e);
    }
  }

  /**
   * If the status is FAILED, a failure code will be provided. For numbers provisioning to SMS
   * platform, there won't be any extra <code>failureCode</code>, as the result is binary. For
   * campaign provisioning-related failures, refer to the list for the possible values.
   *
   * @return failureCode
   */
  FailureCodeEnum getFailureCode();

  /**
   * Getting builder
   *
   * @return New Builder instance
   */
  static Builder builder() {
    return new NumberEventImpl.Builder();
  }

  /** Dedicated Builder */
  interface Builder {

    /**
     * see getter
     *
     * @param eventId see getter
     * @return Current builder
     * @see #getEventId
     */
    Builder setEventId(String eventId);

    /**
     * see getter
     *
     * @param timestamp see getter
     * @return Current builder
     * @see #getTimestamp
     */
    Builder setTimestamp(Instant timestamp);

    /**
     * see getter
     *
     * @param projectId see getter
     * @return Current builder
     * @see #getProjectId
     */
    Builder setProjectId(String projectId);

    /**
     * see getter
     *
     * @param resourceId see getter
     * @return Current builder
     * @see #getResourceId
     */
    Builder setResourceId(String resourceId);

    /**
     * see getter
     *
     * @param resourceType see getter
     * @return Current builder
     * @see #getResourceType
     */
    Builder setResourceType(ResourceType resourceType);

    /**
     * see getter
     *
     * @param eventType see getter
     * @return Current builder
     * @see #getEventType
     */
    Builder setEventType(EventTypeEnum eventType);

    /**
     * see getter
     *
     * @param status see getter
     * @return Current builder
     * @see #getStatus
     */
    Builder setStatus(StatusEnum status);

    /**
     * see getter
     *
     * @param failureCode see getter
     * @return Current builder
     * @see #getFailureCode
     */
    Builder setFailureCode(FailureCodeEnum failureCode);

    /**
     * Create instance
     *
     * @return The instance build with current builder values
     */
    NumberEvent build();
  }
}
