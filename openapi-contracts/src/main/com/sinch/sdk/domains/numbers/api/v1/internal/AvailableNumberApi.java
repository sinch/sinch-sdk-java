/*
 * Numbers | Sinch
 *
 * OpenAPI document version: 1.0.3
 * Contact: Support@sinch.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

package com.sinch.sdk.domains.numbers.api.v1.internal;

import com.fasterxml.jackson.core.type.TypeReference;
import com.sinch.sdk.core.exceptions.ApiException;
import com.sinch.sdk.core.exceptions.ApiExceptionBuilder;
import com.sinch.sdk.core.http.AuthManager;
import com.sinch.sdk.core.http.HttpClient;
import com.sinch.sdk.core.http.HttpMapper;
import com.sinch.sdk.core.http.HttpMethod;
import com.sinch.sdk.core.http.HttpRequest;
import com.sinch.sdk.core.http.HttpResponse;
import com.sinch.sdk.core.http.HttpStatus;
import com.sinch.sdk.core.http.URLParameter;
import com.sinch.sdk.core.http.URLPathUtils;
import com.sinch.sdk.core.models.ServerConfiguration;
import com.sinch.sdk.domains.numbers.models.v1.ActiveNumber;
import com.sinch.sdk.domains.numbers.models.v1.request.AvailableNumberRentAnyRequest;
import com.sinch.sdk.domains.numbers.models.v1.request.AvailableNumberRentRequest;
import com.sinch.sdk.domains.numbers.models.v1.response.AvailableNumber;
import com.sinch.sdk.domains.numbers.models.v1.response.internal.AvailableNumberListResponseInternal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Logger;

public class AvailableNumberApi {

  private static final Logger LOGGER = Logger.getLogger(AvailableNumberApi.class.getName());
  private HttpClient httpClient;
  private ServerConfiguration serverConfiguration;
  private Map<String, AuthManager> authManagersByOasSecuritySchemes;
  private HttpMapper mapper;

  public AvailableNumberApi(
      HttpClient httpClient,
      ServerConfiguration serverConfiguration,
      Map<String, AuthManager> authManagersByOasSecuritySchemes,
      HttpMapper mapper) {
    this.httpClient = httpClient;
    this.serverConfiguration = serverConfiguration;
    this.authManagersByOasSecuritySchemes = authManagersByOasSecuritySchemes;
    this.mapper = mapper;
  }

  /**
   * Search for a specific phone number This endpoint allows you to enter a specific phone number to
   * check if it&#39;s available for use. A 200 response will return the number&#39;s capability,
   * setup costs, monthly costs and if supporting documentation is required.
   *
   * @param projectId Found on your [Sinch Customer
   *     Dashboard](https://dashboard.sinch.com/settings/project-management). Settings &gt;
   *     Projects. (required)
   * @param phoneNumber Output only. The phone number in
   *     [E.164](https://community.sinch.com/t5/Glossary/E-164/ta-p/7537) format with leading
   *     &#x60;+&#x60;. (required)
   * @return AvailableNumber
   * @throws ApiException if fails to make API call
   */
  public AvailableNumber numberServiceGetAvailableNumber(String projectId, String phoneNumber)
      throws ApiException {

    LOGGER.finest(
        "[numberServiceGetAvailableNumber]"
            + " "
            + "projectId: "
            + projectId
            + ", "
            + "phoneNumber: "
            + phoneNumber);

    HttpRequest httpRequest = numberServiceGetAvailableNumberRequestBuilder(projectId, phoneNumber);
    HttpResponse response =
        httpClient.invokeAPI(
            this.serverConfiguration, this.authManagersByOasSecuritySchemes, httpRequest);

    if (HttpStatus.isSuccessfulStatus(response.getCode())) {
      TypeReference<AvailableNumber> localVarReturnType = new TypeReference<AvailableNumber>() {};
      return mapper.deserialize(response, localVarReturnType);
    }
    // fallback to default errors handling:
    // all error cases definition are not required from specs: will try some "hardcoded" content
    // parsing
    throw ApiExceptionBuilder.build(
        response.getMessage(),
        response.getCode(),
        mapper.deserialize(response, new TypeReference<HashMap<String, ?>>() {}));
  }

  private HttpRequest numberServiceGetAvailableNumberRequestBuilder(
      String projectId, String phoneNumber) throws ApiException {
    // verify the required parameter 'projectId' is set
    if (projectId == null) {
      throw new ApiException(
          400,
          "Missing the required parameter 'projectId' when calling"
              + " numberServiceGetAvailableNumber");
    }
    // verify the required parameter 'phoneNumber' is set
    if (phoneNumber == null) {
      throw new ApiException(
          400,
          "Missing the required parameter 'phoneNumber' when calling"
              + " numberServiceGetAvailableNumber");
    }

    String localVarPath =
        "/v1/projects/{projectId}/availableNumbers/{phoneNumber}"
            .replaceAll(
                "\\{" + "projectId" + "\\}", URLPathUtils.encodePathSegment(projectId.toString()))
            .replaceAll(
                "\\{" + "phoneNumber" + "\\}",
                URLPathUtils.encodePathSegment(phoneNumber.toString()));

    List<URLParameter> localVarQueryParams = new ArrayList<>();

    Map<String, String> localVarHeaderParams = new HashMap<>();

    final Collection<String> localVarAccepts = Arrays.asList("application/json");

    final Collection<String> localVarContentTypes = Arrays.asList();

    final Collection<String> localVarAuthNames = Arrays.asList("Basic", "OAuth2.0");
    final String serializedBody = null;

    return new HttpRequest(
        localVarPath,
        HttpMethod.GET,
        localVarQueryParams,
        serializedBody,
        localVarHeaderParams,
        localVarAccepts,
        localVarContentTypes,
        localVarAuthNames);
  }

  /**
   * Search for available phone numbers Search for available phone numbers that are available for
   * you to activate. You can filter by any property on the available number resource. When
   * searching, indicate the &#x60;capability&#x60; of the number in the array as &#x60;SMS&#x60;
   * and/or &#x60;VOICE&#x60;. To search for a number capable of both, list both &#x60;SMS&#x60; and
   * &#x60;VOICE&#x60;.
   *
   * @param projectId Found on your [Sinch Customer
   *     Dashboard](https://dashboard.sinch.com/settings/project-management). Settings &gt;
   *     Projects. (required)
   * @param regionCode Region code to filter by. ISO 3166-1 alpha-2 country code of the phone
   *     number. Example: US, GB or SE. (required)
   * @param type Number type to filter by. Options include, &#x60;MOBILE&#x60;, &#x60;LOCAL&#x60; or
   *     &#x60;TOLL_FREE&#x60;. (required)
   * @param numberPatternPattern Sequence of digits to search for. If you prefer or need certain
   *     digits in sequential order, you can enter the sequence of numbers here. For example,
   *     &#x60;2020&#x60;. (optional)
   * @param numberPatternSearchPattern Search pattern to apply. The options are, &#x60;START&#x60;,
   *     &#x60;CONTAINS&#x60;, and &#x60;END&#x60;. (optional)
   * @param capabilities Number capabilities to filter by SMS and/or VOICE. (optional
   * @param size Optional. The maximum number of items to return. (optional)
   * @return AvailableNumberListResponseInternal
   * @throws ApiException if fails to make API call
   */
  public AvailableNumberListResponseInternal numberServiceListAvailableNumbers(
      String projectId,
      String regionCode,
      String type,
      String numberPatternPattern,
      String numberPatternSearchPattern,
      List<String> capabilities,
      Integer size)
      throws ApiException {

    LOGGER.finest(
        "[numberServiceListAvailableNumbers]"
            + " "
            + "projectId: "
            + projectId
            + ", "
            + "regionCode: "
            + regionCode
            + ", "
            + "type: "
            + type
            + ", "
            + "numberPatternPattern: "
            + numberPatternPattern
            + ", "
            + "numberPatternSearchPattern: "
            + numberPatternSearchPattern
            + ", "
            + "capabilities: "
            + capabilities
            + ", "
            + "size: "
            + size);

    HttpRequest httpRequest =
        numberServiceListAvailableNumbersRequestBuilder(
            projectId,
            regionCode,
            type,
            numberPatternPattern,
            numberPatternSearchPattern,
            capabilities,
            size);
    HttpResponse response =
        httpClient.invokeAPI(
            this.serverConfiguration, this.authManagersByOasSecuritySchemes, httpRequest);

    if (HttpStatus.isSuccessfulStatus(response.getCode())) {
      TypeReference<AvailableNumberListResponseInternal> localVarReturnType =
          new TypeReference<AvailableNumberListResponseInternal>() {};
      return mapper.deserialize(response, localVarReturnType);
    }
    // fallback to default errors handling:
    // all error cases definition are not required from specs: will try some "hardcoded" content
    // parsing
    throw ApiExceptionBuilder.build(
        response.getMessage(),
        response.getCode(),
        mapper.deserialize(response, new TypeReference<HashMap<String, ?>>() {}));
  }

  private HttpRequest numberServiceListAvailableNumbersRequestBuilder(
      String projectId,
      String regionCode,
      String type,
      String numberPatternPattern,
      String numberPatternSearchPattern,
      List<String> capabilities,
      Integer size)
      throws ApiException {
    // verify the required parameter 'projectId' is set
    if (projectId == null) {
      throw new ApiException(
          400,
          "Missing the required parameter 'projectId' when calling"
              + " numberServiceListAvailableNumbers");
    }
    // verify the required parameter 'regionCode' is set
    if (regionCode == null) {
      throw new ApiException(
          400,
          "Missing the required parameter 'regionCode' when calling"
              + " numberServiceListAvailableNumbers");
    }
    // verify the required parameter 'type' is set
    if (type == null) {
      throw new ApiException(
          400,
          "Missing the required parameter 'type' when calling numberServiceListAvailableNumbers");
    }

    String localVarPath =
        "/v1/projects/{projectId}/availableNumbers"
            .replaceAll(
                "\\{" + "projectId" + "\\}", URLPathUtils.encodePathSegment(projectId.toString()));

    List<URLParameter> localVarQueryParams = new ArrayList<>();

    if (null != numberPatternPattern) {
      localVarQueryParams.add(
          new URLParameter(
              "numberPattern.pattern",
              numberPatternPattern,
              URLParameter.STYLE.valueOf("form".toUpperCase()),
              true));
    }

    if (null != numberPatternSearchPattern) {
      localVarQueryParams.add(
          new URLParameter(
              "numberPattern.searchPattern",
              numberPatternSearchPattern,
              URLParameter.STYLE.valueOf("form".toUpperCase()),
              true));
    }

    if (null != regionCode) {
      localVarQueryParams.add(
          new URLParameter(
              "regionCode", regionCode, URLParameter.STYLE.valueOf("form".toUpperCase()), true));
    }

    if (null != type) {
      localVarQueryParams.add(
          new URLParameter("type", type, URLParameter.STYLE.valueOf("form".toUpperCase()), true));
    }

    if (null != capabilities) {
      localVarQueryParams.add(
          new URLParameter(
              "capabilities",
              capabilities,
              URLParameter.STYLE.valueOf("form".toUpperCase()),
              true));
    }

    if (null != size) {
      localVarQueryParams.add(
          new URLParameter("size", size, URLParameter.STYLE.valueOf("form".toUpperCase()), true));
    }

    Map<String, String> localVarHeaderParams = new HashMap<>();

    final Collection<String> localVarAccepts = Arrays.asList("application/json");

    final Collection<String> localVarContentTypes = Arrays.asList();

    final Collection<String> localVarAuthNames = Arrays.asList("Basic", "OAuth2.0");
    final String serializedBody = null;

    return new HttpRequest(
        localVarPath,
        HttpMethod.GET,
        localVarQueryParams,
        serializedBody,
        localVarHeaderParams,
        localVarAccepts,
        localVarContentTypes,
        localVarAuthNames);
  }

  /**
   * Rent any number that matches the criteria Activates a phone number that matches the search
   * criteria provided in the request. Currently the rentAny operation works only for US LOCAL
   * numbers
   *
   * @param projectId Found on your [Sinch Customer
   *     Dashboard](https://dashboard.sinch.com/settings/project-management). Settings &gt;
   *     Projects. (required)
   * @param availableNumberRentAnyRequest The request to search and rent a number that matches the
   *     criteria. (required)
   * @return ActiveNumber
   * @throws ApiException if fails to make API call
   */
  public ActiveNumber numberServiceRentAnyNumber(
      String projectId, AvailableNumberRentAnyRequest availableNumberRentAnyRequest)
      throws ApiException {

    LOGGER.finest(
        "[numberServiceRentAnyNumber]"
            + " "
            + "projectId: "
            + projectId
            + ", "
            + "availableNumberRentAnyRequest: "
            + availableNumberRentAnyRequest);

    HttpRequest httpRequest =
        numberServiceRentAnyNumberRequestBuilder(projectId, availableNumberRentAnyRequest);
    HttpResponse response =
        httpClient.invokeAPI(
            this.serverConfiguration, this.authManagersByOasSecuritySchemes, httpRequest);

    if (HttpStatus.isSuccessfulStatus(response.getCode())) {
      TypeReference<ActiveNumber> localVarReturnType = new TypeReference<ActiveNumber>() {};
      return mapper.deserialize(response, localVarReturnType);
    }
    // fallback to default errors handling:
    // all error cases definition are not required from specs: will try some "hardcoded" content
    // parsing
    throw ApiExceptionBuilder.build(
        response.getMessage(),
        response.getCode(),
        mapper.deserialize(response, new TypeReference<HashMap<String, ?>>() {}));
  }

  private HttpRequest numberServiceRentAnyNumberRequestBuilder(
      String projectId, AvailableNumberRentAnyRequest availableNumberRentAnyRequest)
      throws ApiException {
    // verify the required parameter 'projectId' is set
    if (projectId == null) {
      throw new ApiException(
          400,
          "Missing the required parameter 'projectId' when calling numberServiceRentAnyNumber");
    }
    // verify the required parameter 'availableNumberRentAnyRequest' is set
    if (availableNumberRentAnyRequest == null) {
      throw new ApiException(
          400,
          "Missing the required parameter 'availableNumberRentAnyRequest' when calling"
              + " numberServiceRentAnyNumber");
    }

    String localVarPath =
        "/v1/projects/{projectId}/availableNumbers:rentAny"
            .replaceAll(
                "\\{" + "projectId" + "\\}", URLPathUtils.encodePathSegment(projectId.toString()));

    List<URLParameter> localVarQueryParams = new ArrayList<>();

    Map<String, String> localVarHeaderParams = new HashMap<>();

    final Collection<String> localVarAccepts = Arrays.asList("application/json");

    final Collection<String> localVarContentTypes = Arrays.asList("application/json");

    final Collection<String> localVarAuthNames = Arrays.asList("Basic", "OAuth2.0");
    final String serializedBody =
        mapper.serialize(localVarContentTypes, availableNumberRentAnyRequest);

    return new HttpRequest(
        localVarPath,
        HttpMethod.POST,
        localVarQueryParams,
        serializedBody,
        localVarHeaderParams,
        localVarAccepts,
        localVarContentTypes,
        localVarAuthNames);
  }

  /**
   * Activate a new phone number Activate a phone number to use with SMS products, Voice products,
   * or both. You&#39;ll use &#x60;smsConfiguration&#x60; to setup your number for SMS and
   * &#x60;voiceConfiguration&#x60; for Voice. To setup for both, add both objects. See the dropdown
   * menu (just under language selection) for code samples. Note: You cannot add both objects if you
   * only need to configure one object. For example, if you only need to configure
   * &#x60;smsConfiguration&#x60; for SMS messaging, do not add the &#x60;voiceConfiguration&#x60;
   * object or it will result in an error.
   *
   * @param projectId Found on your [Sinch Customer
   *     Dashboard](https://dashboard.sinch.com/settings/project-management). Settings &gt;
   *     Projects. (required)
   * @param phoneNumber Output only. The phone number in
   *     [E.164](https://community.sinch.com/t5/Glossary/E-164/ta-p/7537) format with leading
   *     &#x60;+&#x60;. (required)
   * @param availableNumberRentRequest The request to rent a number. (required)
   * @return ActiveNumber
   * @throws ApiException if fails to make API call
   */
  public ActiveNumber numberServiceRentNumber(
      String projectId, String phoneNumber, AvailableNumberRentRequest availableNumberRentRequest)
      throws ApiException {

    LOGGER.finest(
        "[numberServiceRentNumber]"
            + " "
            + "projectId: "
            + projectId
            + ", "
            + "phoneNumber: "
            + phoneNumber
            + ", "
            + "availableNumberRentRequest: "
            + availableNumberRentRequest);

    HttpRequest httpRequest =
        numberServiceRentNumberRequestBuilder(projectId, phoneNumber, availableNumberRentRequest);
    HttpResponse response =
        httpClient.invokeAPI(
            this.serverConfiguration, this.authManagersByOasSecuritySchemes, httpRequest);

    if (HttpStatus.isSuccessfulStatus(response.getCode())) {
      TypeReference<ActiveNumber> localVarReturnType = new TypeReference<ActiveNumber>() {};
      return mapper.deserialize(response, localVarReturnType);
    }
    // fallback to default errors handling:
    // all error cases definition are not required from specs: will try some "hardcoded" content
    // parsing
    throw ApiExceptionBuilder.build(
        response.getMessage(),
        response.getCode(),
        mapper.deserialize(response, new TypeReference<HashMap<String, ?>>() {}));
  }

  private HttpRequest numberServiceRentNumberRequestBuilder(
      String projectId, String phoneNumber, AvailableNumberRentRequest availableNumberRentRequest)
      throws ApiException {
    // verify the required parameter 'projectId' is set
    if (projectId == null) {
      throw new ApiException(
          400, "Missing the required parameter 'projectId' when calling numberServiceRentNumber");
    }
    // verify the required parameter 'phoneNumber' is set
    if (phoneNumber == null) {
      throw new ApiException(
          400, "Missing the required parameter 'phoneNumber' when calling numberServiceRentNumber");
    }
    // verify the required parameter 'availableNumberRentRequest' is set
    if (availableNumberRentRequest == null) {
      throw new ApiException(
          400,
          "Missing the required parameter 'availableNumberRentRequest' when calling"
              + " numberServiceRentNumber");
    }

    String localVarPath =
        "/v1/projects/{projectId}/availableNumbers/{phoneNumber}:rent"
            .replaceAll(
                "\\{" + "projectId" + "\\}", URLPathUtils.encodePathSegment(projectId.toString()))
            .replaceAll(
                "\\{" + "phoneNumber" + "\\}",
                URLPathUtils.encodePathSegment(phoneNumber.toString()));

    List<URLParameter> localVarQueryParams = new ArrayList<>();

    Map<String, String> localVarHeaderParams = new HashMap<>();

    final Collection<String> localVarAccepts = Arrays.asList("application/json");

    final Collection<String> localVarContentTypes = Arrays.asList("application/json");

    final Collection<String> localVarAuthNames = Arrays.asList("Basic", "OAuth2.0");
    final String serializedBody =
        mapper.serialize(localVarContentTypes, availableNumberRentRequest);

    return new HttpRequest(
        localVarPath,
        HttpMethod.POST,
        localVarQueryParams,
        serializedBody,
        localVarHeaderParams,
        localVarAccepts,
        localVarContentTypes,
        localVarAuthNames);
  }
}
