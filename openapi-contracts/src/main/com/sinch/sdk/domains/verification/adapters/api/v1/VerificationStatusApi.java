/*
 * Verification | Sinch
 * Verify users with SMS, flash calls (missed calls), a regular call, or data verification.
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: support@sinch.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.sinch.sdk.domains.verification.adapters.api.v1;

import com.fasterxml.jackson.core.type.TypeReference;
import com.sinch.sdk.core.exceptions.ApiException;
import com.sinch.sdk.core.exceptions.ApiExceptionBuilder;
import com.sinch.sdk.core.http.AuthManager;
import com.sinch.sdk.core.http.HttpClient;
import com.sinch.sdk.core.http.HttpMapper;
import com.sinch.sdk.core.http.HttpMethod;
import com.sinch.sdk.core.http.HttpRequest;
import com.sinch.sdk.core.http.HttpResponse;
import com.sinch.sdk.core.http.HttpStatus;
import com.sinch.sdk.core.http.URLParameter;
import com.sinch.sdk.core.http.URLPathUtils;
import com.sinch.sdk.core.models.ServerConfiguration;
import com.sinch.sdk.domains.verification.models.dto.v1.VerificationResponseDto;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.Logger;

public class VerificationStatusApi {

  private static final Logger LOGGER = Logger.getLogger(VerificationStatusApi.class.getName());
  private HttpClient httpClient;
  private ServerConfiguration serverConfiguration;
  private Map<String, AuthManager> authManagersByOasSecuritySchemes;
  private HttpMapper mapper;

  public VerificationStatusApi(
      HttpClient httpClient,
      ServerConfiguration serverConfiguration,
      Map<String, AuthManager> authManagersByOasSecuritySchemes,
      HttpMapper mapper) {
    this.httpClient = httpClient;
    this.serverConfiguration = serverConfiguration;
    this.authManagersByOasSecuritySchemes = authManagersByOasSecuritySchemes;
    this.mapper = mapper;
  }

  /**
   * Get verification by ID Queries the verification result by sending the verification ID. With
   * this query you can get the result of a verification.
   *
   * @param id The ID of the verification. (required)
   * @return VerificationResponseDto
   * @throws ApiException if fails to make API call
   */
  public VerificationResponseDto verificationStatusById(String id) throws ApiException {

    LOGGER.finest("[verificationStatusById]" + " " + "id: " + id);

    HttpRequest httpRequest = verificationStatusByIdRequestBuilder(id);
    HttpResponse response =
        httpClient.invokeAPI(
            this.serverConfiguration, this.authManagersByOasSecuritySchemes, httpRequest);

    if (HttpStatus.isSuccessfulStatus(response.getCode())) {
      TypeReference<VerificationResponseDto> localVarReturnType =
          new TypeReference<VerificationResponseDto>() {};
      return mapper.deserialize(response, localVarReturnType);
    }
    // fallback to default errors handling:
    // all error cases definition are not required from specs: will try some "hardcoded" content
    // parsing
    throw ApiExceptionBuilder.build(
        response.getMessage(),
        response.getCode(),
        mapper.deserialize(response, new TypeReference<HashMap<String, ?>>() {}));
  }

  private HttpRequest verificationStatusByIdRequestBuilder(String id) throws ApiException {
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(
          400, "Missing the required parameter 'id' when calling verificationStatusById");
    }

    String localVarPath =
        "/verification/v1/verifications/id/{id}"
            .replaceAll("\\{" + "id" + "\\}", URLPathUtils.encodePathSegment(id.toString()));

    List<URLParameter> localVarQueryParams = new ArrayList<>();

    Map<String, String> localVarHeaderParams = new HashMap<>();

    final Collection<String> localVarAccepts = Arrays.asList("application/json");

    final Collection<String> localVarContentTypes = Arrays.asList();

    final Collection<String> localVarAuthNames = Arrays.asList("Basic", "Application");
    final String serializedBody = null;

    return new HttpRequest(
        localVarPath,
        HttpMethod.GET,
        localVarQueryParams,
        serializedBody,
        localVarHeaderParams,
        localVarAccepts,
        localVarContentTypes,
        localVarAuthNames);
  }

  /**
   * Get verification by Identity Queries the verification result by sending the verification
   * Identity (usually a phone number) and its method. With this query you can get the result of a
   * verification.
   *
   * @param endpoint For type &#x60;number&#x60; use a
   *     [E.164](https://community.sinch.com/t5/Glossary/E-164/ta-p/7537)-compatible phone number.
   *     (required)
   * @param method The method of the verification. (required)
   * @return VerificationResponseDto
   * @throws ApiException if fails to make API call
   */
  public VerificationResponseDto verificationStatusByIdentity(String endpoint, String method)
      throws ApiException {

    LOGGER.finest(
        "[verificationStatusByIdentity]"
            + " "
            + "endpoint: "
            + endpoint
            + ", "
            + "method: "
            + method);

    HttpRequest httpRequest = verificationStatusByIdentityRequestBuilder(endpoint, method);
    HttpResponse response =
        httpClient.invokeAPI(
            this.serverConfiguration, this.authManagersByOasSecuritySchemes, httpRequest);

    if (HttpStatus.isSuccessfulStatus(response.getCode())) {
      TypeReference<VerificationResponseDto> localVarReturnType =
          new TypeReference<VerificationResponseDto>() {};
      return mapper.deserialize(response, localVarReturnType);
    }
    // fallback to default errors handling:
    // all error cases definition are not required from specs: will try some "hardcoded" content
    // parsing
    throw ApiExceptionBuilder.build(
        response.getMessage(),
        response.getCode(),
        mapper.deserialize(response, new TypeReference<HashMap<String, ?>>() {}));
  }

  private HttpRequest verificationStatusByIdentityRequestBuilder(String endpoint, String method)
      throws ApiException {
    // verify the required parameter 'endpoint' is set
    if (endpoint == null) {
      throw new ApiException(
          400,
          "Missing the required parameter 'endpoint' when calling verificationStatusByIdentity");
    }
    // verify the required parameter 'method' is set
    if (method == null) {
      throw new ApiException(
          400, "Missing the required parameter 'method' when calling verificationStatusByIdentity");
    }

    String localVarPath =
        "/verification/v1/verifications/{method}/number/{endpoint}"
            .replaceAll(
                "\\{" + "endpoint" + "\\}", URLPathUtils.encodePathSegment(endpoint.toString()))
            .replaceAll(
                "\\{" + "method" + "\\}", URLPathUtils.encodePathSegment(method.toString()));

    List<URLParameter> localVarQueryParams = new ArrayList<>();

    Map<String, String> localVarHeaderParams = new HashMap<>();

    final Collection<String> localVarAccepts = Arrays.asList("application/json");

    final Collection<String> localVarContentTypes = Arrays.asList();

    final Collection<String> localVarAuthNames = Arrays.asList("Basic", "Application");
    final String serializedBody = null;

    return new HttpRequest(
        localVarPath,
        HttpMethod.GET,
        localVarQueryParams,
        serializedBody,
        localVarHeaderParams,
        localVarAccepts,
        localVarContentTypes,
        localVarAuthNames);
  }

  /**
   * Get verification by Reference Queries the verification result by sending the verification
   * Reference. With this query you can get the result of a verification.
   *
   * @param reference The custom reference of the verification. (required)
   * @return VerificationResponseDto
   * @throws ApiException if fails to make API call
   */
  public VerificationResponseDto verificationStatusByReference(String reference)
      throws ApiException {

    LOGGER.finest("[verificationStatusByReference]" + " " + "reference: " + reference);

    HttpRequest httpRequest = verificationStatusByReferenceRequestBuilder(reference);
    HttpResponse response =
        httpClient.invokeAPI(
            this.serverConfiguration, this.authManagersByOasSecuritySchemes, httpRequest);

    if (HttpStatus.isSuccessfulStatus(response.getCode())) {
      TypeReference<VerificationResponseDto> localVarReturnType =
          new TypeReference<VerificationResponseDto>() {};
      return mapper.deserialize(response, localVarReturnType);
    }
    // fallback to default errors handling:
    // all error cases definition are not required from specs: will try some "hardcoded" content
    // parsing
    throw ApiExceptionBuilder.build(
        response.getMessage(),
        response.getCode(),
        mapper.deserialize(response, new TypeReference<HashMap<String, ?>>() {}));
  }

  private HttpRequest verificationStatusByReferenceRequestBuilder(String reference)
      throws ApiException {
    // verify the required parameter 'reference' is set
    if (reference == null) {
      throw new ApiException(
          400,
          "Missing the required parameter 'reference' when calling verificationStatusByReference");
    }

    String localVarPath =
        "/verification/v1/verifications/reference/{reference}"
            .replaceAll(
                "\\{" + "reference" + "\\}", URLPathUtils.encodePathSegment(reference.toString()));

    List<URLParameter> localVarQueryParams = new ArrayList<>();

    Map<String, String> localVarHeaderParams = new HashMap<>();

    final Collection<String> localVarAccepts = Arrays.asList("application/json");

    final Collection<String> localVarContentTypes = Arrays.asList();

    final Collection<String> localVarAuthNames = Arrays.asList("Basic", "Application");
    final String serializedBody = null;

    return new HttpRequest(
        localVarPath,
        HttpMethod.GET,
        localVarQueryParams,
        serializedBody,
        localVarHeaderParams,
        localVarAccepts,
        localVarContentTypes,
        localVarAuthNames);
  }
}
