/*
 * Verification | Sinch
 * Verify users with SMS, flash calls (missed calls), a regular call, or data verification.
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: support@sinch.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.sinch.sdk.domains.verification.models.dto.v1;

import com.fasterxml.jackson.annotation.JsonFilter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import java.util.Objects;

/** The response contains the &#x60;template&#x60; of the SMS to be expected and intercepted. */
@JsonPropertyOrder({
  SMSInitiateVerificationResponseSmsDto.JSON_PROPERTY_TEMPLATE,
  SMSInitiateVerificationResponseSmsDto.JSON_PROPERTY_INTERCEPTION_TIMEOUT
})
@JsonFilter("uninitializedFilter")
@JsonInclude(value = JsonInclude.Include.CUSTOM)
public class SMSInitiateVerificationResponseSmsDto {
  private static final long serialVersionUID = 1L;
  public static final String JSON_PROPERTY_TEMPLATE = "template";
  private String template;
  private boolean templateDefined = false;

  public static final String JSON_PROPERTY_INTERCEPTION_TIMEOUT = "interceptionTimeout";
  private String interceptionTimeout;
  private boolean interceptionTimeoutDefined = false;

  public SMSInitiateVerificationResponseSmsDto() {}

  public SMSInitiateVerificationResponseSmsDto template(String template) {
    this.template = template;
    this.templateDefined = true;
    return this;
  }

  /**
   * The expected template for the SMS response.
   *
   * @return template
   */
  @JsonProperty(JSON_PROPERTY_TEMPLATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getTemplate() {
    return template;
  }

  @JsonIgnore
  public boolean getTemplateDefined() {
    return templateDefined;
  }

  @JsonProperty(JSON_PROPERTY_TEMPLATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTemplate(String template) {
    this.template = template;
    this.templateDefined = true;
  }

  public SMSInitiateVerificationResponseSmsDto interceptionTimeout(String interceptionTimeout) {
    this.interceptionTimeout = interceptionTimeout;
    this.interceptionTimeoutDefined = true;
    return this;
  }

  /**
   * The amount of time in seconds that the client should wait for the SMS.
   *
   * @return interceptionTimeout
   */
  @JsonProperty(JSON_PROPERTY_INTERCEPTION_TIMEOUT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getInterceptionTimeout() {
    return interceptionTimeout;
  }

  @JsonIgnore
  public boolean getInterceptionTimeoutDefined() {
    return interceptionTimeoutDefined;
  }

  @JsonProperty(JSON_PROPERTY_INTERCEPTION_TIMEOUT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInterceptionTimeout(String interceptionTimeout) {
    this.interceptionTimeout = interceptionTimeout;
    this.interceptionTimeoutDefined = true;
  }

  /** Return true if this SMSInitiateVerificationResponse_sms object is equal to o. */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SMSInitiateVerificationResponseSmsDto smSInitiateVerificationResponseSms =
        (SMSInitiateVerificationResponseSmsDto) o;
    return Objects.equals(this.template, smSInitiateVerificationResponseSms.template)
        && Objects.equals(
            this.interceptionTimeout, smSInitiateVerificationResponseSms.interceptionTimeout);
  }

  @Override
  public int hashCode() {
    return Objects.hash(template, interceptionTimeout);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SMSInitiateVerificationResponseSmsDto {\n");
    sb.append("    template: ").append(toIndentedString(template)).append("\n");
    sb.append("    interceptionTimeout: ")
        .append(toIndentedString(interceptionTimeout))
        .append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
