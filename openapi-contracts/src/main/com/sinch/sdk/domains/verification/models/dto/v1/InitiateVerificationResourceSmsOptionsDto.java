/*
 * Verification | Sinch
 * Verify users with SMS, flash calls (missed calls), a regular call, or data verification.
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: support@sinch.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.sinch.sdk.domains.verification.models.dto.v1;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFilter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Objects;

/**
 * An optional object for SMS Verification, with default values assumed for all contained values if
 * not provided.
 */
@JsonPropertyOrder({
  InitiateVerificationResourceSmsOptionsDto.JSON_PROPERTY_EXPIRY,
  InitiateVerificationResourceSmsOptionsDto.JSON_PROPERTY_CODE_TYPE,
  InitiateVerificationResourceSmsOptionsDto.JSON_PROPERTY_TEMPLATE
})
@JsonFilter("uninitializedFilter")
@JsonInclude(value = JsonInclude.Include.CUSTOM)
public class InitiateVerificationResourceSmsOptionsDto {
  private static final long serialVersionUID = 1L;
  public static final String JSON_PROPERTY_EXPIRY = "expiry";
  private String expiry;
  private boolean expiryDefined = false;

  /** Accepted values for the type of code to be generated are Numeric, Alpha, and Alphanumeric. */
  public enum CodeTypeEnum {
    NUMERIC("Numeric"),

    ALPHA("Alpha"),

    ALPHANUMERIC("Alphanumeric"),

    UNKNOWN_DEFAULT_OPEN_API("unknown_default_open_api");

    private String value;

    CodeTypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static CodeTypeEnum fromValue(String value) {
      for (CodeTypeEnum b : CodeTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return UNKNOWN_DEFAULT_OPEN_API;
    }
  }

  public static final String JSON_PROPERTY_CODE_TYPE = "codeType";
  private String codeType;
  private boolean codeTypeDefined = false;

  public static final String JSON_PROPERTY_TEMPLATE = "template";
  private String template;
  private boolean templateDefined = false;

  public InitiateVerificationResourceSmsOptionsDto() {}

  public InitiateVerificationResourceSmsOptionsDto expiry(String expiry) {
    this.expiry = expiry;
    this.expiryDefined = true;
    return this;
  }

  /**
   * The expiration time for a verification process is represented in the format
   * &#x60;HH:MM:SS&#x60;.
   *
   * @return expiry
   */
  @JsonProperty(JSON_PROPERTY_EXPIRY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getExpiry() {
    return expiry;
  }

  @JsonIgnore
  public boolean getExpiryDefined() {
    return expiryDefined;
  }

  @JsonProperty(JSON_PROPERTY_EXPIRY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExpiry(String expiry) {
    this.expiry = expiry;
    this.expiryDefined = true;
  }

  public InitiateVerificationResourceSmsOptionsDto codeType(String codeType) {
    this.codeType = codeType;
    this.codeTypeDefined = true;
    return this;
  }

  /**
   * Accepted values for the type of code to be generated are Numeric, Alpha, and Alphanumeric.
   *
   * @return codeType
   */
  @JsonProperty(JSON_PROPERTY_CODE_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getCodeType() {
    return codeType;
  }

  @JsonIgnore
  public boolean getCodeTypeDefined() {
    return codeTypeDefined;
  }

  @JsonProperty(JSON_PROPERTY_CODE_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCodeType(String codeType) {
    this.codeType = codeType;
    this.codeTypeDefined = true;
  }

  public InitiateVerificationResourceSmsOptionsDto template(String template) {
    this.template = template;
    this.templateDefined = true;
    return this;
  }

  /**
   * The SMS template must include a placeholder &#x60;{{CODE}}&#x60; where the verification code
   * will be inserted, and it can otherwise be customized as desired.
   *
   * @return template
   */
  @JsonProperty(JSON_PROPERTY_TEMPLATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getTemplate() {
    return template;
  }

  @JsonIgnore
  public boolean getTemplateDefined() {
    return templateDefined;
  }

  @JsonProperty(JSON_PROPERTY_TEMPLATE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTemplate(String template) {
    this.template = template;
    this.templateDefined = true;
  }

  /** Return true if this InitiateVerificationResource_smsOptions object is equal to o. */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InitiateVerificationResourceSmsOptionsDto initiateVerificationResourceSmsOptions =
        (InitiateVerificationResourceSmsOptionsDto) o;
    return Objects.equals(this.expiry, initiateVerificationResourceSmsOptions.expiry)
        && Objects.equals(this.codeType, initiateVerificationResourceSmsOptions.codeType)
        && Objects.equals(this.template, initiateVerificationResourceSmsOptions.template);
  }

  @Override
  public int hashCode() {
    return Objects.hash(expiry, codeType, template);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InitiateVerificationResourceSmsOptionsDto {\n");
    sb.append("    expiry: ").append(toIndentedString(expiry)).append("\n");
    sb.append("    codeType: ").append(toIndentedString(codeType)).append("\n");
    sb.append("    template: ").append(toIndentedString(template)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
