/*
 * Verification | Sinch
 * Verify users with SMS, flash calls (missed calls), a regular call, or data verification.
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: support@sinch.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.sinch.sdk.domains.verification.models.dto.v1;

import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
import com.fasterxml.jackson.databind.ser.std.StdSerializer;
import com.sinch.sdk.core.models.AbstractOpenApiSchema;
import com.sinch.sdk.core.utils.databind.JSONNavigator;
import java.io.IOException;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;

@JsonDeserialize(using = VerificationResponseDto.VerificationResponseDtoDeserializer.class)
@JsonSerialize(using = VerificationResponseDto.VerificationResponseDtoSerializer.class)
public final class VerificationResponseDto extends AbstractOpenApiSchema {
  private static final Logger log = Logger.getLogger(VerificationResponseDto.class.getName());

  public static final class VerificationResponseDtoSerializer
      extends StdSerializer<VerificationResponseDto> {
    private static final long serialVersionUID = 1L;

    public VerificationResponseDtoSerializer(Class<VerificationResponseDto> t) {
      super(t);
    }

    public VerificationResponseDtoSerializer() {
      this(null);
    }

    @Override
    public void serialize(
        VerificationResponseDto value, JsonGenerator jgen, SerializerProvider provider)
        throws IOException, JsonProcessingException {
      jgen.writeObject(value.getActualInstance());
    }
  }

  public static final class VerificationResponseDtoDeserializer
      extends StdDeserializer<VerificationResponseDto> {

    private static final long serialVersionUID = 1L;

    public VerificationResponseDtoDeserializer() {
      this(VerificationResponseDto.class);
    }

    public VerificationResponseDtoDeserializer(Class<?> vc) {
      super(vc);
    }

    @Override
    public VerificationResponseDto deserialize(JsonParser jp, DeserializationContext ctxt)
        throws IOException, JsonProcessingException {
      JsonNode tree = jp.readValueAsTree();
      Object deserialized = null;
      VerificationResponseDto newVerificationResponseDto = new VerificationResponseDto();
      Map<String, Object> result2 =
          tree.traverse(jp.getCodec()).readValueAs(new TypeReference<Map<String, Object>>() {});
      String discriminatorValue = (String) result2.get("method");
      switch (discriminatorValue) {
        case "CalloutVerificationStatusResponse":
          deserialized =
              tree.traverse(jp.getCodec()).readValueAs(CalloutVerificationStatusResponseDto.class);
          newVerificationResponseDto.setActualInstance(deserialized);
          return newVerificationResponseDto;
        case "FlashcallVerificationStatusResponse":
          deserialized =
              tree.traverse(jp.getCodec())
                  .readValueAs(FlashcallVerificationStatusResponseDto.class);
          newVerificationResponseDto.setActualInstance(deserialized);
          return newVerificationResponseDto;
        case "SMSVerificationStatusResponse":
          deserialized =
              tree.traverse(jp.getCodec()).readValueAs(SMSVerificationStatusResponseDto.class);
          newVerificationResponseDto.setActualInstance(deserialized);
          return newVerificationResponseDto;
        case "callout":
          deserialized =
              tree.traverse(jp.getCodec()).readValueAs(CalloutVerificationStatusResponseDto.class);
          newVerificationResponseDto.setActualInstance(deserialized);
          return newVerificationResponseDto;
        case "flashcall":
          deserialized =
              tree.traverse(jp.getCodec())
                  .readValueAs(FlashcallVerificationStatusResponseDto.class);
          newVerificationResponseDto.setActualInstance(deserialized);
          return newVerificationResponseDto;
        case "sms":
          deserialized =
              tree.traverse(jp.getCodec()).readValueAs(SMSVerificationStatusResponseDto.class);
          newVerificationResponseDto.setActualInstance(deserialized);
          return newVerificationResponseDto;
        default:
          log.log(
              Level.WARNING,
              String.format(
                  "Failed to lookup discriminator value `%s` for VerificationResponseDto. Possible"
                      + " values: CalloutVerificationStatusResponse"
                      + " FlashcallVerificationStatusResponse SMSVerificationStatusResponse callout"
                      + " flashcall sms",
                  discriminatorValue));
      }

      boolean typeCoercion = ctxt.isEnabled(MapperFeature.ALLOW_COERCION_OF_SCALARS);
      int match = 0;
      JsonToken token = tree.traverse(jp.getCodec()).nextToken();
      // deserialize CalloutVerificationStatusResponseDto
      try {
        boolean attemptParsing = true;
        // ensure that we respect type coercion as set on the client ObjectMapper
        if (CalloutVerificationStatusResponseDto.class.equals(Integer.class)
            || CalloutVerificationStatusResponseDto.class.equals(Long.class)
            || CalloutVerificationStatusResponseDto.class.equals(Float.class)
            || CalloutVerificationStatusResponseDto.class.equals(Double.class)
            || CalloutVerificationStatusResponseDto.class.equals(Boolean.class)
            || CalloutVerificationStatusResponseDto.class.equals(String.class)) {
          attemptParsing = typeCoercion;
          if (!attemptParsing) {
            attemptParsing |=
                ((CalloutVerificationStatusResponseDto.class.equals(Integer.class)
                        || CalloutVerificationStatusResponseDto.class.equals(Long.class))
                    && token == JsonToken.VALUE_NUMBER_INT);
            attemptParsing |=
                ((CalloutVerificationStatusResponseDto.class.equals(Float.class)
                        || CalloutVerificationStatusResponseDto.class.equals(Double.class))
                    && token == JsonToken.VALUE_NUMBER_FLOAT);
            attemptParsing |=
                (CalloutVerificationStatusResponseDto.class.equals(Boolean.class)
                    && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
            attemptParsing |=
                (CalloutVerificationStatusResponseDto.class.equals(String.class)
                    && token == JsonToken.VALUE_STRING);
          }
        }
        if (attemptParsing) {
          deserialized =
              tree.traverse(jp.getCodec()).readValueAs(CalloutVerificationStatusResponseDto.class);
          // TODO: there is no validation against JSON schema constraints
          // (min, max, enum, pattern...), this does not perform a strict JSON
          // validation, which means the 'match' count may be higher than it should be.
          match++;
          log.log(Level.FINER, "Input data matches schema 'CalloutVerificationStatusResponseDto'");
        }
      } catch (Exception e) {
        // deserialization failed, continue
        log.log(
            Level.FINER,
            "Input data does not match schema 'CalloutVerificationStatusResponseDto'",
            e);
      }

      // deserialize FlashcallVerificationStatusResponseDto
      try {
        boolean attemptParsing = true;
        // ensure that we respect type coercion as set on the client ObjectMapper
        if (FlashcallVerificationStatusResponseDto.class.equals(Integer.class)
            || FlashcallVerificationStatusResponseDto.class.equals(Long.class)
            || FlashcallVerificationStatusResponseDto.class.equals(Float.class)
            || FlashcallVerificationStatusResponseDto.class.equals(Double.class)
            || FlashcallVerificationStatusResponseDto.class.equals(Boolean.class)
            || FlashcallVerificationStatusResponseDto.class.equals(String.class)) {
          attemptParsing = typeCoercion;
          if (!attemptParsing) {
            attemptParsing |=
                ((FlashcallVerificationStatusResponseDto.class.equals(Integer.class)
                        || FlashcallVerificationStatusResponseDto.class.equals(Long.class))
                    && token == JsonToken.VALUE_NUMBER_INT);
            attemptParsing |=
                ((FlashcallVerificationStatusResponseDto.class.equals(Float.class)
                        || FlashcallVerificationStatusResponseDto.class.equals(Double.class))
                    && token == JsonToken.VALUE_NUMBER_FLOAT);
            attemptParsing |=
                (FlashcallVerificationStatusResponseDto.class.equals(Boolean.class)
                    && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
            attemptParsing |=
                (FlashcallVerificationStatusResponseDto.class.equals(String.class)
                    && token == JsonToken.VALUE_STRING);
          }
        }
        if (attemptParsing) {
          deserialized =
              tree.traverse(jp.getCodec())
                  .readValueAs(FlashcallVerificationStatusResponseDto.class);
          // TODO: there is no validation against JSON schema constraints
          // (min, max, enum, pattern...), this does not perform a strict JSON
          // validation, which means the 'match' count may be higher than it should be.
          match++;
          log.log(
              Level.FINER, "Input data matches schema 'FlashcallVerificationStatusResponseDto'");
        }
      } catch (Exception e) {
        // deserialization failed, continue
        log.log(
            Level.FINER,
            "Input data does not match schema 'FlashcallVerificationStatusResponseDto'",
            e);
      }

      // deserialize SMSVerificationStatusResponseDto
      try {
        boolean attemptParsing = true;
        // ensure that we respect type coercion as set on the client ObjectMapper
        if (SMSVerificationStatusResponseDto.class.equals(Integer.class)
            || SMSVerificationStatusResponseDto.class.equals(Long.class)
            || SMSVerificationStatusResponseDto.class.equals(Float.class)
            || SMSVerificationStatusResponseDto.class.equals(Double.class)
            || SMSVerificationStatusResponseDto.class.equals(Boolean.class)
            || SMSVerificationStatusResponseDto.class.equals(String.class)) {
          attemptParsing = typeCoercion;
          if (!attemptParsing) {
            attemptParsing |=
                ((SMSVerificationStatusResponseDto.class.equals(Integer.class)
                        || SMSVerificationStatusResponseDto.class.equals(Long.class))
                    && token == JsonToken.VALUE_NUMBER_INT);
            attemptParsing |=
                ((SMSVerificationStatusResponseDto.class.equals(Float.class)
                        || SMSVerificationStatusResponseDto.class.equals(Double.class))
                    && token == JsonToken.VALUE_NUMBER_FLOAT);
            attemptParsing |=
                (SMSVerificationStatusResponseDto.class.equals(Boolean.class)
                    && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
            attemptParsing |=
                (SMSVerificationStatusResponseDto.class.equals(String.class)
                    && token == JsonToken.VALUE_STRING);
          }
        }
        if (attemptParsing) {
          deserialized =
              tree.traverse(jp.getCodec()).readValueAs(SMSVerificationStatusResponseDto.class);
          // TODO: there is no validation against JSON schema constraints
          // (min, max, enum, pattern...), this does not perform a strict JSON
          // validation, which means the 'match' count may be higher than it should be.
          match++;
          log.log(Level.FINER, "Input data matches schema 'SMSVerificationStatusResponseDto'");
        }
      } catch (Exception e) {
        // deserialization failed, continue
        log.log(
            Level.FINER, "Input data does not match schema 'SMSVerificationStatusResponseDto'", e);
      }

      if (match == 1) {
        VerificationResponseDto ret = new VerificationResponseDto();
        ret.setActualInstance(deserialized);
        return ret;
      }
      throw new IOException(
          String.format(
              "Failed deserialization for VerificationResponseDto: %d classes match result,"
                  + " expected 1",
              match));
    }

    /** Handle deserialization of the 'null' value. */
    @Override
    public VerificationResponseDto getNullValue(DeserializationContext ctxt)
        throws JsonMappingException {
      throw new JsonMappingException(ctxt.getParser(), "VerificationResponseDto cannot be null");
    }
  }

  // store a list of schema names defined in oneOf
  public static final Map<String, Class<?>> schemas = new HashMap<>();

  public VerificationResponseDto() {
    super("oneOf", Boolean.FALSE);
  }

  public VerificationResponseDto(CalloutVerificationStatusResponseDto o) {
    super("oneOf", Boolean.FALSE);
    setActualInstance(o);
  }

  public VerificationResponseDto(FlashcallVerificationStatusResponseDto o) {
    super("oneOf", Boolean.FALSE);
    setActualInstance(o);
  }

  public VerificationResponseDto(SMSVerificationStatusResponseDto o) {
    super("oneOf", Boolean.FALSE);
    setActualInstance(o);
  }

  static {
    schemas.put("CalloutVerificationStatusResponseDto", CalloutVerificationStatusResponseDto.class);
    schemas.put(
        "FlashcallVerificationStatusResponseDto", FlashcallVerificationStatusResponseDto.class);
    schemas.put("SMSVerificationStatusResponseDto", SMSVerificationStatusResponseDto.class);
    JSONNavigator.registerDescendants(
        VerificationResponseDto.class, Collections.unmodifiableMap(schemas));
    // Initialize and register the discriminator mappings.
    Map<String, Class<?>> mappings = new HashMap<String, Class<?>>();
    mappings.put("CalloutVerificationStatusResponse", CalloutVerificationStatusResponseDto.class);
    mappings.put(
        "FlashcallVerificationStatusResponse", FlashcallVerificationStatusResponseDto.class);
    mappings.put("SMSVerificationStatusResponse", SMSVerificationStatusResponseDto.class);
    mappings.put("callout", CalloutVerificationStatusResponseDto.class);
    mappings.put("flashcall", FlashcallVerificationStatusResponseDto.class);
    mappings.put("sms", SMSVerificationStatusResponseDto.class);
    mappings.put("VerificationResponse", VerificationResponseDto.class);
    JSONNavigator.registerDiscriminator(VerificationResponseDto.class, "method", mappings);
  }

  @Override
  public Map<String, Class<?>> getSchemas() {
    return VerificationResponseDto.schemas;
  }

  /**
   * Set the instance that matches the oneOf child schema, check the instance parameter is valid
   * against the oneOf child schemas: CalloutVerificationStatusResponseDto,
   * FlashcallVerificationStatusResponseDto, SMSVerificationStatusResponseDto
   *
   * <p>It could be an instance of the 'oneOf' schemas. The oneOf child schemas may themselves be a
   * composed schema (allOf, anyOf, oneOf).
   */
  @Override
  public void setActualInstance(Object instance) {
    if (JSONNavigator.isInstanceOf(
        CalloutVerificationStatusResponseDto.class, instance, new HashSet<Class<?>>())) {
      super.setActualInstance(instance);
      return;
    }

    if (JSONNavigator.isInstanceOf(
        FlashcallVerificationStatusResponseDto.class, instance, new HashSet<Class<?>>())) {
      super.setActualInstance(instance);
      return;
    }

    if (JSONNavigator.isInstanceOf(
        SMSVerificationStatusResponseDto.class, instance, new HashSet<Class<?>>())) {
      super.setActualInstance(instance);
      return;
    }

    throw new RuntimeException(
        "Invalid instance type. Must be CalloutVerificationStatusResponseDto,"
            + " FlashcallVerificationStatusResponseDto, SMSVerificationStatusResponseDto");
  }

  /**
   * Get the actual instance, which can be the following: CalloutVerificationStatusResponseDto,
   * FlashcallVerificationStatusResponseDto, SMSVerificationStatusResponseDto
   *
   * @return The actual instance (CalloutVerificationStatusResponseDto,
   *     FlashcallVerificationStatusResponseDto, SMSVerificationStatusResponseDto)
   */
  @Override
  public Object getActualInstance() {
    return super.getActualInstance();
  }

  /**
   * Get the actual instance of `CalloutVerificationStatusResponseDto`. If the actual instance is
   * not `CalloutVerificationStatusResponseDto`, the ClassCastException will be thrown.
   *
   * @return The actual instance of `CalloutVerificationStatusResponseDto`
   * @throws ClassCastException if the instance is not `CalloutVerificationStatusResponseDto`
   */
  public CalloutVerificationStatusResponseDto getCalloutVerificationStatusResponseDto()
      throws ClassCastException {
    return (CalloutVerificationStatusResponseDto) super.getActualInstance();
  }

  /**
   * Get the actual instance of `FlashcallVerificationStatusResponseDto`. If the actual instance is
   * not `FlashcallVerificationStatusResponseDto`, the ClassCastException will be thrown.
   *
   * @return The actual instance of `FlashcallVerificationStatusResponseDto`
   * @throws ClassCastException if the instance is not `FlashcallVerificationStatusResponseDto`
   */
  public FlashcallVerificationStatusResponseDto getFlashcallVerificationStatusResponseDto()
      throws ClassCastException {
    return (FlashcallVerificationStatusResponseDto) super.getActualInstance();
  }

  /**
   * Get the actual instance of `SMSVerificationStatusResponseDto`. If the actual instance is not
   * `SMSVerificationStatusResponseDto`, the ClassCastException will be thrown.
   *
   * @return The actual instance of `SMSVerificationStatusResponseDto`
   * @throws ClassCastException if the instance is not `SMSVerificationStatusResponseDto`
   */
  public SMSVerificationStatusResponseDto getSMSVerificationStatusResponseDto()
      throws ClassCastException {
    return (SMSVerificationStatusResponseDto) super.getActualInstance();
  }
}
