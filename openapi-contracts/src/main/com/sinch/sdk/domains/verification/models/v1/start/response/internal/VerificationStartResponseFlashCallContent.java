/*
 * Verification | Sinch
 *
 * OpenAPI document version: 2.0.1
 * Contact: support@sinch.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit the class manually.
 */

package com.sinch.sdk.domains.verification.models.v1.start.response.internal;

import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.sinch.sdk.core.models.AdditionalProperties;

/**
 * The response contains the <code>cliFilter</code> and <code>interceptionTimeout</code> properties.
 */
@JsonDeserialize(builder = VerificationStartResponseFlashCallContentImpl.Builder.class)
public interface VerificationStartResponseFlashCallContent extends AdditionalProperties {

  /**
   * Filter that should be applied for incoming calls to intercept the flash call.
   *
   * <p>Field is required
   *
   * @return cliFilter
   */
  String getCliFilter();

  /**
   * Amount of seconds client should wait for the flash call.
   *
   * <p>Field is required
   *
   * @return interceptionTimeout
   */
  Integer getInterceptionTimeout();

  /**
   * The time in seconds allowed for reporting the code after which the verification will expire.
   *
   * @return reportTimeout
   */
  Integer getReportTimeout();

  /**
   * Used by the mobile SDKs, this setting makes the handset deny the flash call after the set time
   * in seconds.
   *
   * @return denyCallAfter
   */
  Integer getDenyCallAfter();

  /**
   * Getting builder
   *
   * @return New Builder instance
   */
  static Builder builder() {
    return new VerificationStartResponseFlashCallContentImpl.Builder();
  }

  /** Dedicated Builder */
  interface Builder extends AdditionalProperties.Builder {

    /**
     * see getter
     *
     * @param cliFilter see getter
     * @return Current builder
     * @see #getCliFilter
     */
    Builder setCliFilter(String cliFilter);

    /**
     * see getter
     *
     * @param interceptionTimeout see getter
     * @return Current builder
     * @see #getInterceptionTimeout
     */
    Builder setInterceptionTimeout(Integer interceptionTimeout);

    /**
     * see getter
     *
     * @param reportTimeout see getter
     * @return Current builder
     * @see #getReportTimeout
     */
    Builder setReportTimeout(Integer reportTimeout);

    /**
     * see getter
     *
     * @param denyCallAfter see getter
     * @return Current builder
     * @see #getDenyCallAfter
     */
    Builder setDenyCallAfter(Integer denyCallAfter);

    /**
     * see getter
     *
     * @return Current builder
     * @see #get
     */
    Builder put(String key, Object value);

    /**
     * Create instance
     *
     * @return The instance build with current builder values
     */
    VerificationStartResponseFlashCallContent build();
  }
}
