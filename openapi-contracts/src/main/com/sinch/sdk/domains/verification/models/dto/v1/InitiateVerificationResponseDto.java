/*
 * Verification | Sinch
 * Verify users with SMS, flash calls (missed calls), a regular call, or data verification.
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: support@sinch.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.sinch.sdk.domains.verification.models.dto.v1;

import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
import com.fasterxml.jackson.databind.ser.std.StdSerializer;
import com.sinch.sdk.core.models.AbstractOpenApiSchema;
import com.sinch.sdk.core.utils.databind.JSONNavigator;
import java.io.IOException;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;

@JsonDeserialize(
    using = InitiateVerificationResponseDto.InitiateVerificationResponseDtoDeserializer.class)
@JsonSerialize(
    using = InitiateVerificationResponseDto.InitiateVerificationResponseDtoSerializer.class)
public final class InitiateVerificationResponseDto extends AbstractOpenApiSchema {
  private static final Logger log =
      Logger.getLogger(InitiateVerificationResponseDto.class.getName());

  public static final class InitiateVerificationResponseDtoSerializer
      extends StdSerializer<InitiateVerificationResponseDto> {
    private static final long serialVersionUID = 1L;

    public InitiateVerificationResponseDtoSerializer(Class<InitiateVerificationResponseDto> t) {
      super(t);
    }

    public InitiateVerificationResponseDtoSerializer() {
      this(null);
    }

    @Override
    public void serialize(
        InitiateVerificationResponseDto value, JsonGenerator jgen, SerializerProvider provider)
        throws IOException, JsonProcessingException {
      jgen.writeObject(value.getActualInstance());
    }
  }

  public static final class InitiateVerificationResponseDtoDeserializer
      extends StdDeserializer<InitiateVerificationResponseDto> {

    private static final long serialVersionUID = 1L;

    public InitiateVerificationResponseDtoDeserializer() {
      this(InitiateVerificationResponseDto.class);
    }

    public InitiateVerificationResponseDtoDeserializer(Class<?> vc) {
      super(vc);
    }

    @Override
    public InitiateVerificationResponseDto deserialize(JsonParser jp, DeserializationContext ctxt)
        throws IOException, JsonProcessingException {
      JsonNode tree = jp.readValueAsTree();
      Object deserialized = null;
      InitiateVerificationResponseDto newInitiateVerificationResponseDto =
          new InitiateVerificationResponseDto();
      Map<String, Object> result2 =
          tree.traverse(jp.getCodec()).readValueAs(new TypeReference<Map<String, Object>>() {});
      String discriminatorValue = (String) result2.get("method");
      switch (discriminatorValue) {
        case "CalloutInitiateVerificationResponse":
          deserialized =
              tree.traverse(jp.getCodec())
                  .readValueAs(CalloutInitiateVerificationResponseDto.class);
          newInitiateVerificationResponseDto.setActualInstance(deserialized);
          return newInitiateVerificationResponseDto;
        case "DataInitiateVerificationResponse":
          deserialized =
              tree.traverse(jp.getCodec()).readValueAs(DataInitiateVerificationResponseDto.class);
          newInitiateVerificationResponseDto.setActualInstance(deserialized);
          return newInitiateVerificationResponseDto;
        case "FlashCallInitiateVerificationResponse":
          deserialized =
              tree.traverse(jp.getCodec())
                  .readValueAs(FlashCallInitiateVerificationResponseDto.class);
          newInitiateVerificationResponseDto.setActualInstance(deserialized);
          return newInitiateVerificationResponseDto;
        case "SMSInitiateVerificationResponse":
          deserialized =
              tree.traverse(jp.getCodec()).readValueAs(SMSInitiateVerificationResponseDto.class);
          newInitiateVerificationResponseDto.setActualInstance(deserialized);
          return newInitiateVerificationResponseDto;
        case "callout":
          deserialized =
              tree.traverse(jp.getCodec())
                  .readValueAs(CalloutInitiateVerificationResponseDto.class);
          newInitiateVerificationResponseDto.setActualInstance(deserialized);
          return newInitiateVerificationResponseDto;
        case "flashcall":
          deserialized =
              tree.traverse(jp.getCodec())
                  .readValueAs(FlashCallInitiateVerificationResponseDto.class);
          newInitiateVerificationResponseDto.setActualInstance(deserialized);
          return newInitiateVerificationResponseDto;
        case "seamless":
          deserialized =
              tree.traverse(jp.getCodec()).readValueAs(DataInitiateVerificationResponseDto.class);
          newInitiateVerificationResponseDto.setActualInstance(deserialized);
          return newInitiateVerificationResponseDto;
        case "sms":
          deserialized =
              tree.traverse(jp.getCodec()).readValueAs(SMSInitiateVerificationResponseDto.class);
          newInitiateVerificationResponseDto.setActualInstance(deserialized);
          return newInitiateVerificationResponseDto;
        default:
          log.log(
              Level.WARNING,
              String.format(
                  "Failed to lookup discriminator value `%s` for InitiateVerificationResponseDto."
                      + " Possible values: CalloutInitiateVerificationResponse"
                      + " DataInitiateVerificationResponse FlashCallInitiateVerificationResponse"
                      + " SMSInitiateVerificationResponse callout flashcall seamless sms",
                  discriminatorValue));
      }

      boolean typeCoercion = ctxt.isEnabled(MapperFeature.ALLOW_COERCION_OF_SCALARS);
      int match = 0;
      JsonToken token = tree.traverse(jp.getCodec()).nextToken();
      // deserialize CalloutInitiateVerificationResponseDto
      try {
        boolean attemptParsing = true;
        // ensure that we respect type coercion as set on the client ObjectMapper
        if (CalloutInitiateVerificationResponseDto.class.equals(Integer.class)
            || CalloutInitiateVerificationResponseDto.class.equals(Long.class)
            || CalloutInitiateVerificationResponseDto.class.equals(Float.class)
            || CalloutInitiateVerificationResponseDto.class.equals(Double.class)
            || CalloutInitiateVerificationResponseDto.class.equals(Boolean.class)
            || CalloutInitiateVerificationResponseDto.class.equals(String.class)) {
          attemptParsing = typeCoercion;
          if (!attemptParsing) {
            attemptParsing |=
                ((CalloutInitiateVerificationResponseDto.class.equals(Integer.class)
                        || CalloutInitiateVerificationResponseDto.class.equals(Long.class))
                    && token == JsonToken.VALUE_NUMBER_INT);
            attemptParsing |=
                ((CalloutInitiateVerificationResponseDto.class.equals(Float.class)
                        || CalloutInitiateVerificationResponseDto.class.equals(Double.class))
                    && token == JsonToken.VALUE_NUMBER_FLOAT);
            attemptParsing |=
                (CalloutInitiateVerificationResponseDto.class.equals(Boolean.class)
                    && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
            attemptParsing |=
                (CalloutInitiateVerificationResponseDto.class.equals(String.class)
                    && token == JsonToken.VALUE_STRING);
          }
        }
        if (attemptParsing) {
          deserialized =
              tree.traverse(jp.getCodec())
                  .readValueAs(CalloutInitiateVerificationResponseDto.class);
          // TODO: there is no validation against JSON schema constraints
          // (min, max, enum, pattern...), this does not perform a strict JSON
          // validation, which means the 'match' count may be higher than it should be.
          match++;
          log.log(
              Level.FINER, "Input data matches schema 'CalloutInitiateVerificationResponseDto'");
        }
      } catch (Exception e) {
        // deserialization failed, continue
        log.log(
            Level.FINER,
            "Input data does not match schema 'CalloutInitiateVerificationResponseDto'",
            e);
      }

      // deserialize DataInitiateVerificationResponseDto
      try {
        boolean attemptParsing = true;
        // ensure that we respect type coercion as set on the client ObjectMapper
        if (DataInitiateVerificationResponseDto.class.equals(Integer.class)
            || DataInitiateVerificationResponseDto.class.equals(Long.class)
            || DataInitiateVerificationResponseDto.class.equals(Float.class)
            || DataInitiateVerificationResponseDto.class.equals(Double.class)
            || DataInitiateVerificationResponseDto.class.equals(Boolean.class)
            || DataInitiateVerificationResponseDto.class.equals(String.class)) {
          attemptParsing = typeCoercion;
          if (!attemptParsing) {
            attemptParsing |=
                ((DataInitiateVerificationResponseDto.class.equals(Integer.class)
                        || DataInitiateVerificationResponseDto.class.equals(Long.class))
                    && token == JsonToken.VALUE_NUMBER_INT);
            attemptParsing |=
                ((DataInitiateVerificationResponseDto.class.equals(Float.class)
                        || DataInitiateVerificationResponseDto.class.equals(Double.class))
                    && token == JsonToken.VALUE_NUMBER_FLOAT);
            attemptParsing |=
                (DataInitiateVerificationResponseDto.class.equals(Boolean.class)
                    && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
            attemptParsing |=
                (DataInitiateVerificationResponseDto.class.equals(String.class)
                    && token == JsonToken.VALUE_STRING);
          }
        }
        if (attemptParsing) {
          deserialized =
              tree.traverse(jp.getCodec()).readValueAs(DataInitiateVerificationResponseDto.class);
          // TODO: there is no validation against JSON schema constraints
          // (min, max, enum, pattern...), this does not perform a strict JSON
          // validation, which means the 'match' count may be higher than it should be.
          match++;
          log.log(Level.FINER, "Input data matches schema 'DataInitiateVerificationResponseDto'");
        }
      } catch (Exception e) {
        // deserialization failed, continue
        log.log(
            Level.FINER,
            "Input data does not match schema 'DataInitiateVerificationResponseDto'",
            e);
      }

      // deserialize FlashCallInitiateVerificationResponseDto
      try {
        boolean attemptParsing = true;
        // ensure that we respect type coercion as set on the client ObjectMapper
        if (FlashCallInitiateVerificationResponseDto.class.equals(Integer.class)
            || FlashCallInitiateVerificationResponseDto.class.equals(Long.class)
            || FlashCallInitiateVerificationResponseDto.class.equals(Float.class)
            || FlashCallInitiateVerificationResponseDto.class.equals(Double.class)
            || FlashCallInitiateVerificationResponseDto.class.equals(Boolean.class)
            || FlashCallInitiateVerificationResponseDto.class.equals(String.class)) {
          attemptParsing = typeCoercion;
          if (!attemptParsing) {
            attemptParsing |=
                ((FlashCallInitiateVerificationResponseDto.class.equals(Integer.class)
                        || FlashCallInitiateVerificationResponseDto.class.equals(Long.class))
                    && token == JsonToken.VALUE_NUMBER_INT);
            attemptParsing |=
                ((FlashCallInitiateVerificationResponseDto.class.equals(Float.class)
                        || FlashCallInitiateVerificationResponseDto.class.equals(Double.class))
                    && token == JsonToken.VALUE_NUMBER_FLOAT);
            attemptParsing |=
                (FlashCallInitiateVerificationResponseDto.class.equals(Boolean.class)
                    && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
            attemptParsing |=
                (FlashCallInitiateVerificationResponseDto.class.equals(String.class)
                    && token == JsonToken.VALUE_STRING);
          }
        }
        if (attemptParsing) {
          deserialized =
              tree.traverse(jp.getCodec())
                  .readValueAs(FlashCallInitiateVerificationResponseDto.class);
          // TODO: there is no validation against JSON schema constraints
          // (min, max, enum, pattern...), this does not perform a strict JSON
          // validation, which means the 'match' count may be higher than it should be.
          match++;
          log.log(
              Level.FINER, "Input data matches schema 'FlashCallInitiateVerificationResponseDto'");
        }
      } catch (Exception e) {
        // deserialization failed, continue
        log.log(
            Level.FINER,
            "Input data does not match schema 'FlashCallInitiateVerificationResponseDto'",
            e);
      }

      // deserialize SMSInitiateVerificationResponseDto
      try {
        boolean attemptParsing = true;
        // ensure that we respect type coercion as set on the client ObjectMapper
        if (SMSInitiateVerificationResponseDto.class.equals(Integer.class)
            || SMSInitiateVerificationResponseDto.class.equals(Long.class)
            || SMSInitiateVerificationResponseDto.class.equals(Float.class)
            || SMSInitiateVerificationResponseDto.class.equals(Double.class)
            || SMSInitiateVerificationResponseDto.class.equals(Boolean.class)
            || SMSInitiateVerificationResponseDto.class.equals(String.class)) {
          attemptParsing = typeCoercion;
          if (!attemptParsing) {
            attemptParsing |=
                ((SMSInitiateVerificationResponseDto.class.equals(Integer.class)
                        || SMSInitiateVerificationResponseDto.class.equals(Long.class))
                    && token == JsonToken.VALUE_NUMBER_INT);
            attemptParsing |=
                ((SMSInitiateVerificationResponseDto.class.equals(Float.class)
                        || SMSInitiateVerificationResponseDto.class.equals(Double.class))
                    && token == JsonToken.VALUE_NUMBER_FLOAT);
            attemptParsing |=
                (SMSInitiateVerificationResponseDto.class.equals(Boolean.class)
                    && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
            attemptParsing |=
                (SMSInitiateVerificationResponseDto.class.equals(String.class)
                    && token == JsonToken.VALUE_STRING);
          }
        }
        if (attemptParsing) {
          deserialized =
              tree.traverse(jp.getCodec()).readValueAs(SMSInitiateVerificationResponseDto.class);
          // TODO: there is no validation against JSON schema constraints
          // (min, max, enum, pattern...), this does not perform a strict JSON
          // validation, which means the 'match' count may be higher than it should be.
          match++;
          log.log(Level.FINER, "Input data matches schema 'SMSInitiateVerificationResponseDto'");
        }
      } catch (Exception e) {
        // deserialization failed, continue
        log.log(
            Level.FINER,
            "Input data does not match schema 'SMSInitiateVerificationResponseDto'",
            e);
      }

      if (match == 1) {
        InitiateVerificationResponseDto ret = new InitiateVerificationResponseDto();
        ret.setActualInstance(deserialized);
        return ret;
      }
      throw new IOException(
          String.format(
              "Failed deserialization for InitiateVerificationResponseDto: %d classes match result,"
                  + " expected 1",
              match));
    }

    /** Handle deserialization of the 'null' value. */
    @Override
    public InitiateVerificationResponseDto getNullValue(DeserializationContext ctxt)
        throws JsonMappingException {
      throw new JsonMappingException(
          ctxt.getParser(), "InitiateVerificationResponseDto cannot be null");
    }
  }

  // store a list of schema names defined in oneOf
  public static final Map<String, Class<?>> schemas = new HashMap<>();

  public InitiateVerificationResponseDto() {
    super("oneOf", Boolean.FALSE);
  }

  public InitiateVerificationResponseDto(CalloutInitiateVerificationResponseDto o) {
    super("oneOf", Boolean.FALSE);
    setActualInstance(o);
  }

  public InitiateVerificationResponseDto(DataInitiateVerificationResponseDto o) {
    super("oneOf", Boolean.FALSE);
    setActualInstance(o);
  }

  public InitiateVerificationResponseDto(FlashCallInitiateVerificationResponseDto o) {
    super("oneOf", Boolean.FALSE);
    setActualInstance(o);
  }

  public InitiateVerificationResponseDto(SMSInitiateVerificationResponseDto o) {
    super("oneOf", Boolean.FALSE);
    setActualInstance(o);
  }

  static {
    schemas.put(
        "CalloutInitiateVerificationResponseDto", CalloutInitiateVerificationResponseDto.class);
    schemas.put("DataInitiateVerificationResponseDto", DataInitiateVerificationResponseDto.class);
    schemas.put(
        "FlashCallInitiateVerificationResponseDto", FlashCallInitiateVerificationResponseDto.class);
    schemas.put("SMSInitiateVerificationResponseDto", SMSInitiateVerificationResponseDto.class);
    JSONNavigator.registerDescendants(
        InitiateVerificationResponseDto.class, Collections.unmodifiableMap(schemas));
    // Initialize and register the discriminator mappings.
    Map<String, Class<?>> mappings = new HashMap<String, Class<?>>();
    mappings.put(
        "CalloutInitiateVerificationResponse", CalloutInitiateVerificationResponseDto.class);
    mappings.put("DataInitiateVerificationResponse", DataInitiateVerificationResponseDto.class);
    mappings.put(
        "FlashCallInitiateVerificationResponse", FlashCallInitiateVerificationResponseDto.class);
    mappings.put("SMSInitiateVerificationResponse", SMSInitiateVerificationResponseDto.class);
    mappings.put("callout", CalloutInitiateVerificationResponseDto.class);
    mappings.put("flashcall", FlashCallInitiateVerificationResponseDto.class);
    mappings.put("seamless", DataInitiateVerificationResponseDto.class);
    mappings.put("sms", SMSInitiateVerificationResponseDto.class);
    mappings.put("InitiateVerificationResponse", InitiateVerificationResponseDto.class);
    JSONNavigator.registerDiscriminator(InitiateVerificationResponseDto.class, "method", mappings);
  }

  @Override
  public Map<String, Class<?>> getSchemas() {
    return InitiateVerificationResponseDto.schemas;
  }

  /**
   * Set the instance that matches the oneOf child schema, check the instance parameter is valid
   * against the oneOf child schemas: CalloutInitiateVerificationResponseDto,
   * DataInitiateVerificationResponseDto, FlashCallInitiateVerificationResponseDto,
   * SMSInitiateVerificationResponseDto
   *
   * <p>It could be an instance of the 'oneOf' schemas. The oneOf child schemas may themselves be a
   * composed schema (allOf, anyOf, oneOf).
   */
  @Override
  public void setActualInstance(Object instance) {
    if (JSONNavigator.isInstanceOf(
        CalloutInitiateVerificationResponseDto.class, instance, new HashSet<Class<?>>())) {
      super.setActualInstance(instance);
      return;
    }

    if (JSONNavigator.isInstanceOf(
        DataInitiateVerificationResponseDto.class, instance, new HashSet<Class<?>>())) {
      super.setActualInstance(instance);
      return;
    }

    if (JSONNavigator.isInstanceOf(
        FlashCallInitiateVerificationResponseDto.class, instance, new HashSet<Class<?>>())) {
      super.setActualInstance(instance);
      return;
    }

    if (JSONNavigator.isInstanceOf(
        SMSInitiateVerificationResponseDto.class, instance, new HashSet<Class<?>>())) {
      super.setActualInstance(instance);
      return;
    }

    throw new RuntimeException(
        "Invalid instance type. Must be CalloutInitiateVerificationResponseDto,"
            + " DataInitiateVerificationResponseDto, FlashCallInitiateVerificationResponseDto,"
            + " SMSInitiateVerificationResponseDto");
  }

  /**
   * Get the actual instance, which can be the following: CalloutInitiateVerificationResponseDto,
   * DataInitiateVerificationResponseDto, FlashCallInitiateVerificationResponseDto,
   * SMSInitiateVerificationResponseDto
   *
   * @return The actual instance (CalloutInitiateVerificationResponseDto,
   *     DataInitiateVerificationResponseDto, FlashCallInitiateVerificationResponseDto,
   *     SMSInitiateVerificationResponseDto)
   */
  @Override
  public Object getActualInstance() {
    return super.getActualInstance();
  }

  /**
   * Get the actual instance of `CalloutInitiateVerificationResponseDto`. If the actual instance is
   * not `CalloutInitiateVerificationResponseDto`, the ClassCastException will be thrown.
   *
   * @return The actual instance of `CalloutInitiateVerificationResponseDto`
   * @throws ClassCastException if the instance is not `CalloutInitiateVerificationResponseDto`
   */
  public CalloutInitiateVerificationResponseDto getCalloutInitiateVerificationResponseDto()
      throws ClassCastException {
    return (CalloutInitiateVerificationResponseDto) super.getActualInstance();
  }

  /**
   * Get the actual instance of `DataInitiateVerificationResponseDto`. If the actual instance is not
   * `DataInitiateVerificationResponseDto`, the ClassCastException will be thrown.
   *
   * @return The actual instance of `DataInitiateVerificationResponseDto`
   * @throws ClassCastException if the instance is not `DataInitiateVerificationResponseDto`
   */
  public DataInitiateVerificationResponseDto getDataInitiateVerificationResponseDto()
      throws ClassCastException {
    return (DataInitiateVerificationResponseDto) super.getActualInstance();
  }

  /**
   * Get the actual instance of `FlashCallInitiateVerificationResponseDto`. If the actual instance
   * is not `FlashCallInitiateVerificationResponseDto`, the ClassCastException will be thrown.
   *
   * @return The actual instance of `FlashCallInitiateVerificationResponseDto`
   * @throws ClassCastException if the instance is not `FlashCallInitiateVerificationResponseDto`
   */
  public FlashCallInitiateVerificationResponseDto getFlashCallInitiateVerificationResponseDto()
      throws ClassCastException {
    return (FlashCallInitiateVerificationResponseDto) super.getActualInstance();
  }

  /**
   * Get the actual instance of `SMSInitiateVerificationResponseDto`. If the actual instance is not
   * `SMSInitiateVerificationResponseDto`, the ClassCastException will be thrown.
   *
   * @return The actual instance of `SMSInitiateVerificationResponseDto`
   * @throws ClassCastException if the instance is not `SMSInitiateVerificationResponseDto`
   */
  public SMSInitiateVerificationResponseDto getSMSInitiateVerificationResponseDto()
      throws ClassCastException {
    return (SMSInitiateVerificationResponseDto) super.getActualInstance();
  }
}
