/*
 * Verification | Sinch
 * Verify users with SMS, flash calls (missed calls), a regular call, or data verification.
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: support@sinch.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.sinch.sdk.domains.verification.models.dto.v1;

import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonMappingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.MapperFeature;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
import com.fasterxml.jackson.databind.ser.std.StdSerializer;
import com.sinch.sdk.core.models.AbstractOpenApiSchema;
import com.sinch.sdk.core.utils.databind.JSONNavigator;
import java.io.IOException;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;

@JsonDeserialize(
    using =
        VerificationRequestEventResponseDto.VerificationRequestEventResponseDtoDeserializer.class)
@JsonSerialize(
    using = VerificationRequestEventResponseDto.VerificationRequestEventResponseDtoSerializer.class)
public final class VerificationRequestEventResponseDto extends AbstractOpenApiSchema {
  private static final Logger log =
      Logger.getLogger(VerificationRequestEventResponseDto.class.getName());

  public static final class VerificationRequestEventResponseDtoSerializer
      extends StdSerializer<VerificationRequestEventResponseDto> {
    private static final long serialVersionUID = 1L;

    public VerificationRequestEventResponseDtoSerializer(
        Class<VerificationRequestEventResponseDto> t) {
      super(t);
    }

    public VerificationRequestEventResponseDtoSerializer() {
      this(null);
    }

    @Override
    public void serialize(
        VerificationRequestEventResponseDto value, JsonGenerator jgen, SerializerProvider provider)
        throws IOException, JsonProcessingException {
      jgen.writeObject(value.getActualInstance());
    }
  }

  public static final class VerificationRequestEventResponseDtoDeserializer
      extends StdDeserializer<VerificationRequestEventResponseDto> {

    private static final long serialVersionUID = 1L;

    public VerificationRequestEventResponseDtoDeserializer() {
      this(VerificationRequestEventResponseDto.class);
    }

    public VerificationRequestEventResponseDtoDeserializer(Class<?> vc) {
      super(vc);
    }

    @Override
    public VerificationRequestEventResponseDto deserialize(
        JsonParser jp, DeserializationContext ctxt) throws IOException, JsonProcessingException {
      JsonNode tree = jp.readValueAsTree();
      Object deserialized = null;
      boolean typeCoercion = ctxt.isEnabled(MapperFeature.ALLOW_COERCION_OF_SCALARS);
      int match = 0;
      JsonToken token = tree.traverse(jp.getCodec()).nextToken();
      // deserialize CalloutRequestEventResponseDto
      try {
        boolean attemptParsing = true;
        // ensure that we respect type coercion as set on the client ObjectMapper
        if (CalloutRequestEventResponseDto.class.equals(Integer.class)
            || CalloutRequestEventResponseDto.class.equals(Long.class)
            || CalloutRequestEventResponseDto.class.equals(Float.class)
            || CalloutRequestEventResponseDto.class.equals(Double.class)
            || CalloutRequestEventResponseDto.class.equals(Boolean.class)
            || CalloutRequestEventResponseDto.class.equals(String.class)) {
          attemptParsing = typeCoercion;
          if (!attemptParsing) {
            attemptParsing |=
                ((CalloutRequestEventResponseDto.class.equals(Integer.class)
                        || CalloutRequestEventResponseDto.class.equals(Long.class))
                    && token == JsonToken.VALUE_NUMBER_INT);
            attemptParsing |=
                ((CalloutRequestEventResponseDto.class.equals(Float.class)
                        || CalloutRequestEventResponseDto.class.equals(Double.class))
                    && token == JsonToken.VALUE_NUMBER_FLOAT);
            attemptParsing |=
                (CalloutRequestEventResponseDto.class.equals(Boolean.class)
                    && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
            attemptParsing |=
                (CalloutRequestEventResponseDto.class.equals(String.class)
                    && token == JsonToken.VALUE_STRING);
          }
        }
        if (attemptParsing) {
          deserialized =
              tree.traverse(jp.getCodec()).readValueAs(CalloutRequestEventResponseDto.class);
          // TODO: there is no validation against JSON schema constraints
          // (min, max, enum, pattern...), this does not perform a strict JSON
          // validation, which means the 'match' count may be higher than it should be.
          match++;
          log.log(Level.FINER, "Input data matches schema 'CalloutRequestEventResponseDto'");
        }
      } catch (Exception e) {
        // deserialization failed, continue
        log.log(
            Level.FINER, "Input data does not match schema 'CalloutRequestEventResponseDto'", e);
      }

      // deserialize FlashCallRequestEventResponseDto
      try {
        boolean attemptParsing = true;
        // ensure that we respect type coercion as set on the client ObjectMapper
        if (FlashCallRequestEventResponseDto.class.equals(Integer.class)
            || FlashCallRequestEventResponseDto.class.equals(Long.class)
            || FlashCallRequestEventResponseDto.class.equals(Float.class)
            || FlashCallRequestEventResponseDto.class.equals(Double.class)
            || FlashCallRequestEventResponseDto.class.equals(Boolean.class)
            || FlashCallRequestEventResponseDto.class.equals(String.class)) {
          attemptParsing = typeCoercion;
          if (!attemptParsing) {
            attemptParsing |=
                ((FlashCallRequestEventResponseDto.class.equals(Integer.class)
                        || FlashCallRequestEventResponseDto.class.equals(Long.class))
                    && token == JsonToken.VALUE_NUMBER_INT);
            attemptParsing |=
                ((FlashCallRequestEventResponseDto.class.equals(Float.class)
                        || FlashCallRequestEventResponseDto.class.equals(Double.class))
                    && token == JsonToken.VALUE_NUMBER_FLOAT);
            attemptParsing |=
                (FlashCallRequestEventResponseDto.class.equals(Boolean.class)
                    && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
            attemptParsing |=
                (FlashCallRequestEventResponseDto.class.equals(String.class)
                    && token == JsonToken.VALUE_STRING);
          }
        }
        if (attemptParsing) {
          deserialized =
              tree.traverse(jp.getCodec()).readValueAs(FlashCallRequestEventResponseDto.class);
          // TODO: there is no validation against JSON schema constraints
          // (min, max, enum, pattern...), this does not perform a strict JSON
          // validation, which means the 'match' count may be higher than it should be.
          match++;
          log.log(Level.FINER, "Input data matches schema 'FlashCallRequestEventResponseDto'");
        }
      } catch (Exception e) {
        // deserialization failed, continue
        log.log(
            Level.FINER, "Input data does not match schema 'FlashCallRequestEventResponseDto'", e);
      }

      // deserialize SMSRequestEventResponseDto
      try {
        boolean attemptParsing = true;
        // ensure that we respect type coercion as set on the client ObjectMapper
        if (SMSRequestEventResponseDto.class.equals(Integer.class)
            || SMSRequestEventResponseDto.class.equals(Long.class)
            || SMSRequestEventResponseDto.class.equals(Float.class)
            || SMSRequestEventResponseDto.class.equals(Double.class)
            || SMSRequestEventResponseDto.class.equals(Boolean.class)
            || SMSRequestEventResponseDto.class.equals(String.class)) {
          attemptParsing = typeCoercion;
          if (!attemptParsing) {
            attemptParsing |=
                ((SMSRequestEventResponseDto.class.equals(Integer.class)
                        || SMSRequestEventResponseDto.class.equals(Long.class))
                    && token == JsonToken.VALUE_NUMBER_INT);
            attemptParsing |=
                ((SMSRequestEventResponseDto.class.equals(Float.class)
                        || SMSRequestEventResponseDto.class.equals(Double.class))
                    && token == JsonToken.VALUE_NUMBER_FLOAT);
            attemptParsing |=
                (SMSRequestEventResponseDto.class.equals(Boolean.class)
                    && (token == JsonToken.VALUE_FALSE || token == JsonToken.VALUE_TRUE));
            attemptParsing |=
                (SMSRequestEventResponseDto.class.equals(String.class)
                    && token == JsonToken.VALUE_STRING);
          }
        }
        if (attemptParsing) {
          deserialized = tree.traverse(jp.getCodec()).readValueAs(SMSRequestEventResponseDto.class);
          // TODO: there is no validation against JSON schema constraints
          // (min, max, enum, pattern...), this does not perform a strict JSON
          // validation, which means the 'match' count may be higher than it should be.
          match++;
          log.log(Level.FINER, "Input data matches schema 'SMSRequestEventResponseDto'");
        }
      } catch (Exception e) {
        // deserialization failed, continue
        log.log(Level.FINER, "Input data does not match schema 'SMSRequestEventResponseDto'", e);
      }

      if (match == 1) {
        VerificationRequestEventResponseDto ret = new VerificationRequestEventResponseDto();
        ret.setActualInstance(deserialized);
        return ret;
      }
      throw new IOException(
          String.format(
              "Failed deserialization for VerificationRequestEventResponseDto: %d classes match"
                  + " result, expected 1",
              match));
    }

    /** Handle deserialization of the 'null' value. */
    @Override
    public VerificationRequestEventResponseDto getNullValue(DeserializationContext ctxt)
        throws JsonMappingException {
      throw new JsonMappingException(
          ctxt.getParser(), "VerificationRequestEventResponseDto cannot be null");
    }
  }

  // store a list of schema names defined in oneOf
  public static final Map<String, Class<?>> schemas = new HashMap<>();

  public VerificationRequestEventResponseDto() {
    super("oneOf", Boolean.FALSE);
  }

  public VerificationRequestEventResponseDto(CalloutRequestEventResponseDto o) {
    super("oneOf", Boolean.FALSE);
    setActualInstance(o);
  }

  public VerificationRequestEventResponseDto(FlashCallRequestEventResponseDto o) {
    super("oneOf", Boolean.FALSE);
    setActualInstance(o);
  }

  public VerificationRequestEventResponseDto(SMSRequestEventResponseDto o) {
    super("oneOf", Boolean.FALSE);
    setActualInstance(o);
  }

  static {
    schemas.put("CalloutRequestEventResponseDto", CalloutRequestEventResponseDto.class);
    schemas.put("FlashCallRequestEventResponseDto", FlashCallRequestEventResponseDto.class);
    schemas.put("SMSRequestEventResponseDto", SMSRequestEventResponseDto.class);
    JSONNavigator.registerDescendants(
        VerificationRequestEventResponseDto.class, Collections.unmodifiableMap(schemas));
  }

  @Override
  public Map<String, Class<?>> getSchemas() {
    return VerificationRequestEventResponseDto.schemas;
  }

  /**
   * Set the instance that matches the oneOf child schema, check the instance parameter is valid
   * against the oneOf child schemas: CalloutRequestEventResponseDto,
   * FlashCallRequestEventResponseDto, SMSRequestEventResponseDto
   *
   * <p>It could be an instance of the 'oneOf' schemas. The oneOf child schemas may themselves be a
   * composed schema (allOf, anyOf, oneOf).
   */
  @Override
  public void setActualInstance(Object instance) {
    if (JSONNavigator.isInstanceOf(
        CalloutRequestEventResponseDto.class, instance, new HashSet<Class<?>>())) {
      super.setActualInstance(instance);
      return;
    }

    if (JSONNavigator.isInstanceOf(
        FlashCallRequestEventResponseDto.class, instance, new HashSet<Class<?>>())) {
      super.setActualInstance(instance);
      return;
    }

    if (JSONNavigator.isInstanceOf(
        SMSRequestEventResponseDto.class, instance, new HashSet<Class<?>>())) {
      super.setActualInstance(instance);
      return;
    }

    throw new RuntimeException(
        "Invalid instance type. Must be CalloutRequestEventResponseDto,"
            + " FlashCallRequestEventResponseDto, SMSRequestEventResponseDto");
  }

  /**
   * Get the actual instance, which can be the following: CalloutRequestEventResponseDto,
   * FlashCallRequestEventResponseDto, SMSRequestEventResponseDto
   *
   * @return The actual instance (CalloutRequestEventResponseDto, FlashCallRequestEventResponseDto,
   *     SMSRequestEventResponseDto)
   */
  @Override
  public Object getActualInstance() {
    return super.getActualInstance();
  }

  /**
   * Get the actual instance of `CalloutRequestEventResponseDto`. If the actual instance is not
   * `CalloutRequestEventResponseDto`, the ClassCastException will be thrown.
   *
   * @return The actual instance of `CalloutRequestEventResponseDto`
   * @throws ClassCastException if the instance is not `CalloutRequestEventResponseDto`
   */
  public CalloutRequestEventResponseDto getCalloutRequestEventResponseDto()
      throws ClassCastException {
    return (CalloutRequestEventResponseDto) super.getActualInstance();
  }

  /**
   * Get the actual instance of `FlashCallRequestEventResponseDto`. If the actual instance is not
   * `FlashCallRequestEventResponseDto`, the ClassCastException will be thrown.
   *
   * @return The actual instance of `FlashCallRequestEventResponseDto`
   * @throws ClassCastException if the instance is not `FlashCallRequestEventResponseDto`
   */
  public FlashCallRequestEventResponseDto getFlashCallRequestEventResponseDto()
      throws ClassCastException {
    return (FlashCallRequestEventResponseDto) super.getActualInstance();
  }

  /**
   * Get the actual instance of `SMSRequestEventResponseDto`. If the actual instance is not
   * `SMSRequestEventResponseDto`, the ClassCastException will be thrown.
   *
   * @return The actual instance of `SMSRequestEventResponseDto`
   * @throws ClassCastException if the instance is not `SMSRequestEventResponseDto`
   */
  public SMSRequestEventResponseDto getSMSRequestEventResponseDto() throws ClassCastException {
    return (SMSRequestEventResponseDto) super.getActualInstance();
  }
}
