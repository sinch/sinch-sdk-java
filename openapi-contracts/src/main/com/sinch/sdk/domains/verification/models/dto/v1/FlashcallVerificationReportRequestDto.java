/*
 * Verification | Sinch
 * Verify users with SMS, flash calls (missed calls), a regular call, or data verification.
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: support@sinch.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.sinch.sdk.domains.verification.models.dto.v1;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFilter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Objects;

/** FlashcallVerificationReportRequestDto */
@JsonPropertyOrder({
  FlashcallVerificationReportRequestDto.JSON_PROPERTY_METHOD,
  FlashcallVerificationReportRequestDto.JSON_PROPERTY_FLASH_CALL
})
@JsonFilter("uninitializedFilter")
@JsonInclude(value = JsonInclude.Include.CUSTOM)
public class FlashcallVerificationReportRequestDto {
  private static final long serialVersionUID = 1L;

  /** The type of verification. */
  public enum MethodEnum {
    FLASHCALL("flashcall"),

    UNKNOWN_DEFAULT_OPEN_API("unknown_default_open_api");

    private String value;

    MethodEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static MethodEnum fromValue(String value) {
      for (MethodEnum b : MethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return UNKNOWN_DEFAULT_OPEN_API;
    }
  }

  public static final String JSON_PROPERTY_METHOD = "method";
  private String method;
  private boolean methodDefined = false;

  public static final String JSON_PROPERTY_FLASH_CALL = "flashCall";
  private FlashcallVerificationReportRequestFlashCallDto flashCall;
  private boolean flashCallDefined = false;

  public FlashcallVerificationReportRequestDto() {}

  public FlashcallVerificationReportRequestDto method(String method) {
    this.method = method;
    this.methodDefined = true;
    return this;
  }

  /**
   * The type of verification.
   *
   * @return method
   */
  @JsonProperty(JSON_PROPERTY_METHOD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getMethod() {
    return method;
  }

  @JsonIgnore
  public boolean getMethodDefined() {
    return methodDefined;
  }

  @JsonProperty(JSON_PROPERTY_METHOD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMethod(String method) {
    this.method = method;
    this.methodDefined = true;
  }

  public FlashcallVerificationReportRequestDto flashCall(
      FlashcallVerificationReportRequestFlashCallDto flashCall) {
    this.flashCall = flashCall;
    this.flashCallDefined = true;
    return this;
  }

  /**
   * Get flashCall
   *
   * @return flashCall
   */
  @JsonProperty(JSON_PROPERTY_FLASH_CALL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public FlashcallVerificationReportRequestFlashCallDto getFlashCall() {
    return flashCall;
  }

  @JsonIgnore
  public boolean getFlashCallDefined() {
    return flashCallDefined;
  }

  @JsonProperty(JSON_PROPERTY_FLASH_CALL)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setFlashCall(FlashcallVerificationReportRequestFlashCallDto flashCall) {
    this.flashCall = flashCall;
    this.flashCallDefined = true;
  }

  /** Return true if this FlashcallVerificationReportRequest object is equal to o. */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FlashcallVerificationReportRequestDto flashcallVerificationReportRequest =
        (FlashcallVerificationReportRequestDto) o;
    return Objects.equals(this.method, flashcallVerificationReportRequest.method)
        && Objects.equals(this.flashCall, flashcallVerificationReportRequest.flashCall);
  }

  @Override
  public int hashCode() {
    return Objects.hash(method, flashCall);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FlashcallVerificationReportRequestDto {\n");
    sb.append("    method: ").append(toIndentedString(method)).append("\n");
    sb.append("    flashCall: ").append(toIndentedString(flashCall)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
