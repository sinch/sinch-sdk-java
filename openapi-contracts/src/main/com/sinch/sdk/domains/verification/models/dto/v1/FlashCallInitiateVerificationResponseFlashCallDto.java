/*
 * Verification | Sinch
 * Verify users with SMS, flash calls (missed calls), a regular call, or data verification.
 *
 * The version of the OpenAPI document: 2.0.1
 * Contact: support@sinch.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.sinch.sdk.domains.verification.models.dto.v1;

import com.fasterxml.jackson.annotation.JsonFilter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import java.util.Objects;

/**
 * The response contains the &#x60;cliFilter&#x60; and &#x60;interceptionTimeout&#x60; properties.
 */
@JsonPropertyOrder({
  FlashCallInitiateVerificationResponseFlashCallDto.JSON_PROPERTY_CLI_FILTER,
  FlashCallInitiateVerificationResponseFlashCallDto.JSON_PROPERTY_INTERCEPTION_TIMEOUT,
  FlashCallInitiateVerificationResponseFlashCallDto.JSON_PROPERTY_REPORT_TIMEOUT,
  FlashCallInitiateVerificationResponseFlashCallDto.JSON_PROPERTY_DENY_CALL_AFTER
})
@JsonFilter("uninitializedFilter")
@JsonInclude(value = JsonInclude.Include.CUSTOM)
public class FlashCallInitiateVerificationResponseFlashCallDto {
  private static final long serialVersionUID = 1L;
  public static final String JSON_PROPERTY_CLI_FILTER = "cliFilter";
  private String cliFilter;
  private boolean cliFilterDefined = false;

  public static final String JSON_PROPERTY_INTERCEPTION_TIMEOUT = "interceptionTimeout";
  private Integer interceptionTimeout;
  private boolean interceptionTimeoutDefined = false;

  public static final String JSON_PROPERTY_REPORT_TIMEOUT = "reportTimeout";
  private Integer reportTimeout;
  private boolean reportTimeoutDefined = false;

  public static final String JSON_PROPERTY_DENY_CALL_AFTER = "denyCallAfter";
  private Integer denyCallAfter;
  private boolean denyCallAfterDefined = false;

  public FlashCallInitiateVerificationResponseFlashCallDto() {}

  public FlashCallInitiateVerificationResponseFlashCallDto cliFilter(String cliFilter) {
    this.cliFilter = cliFilter;
    this.cliFilterDefined = true;
    return this;
  }

  /**
   * Filter that should be applied for incoming calls to intercept the Flashcall.
   *
   * @return cliFilter
   */
  @JsonProperty(JSON_PROPERTY_CLI_FILTER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getCliFilter() {
    return cliFilter;
  }

  @JsonIgnore
  public boolean getCliFilterDefined() {
    return cliFilterDefined;
  }

  @JsonProperty(JSON_PROPERTY_CLI_FILTER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCliFilter(String cliFilter) {
    this.cliFilter = cliFilter;
    this.cliFilterDefined = true;
  }

  public FlashCallInitiateVerificationResponseFlashCallDto interceptionTimeout(
      Integer interceptionTimeout) {
    this.interceptionTimeout = interceptionTimeout;
    this.interceptionTimeoutDefined = true;
    return this;
  }

  /**
   * Amount of seconds client should wait for the Flashcall.
   *
   * @return interceptionTimeout
   */
  @JsonProperty(JSON_PROPERTY_INTERCEPTION_TIMEOUT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Integer getInterceptionTimeout() {
    return interceptionTimeout;
  }

  @JsonIgnore
  public boolean getInterceptionTimeoutDefined() {
    return interceptionTimeoutDefined;
  }

  @JsonProperty(JSON_PROPERTY_INTERCEPTION_TIMEOUT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setInterceptionTimeout(Integer interceptionTimeout) {
    this.interceptionTimeout = interceptionTimeout;
    this.interceptionTimeoutDefined = true;
  }

  public FlashCallInitiateVerificationResponseFlashCallDto reportTimeout(Integer reportTimeout) {
    this.reportTimeout = reportTimeout;
    this.reportTimeoutDefined = true;
    return this;
  }

  /**
   * The time in seconds allowed for reporting the code after which the verification will expire.
   *
   * @return reportTimeout
   */
  @JsonProperty(JSON_PROPERTY_REPORT_TIMEOUT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getReportTimeout() {
    return reportTimeout;
  }

  @JsonIgnore
  public boolean getReportTimeoutDefined() {
    return reportTimeoutDefined;
  }

  @JsonProperty(JSON_PROPERTY_REPORT_TIMEOUT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setReportTimeout(Integer reportTimeout) {
    this.reportTimeout = reportTimeout;
    this.reportTimeoutDefined = true;
  }

  public FlashCallInitiateVerificationResponseFlashCallDto denyCallAfter(Integer denyCallAfter) {
    this.denyCallAfter = denyCallAfter;
    this.denyCallAfterDefined = true;
    return this;
  }

  /**
   * Used by the SDKs, this setting makes the handset deny the flashcall after the set time in
   * seconds.
   *
   * @return denyCallAfter
   */
  @JsonProperty(JSON_PROPERTY_DENY_CALL_AFTER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getDenyCallAfter() {
    return denyCallAfter;
  }

  @JsonIgnore
  public boolean getDenyCallAfterDefined() {
    return denyCallAfterDefined;
  }

  @JsonProperty(JSON_PROPERTY_DENY_CALL_AFTER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDenyCallAfter(Integer denyCallAfter) {
    this.denyCallAfter = denyCallAfter;
    this.denyCallAfterDefined = true;
  }

  /** Return true if this FlashCallInitiateVerificationResponse_flashCall object is equal to o. */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FlashCallInitiateVerificationResponseFlashCallDto
        flashCallInitiateVerificationResponseFlashCall =
            (FlashCallInitiateVerificationResponseFlashCallDto) o;
    return Objects.equals(this.cliFilter, flashCallInitiateVerificationResponseFlashCall.cliFilter)
        && Objects.equals(
            this.interceptionTimeout,
            flashCallInitiateVerificationResponseFlashCall.interceptionTimeout)
        && Objects.equals(
            this.reportTimeout, flashCallInitiateVerificationResponseFlashCall.reportTimeout)
        && Objects.equals(
            this.denyCallAfter, flashCallInitiateVerificationResponseFlashCall.denyCallAfter);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cliFilter, interceptionTimeout, reportTimeout, denyCallAfter);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FlashCallInitiateVerificationResponseFlashCallDto {\n");
    sb.append("    cliFilter: ").append(toIndentedString(cliFilter)).append("\n");
    sb.append("    interceptionTimeout: ")
        .append(toIndentedString(interceptionTimeout))
        .append("\n");
    sb.append("    reportTimeout: ").append(toIndentedString(reportTimeout)).append("\n");
    sb.append("    denyCallAfter: ").append(toIndentedString(denyCallAfter)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
